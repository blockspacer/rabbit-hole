[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/clipmap/clipmap-events.js",
    "content": "import { ClipmapEvent } from \"../events/ClipmapEvent.js\";\r\n\r\n/**\r\n * Signals the end of a clipmap update for a single LOD shell.\r\n *\r\n * This event is dispatched by {@link Clipmap}.\r\n *\r\n * @type {ClipmapEvent}\r\n * @example terrain.addEventListener(\"update\", myListener);\r\n */\r\n\r\nexport const update = new ClipmapEvent(\"update\");\r\n\r\n/**\r\n * Signals the occurrence of an unexpected error.\r\n *\r\n * This event is dispatched by {@link Clipmap}.\r\n *\r\n * @type {ClipmapEvent}\r\n * @example terrain.addEventListener(\"error\", myListener);\r\n */\r\n\r\nexport const error = new ClipmapEvent(\"error\");\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/clipmap/clipmap-events.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "update",
    "memberof": "src/clipmap/clipmap-events.js",
    "static": true,
    "longname": "src/clipmap/clipmap-events.js~update",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/clipmap/clipmap-events.js",
    "importStyle": "{update}",
    "description": "Signals the end of a clipmap update for a single LOD shell.\n\nThis event is dispatched by {@link Clipmap}.",
    "examples": [
      "terrain.addEventListener(\"update\", myListener);"
    ],
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "ClipmapEvent"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "error",
    "memberof": "src/clipmap/clipmap-events.js",
    "static": true,
    "longname": "src/clipmap/clipmap-events.js~error",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/clipmap/clipmap-events.js",
    "importStyle": "{error}",
    "description": "Signals the occurrence of an unexpected error.\n\nThis event is dispatched by {@link Clipmap}.",
    "examples": [
      "terrain.addEventListener(\"error\", myListener);"
    ],
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "ClipmapEvent"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "src/clipmap/Clipmap.js",
    "content": "import { Box3, Frustum, Matrix4, Vector3 } from \"math-ds\";\r\nimport { EventTarget } from \"synthetic-event\";\r\nimport { Scene } from \"./Scene.js\";\r\nimport * as events from \"./clipmap-events.js\";\r\n\r\n/**\r\n * A box.\r\n *\r\n * @type {Box3}\r\n * @private\r\n */\r\n\r\nconst b = new Box3();\r\n\r\n/**\r\n * A frustum.\r\n *\r\n * @type {Frustum}\r\n * @private\r\n */\r\n\r\nconst f = new Frustum();\r\n\r\n/**\r\n * A 4x4 matrix.\r\n *\r\n * @type {Matrix4}\r\n * @private\r\n */\r\n\r\nconst m = new Matrix4();\r\n\r\n/**\r\n * A 3D geometry clipmap.\r\n *\r\n * Finds world octants that are close to the viewer and arranges them in\r\n * concentric LOD shells. Octants that leave or enter a shell are reported for\r\n * further processing.\r\n */\r\n\r\nexport class Clipmap extends EventTarget {\r\n\r\n\t/**\r\n\t * Constructs a new clipmap.\r\n\t *\r\n\t * @param {WorldOctree} world - A world octree.\r\n\t */\r\n\r\n\tconstructor(world) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The world octree.\r\n\t\t *\r\n\t\t * @type {WorldOctree}\r\n\t\t */\r\n\r\n\t\tthis.world = world;\r\n\r\n\t\t/**\r\n\t\t * The current view position.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\r\n\t\tthis.position = new Vector3(Infinity, Infinity, Infinity);\r\n\r\n\t\t/**\r\n\t\t * The current scene.\r\n\t\t *\r\n\t\t * @type {Scene}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.currentScene = new Scene(this.world.levels);\r\n\r\n\t\t/**\r\n\t\t * The previous scene.\r\n\t\t *\r\n\t\t * @type {Scene}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.previousScene = this.currentScene.clone();\r\n\r\n\t\t/**\r\n\t\t * The next scene.\r\n\t\t *\r\n\t\t * @type {Scene}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.nextScene = this.currentScene.clone();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the clipmap.\r\n\t *\r\n\t * @param {PerspectiveCamera} camera - A camera.\r\n\t */\r\n\r\n\tupdate(camera) {\r\n\r\n\t\tconst viewPosition = this.position;\r\n\r\n\t\tviewPosition.copy(camera.position);\r\n\r\n\t\t// Build a frustum based on the given camera.\r\n\t\tf.setFromMatrix(m.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse));\r\n\r\n\t\t// Find octant keys.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates voxel data for the cells in the current scene and contours them\r\n\t * to extract a polygonal mesh.\r\n\t */\r\n\r\n\tprocess() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Clears this clipmap.\r\n\t */\r\n\r\n\tclear() {\r\n\r\n\t\tthis.previousScene.clear();\r\n\t\tthis.currentScene.clear();\r\n\t\tthis.nextScene.clear();\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/clipmap/Clipmap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "b",
    "memberof": "src/clipmap/Clipmap.js",
    "static": true,
    "longname": "src/clipmap/Clipmap.js~b",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/clipmap/Clipmap.js",
    "importStyle": null,
    "description": "A box.",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "Box3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "f",
    "memberof": "src/clipmap/Clipmap.js",
    "static": true,
    "longname": "src/clipmap/Clipmap.js~f",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/clipmap/Clipmap.js",
    "importStyle": null,
    "description": "A frustum.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Frustum"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "m",
    "memberof": "src/clipmap/Clipmap.js",
    "static": true,
    "longname": "src/clipmap/Clipmap.js~m",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/clipmap/Clipmap.js",
    "importStyle": null,
    "description": "A 4x4 matrix.",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "Matrix4"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "class",
    "name": "Clipmap",
    "memberof": "src/clipmap/Clipmap.js",
    "static": true,
    "longname": "src/clipmap/Clipmap.js~Clipmap",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/clipmap/Clipmap.js",
    "importStyle": "{Clipmap}",
    "description": "A 3D geometry clipmap.\n\nFinds world octants that are close to the viewer and arranges them in\nconcentric LOD shells. Octants that leave or enter a shell are reported for\nfurther processing.",
    "lineNumber": 41,
    "interface": false,
    "extends": [
      "synthetic-event~EventTarget"
    ]
  },
  {
    "__docId__": 56,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/clipmap/Clipmap.js~Clipmap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/clipmap/Clipmap.js~Clipmap#constructor",
    "access": "public",
    "description": "Constructs a new clipmap.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "WorldOctree"
        ],
        "spread": false,
        "optional": false,
        "name": "world",
        "description": "A world octree."
      }
    ]
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "world",
    "memberof": "src/clipmap/Clipmap.js~Clipmap",
    "static": false,
    "longname": "src/clipmap/Clipmap.js~Clipmap#world",
    "access": "public",
    "description": "The world octree.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "WorldOctree"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "position",
    "memberof": "src/clipmap/Clipmap.js~Clipmap",
    "static": false,
    "longname": "src/clipmap/Clipmap.js~Clipmap#position",
    "access": "public",
    "description": "The current view position.",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "currentScene",
    "memberof": "src/clipmap/Clipmap.js~Clipmap",
    "static": false,
    "longname": "src/clipmap/Clipmap.js~Clipmap#currentScene",
    "access": "private",
    "description": "The current scene.",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "Scene"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "previousScene",
    "memberof": "src/clipmap/Clipmap.js~Clipmap",
    "static": false,
    "longname": "src/clipmap/Clipmap.js~Clipmap#previousScene",
    "access": "private",
    "description": "The previous scene.",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "Scene"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "nextScene",
    "memberof": "src/clipmap/Clipmap.js~Clipmap",
    "static": false,
    "longname": "src/clipmap/Clipmap.js~Clipmap#nextScene",
    "access": "private",
    "description": "The next scene.",
    "lineNumber": 94,
    "type": {
      "nullable": null,
      "types": [
        "Scene"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "update",
    "memberof": "src/clipmap/Clipmap.js~Clipmap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/clipmap/Clipmap.js~Clipmap#update",
    "access": "public",
    "description": "Updates the clipmap.",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "PerspectiveCamera"
        ],
        "spread": false,
        "optional": false,
        "name": "camera",
        "description": "A camera."
      }
    ],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "process",
    "memberof": "src/clipmap/Clipmap.js~Clipmap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/clipmap/Clipmap.js~Clipmap#process",
    "access": "public",
    "description": "Generates voxel data for the cells in the current scene and contours them\nto extract a polygonal mesh.",
    "lineNumber": 122,
    "params": [],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "clear",
    "memberof": "src/clipmap/Clipmap.js~Clipmap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/clipmap/Clipmap.js~Clipmap#clear",
    "access": "public",
    "description": "Clears this clipmap.",
    "lineNumber": 130,
    "params": [],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "src/clipmap/index.js",
    "content": "/**\r\n * Geometry clipmap components.\r\n *\r\n * @module rabbit-hole/clipmap\r\n */\r\n\r\nexport { Clipmap } from \"./Clipmap.js\";\r\nexport { Scene } from \"./Scene.js\";\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/clipmap/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/clipmap/Scene.js",
    "content": "/**\r\n * A scene that consists of several concentric geometry rings.\r\n */\r\n\r\nexport class Scene {\r\n\r\n\t/**\r\n\t * Constructs a new scene.\r\n\t *\r\n\t * @param {Number} levels - The amount of LOD rings.\r\n\t */\r\n\r\n\tconstructor(levels) {\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The number of detail levels.\r\n\t *\r\n\t * @type {Number}\r\n\t */\r\n\r\n\tget levels() {\r\n\r\n\t\treturn this.something.length;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Clones this scene.\r\n\t */\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor(this.levels);\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/clipmap/Scene.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "class",
    "name": "Scene",
    "memberof": "src/clipmap/Scene.js",
    "static": true,
    "longname": "src/clipmap/Scene.js~Scene",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/clipmap/Scene.js",
    "importStyle": "{Scene}",
    "description": "A scene that consists of several concentric geometry rings.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 68,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/clipmap/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/clipmap/Scene.js~Scene#constructor",
    "access": "public",
    "description": "Constructs a new scene.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "levels",
        "description": "The amount of LOD rings."
      }
    ]
  },
  {
    "__docId__": 69,
    "kind": "get",
    "name": "levels",
    "memberof": "src/clipmap/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/clipmap/Scene.js~Scene#levels",
    "access": "public",
    "description": "The number of detail levels.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "clone",
    "memberof": "src/clipmap/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/clipmap/Scene.js~Scene#clone",
    "access": "public",
    "description": "Clones this scene.",
    "lineNumber": 34,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "src/clipmap/Task.js",
    "content": "/**\r\n * A worker task.\r\n *\r\n * @implements {TransferableContainer}\r\n */\r\n\r\nexport class Task {\r\n\r\n\t/**\r\n\t * Constructs a new task.\r\n\t */\r\n\r\n\tconstructor() {\r\n\r\n\t\t/**\r\n\t\t * The primary octant that is involved in this task.\r\n\t\t *\r\n\t\t * @type {WorldOctant}\r\n\t\t */\r\n\r\n\t\tthis.octant = null;\r\n\r\n\t\t/**\r\n\t\t * The LOD value and the key of the primary octant.\r\n\t\t *\r\n\t\t * @type {WorldOctantId}\r\n\t\t */\r\n\r\n\t\tthis.octantId = null;\r\n\r\n\t\t/**\r\n\t\t * A list of secondary octants that are involved in this task.\r\n\t\t *\r\n\t\t * @type {WorlcOctant[]}\r\n\t\t */\r\n\r\n\t\tthis.secondaryOctants = null;\r\n\r\n\t\t/**\r\n\t\t * A list of secondary octant IDs.\r\n\t\t *\r\n\t\t * @type {WorldOctantId[]}\r\n\t\t */\r\n\r\n\t\tthis.secondaryOctantIds = null;\r\n\r\n\t\t/**\r\n\t\t * A worker request.\r\n\t\t *\r\n\t\t * @type {Request}\r\n\t\t */\r\n\r\n\t\tthis.request = null;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares a request that can be sent to a worker thread.\r\n\t *\r\n\t * @return {Request} The request.\r\n\t */\r\n\r\n\tcreateRequest() {\r\n\r\n\t\treturn new Request();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reclaims ownership of volume data to complete the round trip.\r\n\t *\r\n\t * @param {Response} response - A worker response.\r\n\t */\r\n\r\n\treclaimData(response) {\r\n\r\n\t\tthis.octant.data = this.octant.data.deserialise(response.data);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a list of transferable items.\r\n\t *\r\n\t * @param {Array} [transferList] - An optional target list. The transferable items will be added to this list.\r\n\t * @return {Transferable[]} The transfer list.\r\n\t */\r\n\r\n\tcreateTransferList(transferList = []) {\r\n\r\n\t\treturn transferList;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/clipmap/Task.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "class",
    "name": "Task",
    "memberof": "src/clipmap/Task.js",
    "static": true,
    "longname": "src/clipmap/Task.js~Task",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/clipmap/Task.js",
    "importStyle": "{Task}",
    "description": "A worker task.",
    "lineNumber": 7,
    "interface": false,
    "implements": [
      "TransferableContainer"
    ]
  },
  {
    "__docId__": 73,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/clipmap/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/clipmap/Task.js~Task#constructor",
    "access": "public",
    "description": "Constructs a new task.",
    "lineNumber": 13
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "octant",
    "memberof": "src/clipmap/Task.js~Task",
    "static": false,
    "longname": "src/clipmap/Task.js~Task#octant",
    "access": "public",
    "description": "The primary octant that is involved in this task.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "WorldOctant"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "octantId",
    "memberof": "src/clipmap/Task.js~Task",
    "static": false,
    "longname": "src/clipmap/Task.js~Task#octantId",
    "access": "public",
    "description": "The LOD value and the key of the primary octant.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "WorldOctantId"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "secondaryOctants",
    "memberof": "src/clipmap/Task.js~Task",
    "static": false,
    "longname": "src/clipmap/Task.js~Task#secondaryOctants",
    "access": "public",
    "description": "A list of secondary octants that are involved in this task.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "WorlcOctant[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "secondaryOctantIds",
    "memberof": "src/clipmap/Task.js~Task",
    "static": false,
    "longname": "src/clipmap/Task.js~Task#secondaryOctantIds",
    "access": "public",
    "description": "A list of secondary octant IDs.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "WorldOctantId[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "request",
    "memberof": "src/clipmap/Task.js~Task",
    "static": false,
    "longname": "src/clipmap/Task.js~Task#request",
    "access": "public",
    "description": "A worker request.",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "Request"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "createRequest",
    "memberof": "src/clipmap/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/clipmap/Task.js~Task#createRequest",
    "access": "public",
    "description": "Prepares a request that can be sent to a worker thread.",
    "lineNumber": 63,
    "return": {
      "nullable": null,
      "types": [
        "Request"
      ],
      "spread": false,
      "description": "The request."
    },
    "params": []
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "reclaimData",
    "memberof": "src/clipmap/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/clipmap/Task.js~Task#reclaimData",
    "access": "public",
    "description": "Reclaims ownership of volume data to complete the round trip.",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "Response"
        ],
        "spread": false,
        "optional": false,
        "name": "response",
        "description": "A worker response."
      }
    ],
    "return": null
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "createTransferList",
    "memberof": "src/clipmap/Task.js~Task",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/clipmap/Task.js~Task#createTransferList",
    "access": "public",
    "description": "Creates a list of transferable items.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "transferList",
        "description": "An optional target list. The transferable items will be added to this list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transferable[]"
      ],
      "spread": false,
      "description": "The transfer list."
    }
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/codecs/index.js",
    "content": "/**\r\n * Data encoding and decoding components.\r\n *\r\n * @module rabbit-hole/codecs\r\n */\r\n\r\nexport { RunLengthEncoding } from \"./RunLengthEncoding.js\";\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/codecs/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "file",
    "name": "src/codecs/RunLengthEncoding.js",
    "content": "/**\r\n * Run-Length Encoding for numerical data.\r\n */\r\n\r\nexport class RunLengthEncoding {\r\n\r\n\t/**\r\n\t * Constructs a new container for Run-Length encoded data.\r\n\t *\r\n\t * @param {Number[]} [runLengths=null] - The run lengths.\r\n\t * @param {Number[]} [data=null] - The encoded data.\r\n\t */\r\n\r\n\tconstructor(runLengths = null, data = null) {\r\n\r\n\t\t/**\r\n\t\t * The run lengths.\r\n\t\t *\r\n\t\t * @type {Number[]}\r\n\t\t */\r\n\r\n\t\tthis.runLengths = runLengths;\r\n\r\n\t\t/**\r\n\t\t * The encoded data.\r\n\t\t *\r\n\t\t * @type {Number[]}\r\n\t\t */\r\n\r\n\t\tthis.data = data;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Encodes the given data.\r\n\t *\r\n\t * @param {Number[]} array - The data to encode.\r\n\t * @return {RunLengthEncoding} The run-lengths and the encoded data.\r\n\t */\r\n\r\n\tstatic encode(array) {\r\n\r\n\t\tconst runLengths = [];\r\n\t\tconst data = [];\r\n\r\n\t\tlet previous = array[0];\r\n\t\tlet count = 1;\r\n\r\n\t\tlet i, l;\r\n\r\n\t\tfor(i = 1, l = array.length; i < l; ++i) {\r\n\r\n\t\t\tif(previous !== array[i]) {\r\n\r\n\t\t\t\trunLengths.push(count);\r\n\t\t\t\tdata.push(previous);\r\n\r\n\t\t\t\tprevious = array[i];\r\n\t\t\t\tcount = 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t++count;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\trunLengths.push(count);\r\n\t\tdata.push(previous);\r\n\r\n\t\treturn new RunLengthEncoding(runLengths, data);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decodes the given data.\r\n\t *\r\n\t * @param {Number[]} runLengths - The run-lengths.\r\n\t * @param {Number[]} data - The data to decode.\r\n\t * @param {Array} [array] - An optional target.\r\n\t * @return {Array} The decoded data.\r\n\t */\r\n\r\n\tstatic decode(runLengths, data, array = []) {\r\n\r\n\t\tlet element;\r\n\r\n\t\tlet i, j, il, jl;\r\n\t\tlet k = 0;\r\n\r\n\t\tfor(i = 0, il = data.length; i < il; ++i) {\r\n\r\n\t\t\telement = data[i];\r\n\r\n\t\t\tfor(j = 0, jl = runLengths[i]; j < jl; ++j) {\r\n\r\n\t\t\t\tarray[k++] = element;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/codecs/RunLengthEncoding.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 84,
    "kind": "class",
    "name": "RunLengthEncoding",
    "memberof": "src/codecs/RunLengthEncoding.js",
    "static": true,
    "longname": "src/codecs/RunLengthEncoding.js~RunLengthEncoding",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/codecs/RunLengthEncoding.js",
    "importStyle": "{RunLengthEncoding}",
    "description": "Run-Length Encoding for numerical data.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 85,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/codecs/RunLengthEncoding.js~RunLengthEncoding",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/codecs/RunLengthEncoding.js~RunLengthEncoding#constructor",
    "access": "public",
    "description": "Constructs a new container for Run-Length encoded data.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "runLengths",
        "description": "The run lengths."
      },
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "data",
        "description": "The encoded data."
      }
    ]
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "runLengths",
    "memberof": "src/codecs/RunLengthEncoding.js~RunLengthEncoding",
    "static": false,
    "longname": "src/codecs/RunLengthEncoding.js~RunLengthEncoding#runLengths",
    "access": "public",
    "description": "The run lengths.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Number[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "data",
    "memberof": "src/codecs/RunLengthEncoding.js~RunLengthEncoding",
    "static": false,
    "longname": "src/codecs/RunLengthEncoding.js~RunLengthEncoding#data",
    "access": "public",
    "description": "The encoded data.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Number[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "encode",
    "memberof": "src/codecs/RunLengthEncoding.js~RunLengthEncoding",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/codecs/RunLengthEncoding.js~RunLengthEncoding.encode",
    "access": "public",
    "description": "Encodes the given data.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "The data to encode."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RunLengthEncoding"
      ],
      "spread": false,
      "description": "The run-lengths and the encoded data."
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "decode",
    "memberof": "src/codecs/RunLengthEncoding.js~RunLengthEncoding",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/codecs/RunLengthEncoding.js~RunLengthEncoding.decode",
    "access": "public",
    "description": "Decodes the given data.",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "runLengths",
        "description": "The run-lengths."
      },
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data to decode."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "array",
        "description": "An optional target."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "The decoded data."
    }
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/core/Deserializable.js",
    "content": "/**\r\n * The Deserializable contract.\r\n *\r\n * Implemented by objects that can adopt serialised data.\r\n *\r\n * @interface\r\n */\r\n\r\nexport class Deserializable {\r\n\r\n\t/**\r\n\t * Adopts the given serialised data.\r\n\t *\r\n\t * @param {Object} object - Serialised data.\r\n\t * @return {Deserializable} This object.\r\n\t */\r\n\r\n\tdeserialize(object) {}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/core/Deserializable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "Deserializable",
    "memberof": "src/core/Deserializable.js",
    "static": true,
    "longname": "src/core/Deserializable.js~Deserializable",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/core/Deserializable.js",
    "importStyle": "{Deserializable}",
    "description": "The Deserializable contract.\n\nImplemented by objects that can adopt serialised data.",
    "lineNumber": 9,
    "interface": true
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "deserialize",
    "memberof": "src/core/Deserializable.js~Deserializable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Deserializable.js~Deserializable#deserialize",
    "access": "public",
    "description": "Adopts the given serialised data.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "Serialised data."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Deserializable"
      ],
      "spread": false,
      "description": "This object."
    }
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "src/core/Disposable.js",
    "content": "/**\r\n * The Disposable contract.\r\n *\r\n * Implemented by objects that can free internal resources.\r\n *\r\n * @interface\r\n */\r\n\r\nexport class Disposable {\r\n\r\n\t/**\r\n\t * Frees internal resources.\r\n\t */\r\n\r\n\tdispose() {}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/core/Disposable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "class",
    "name": "Disposable",
    "memberof": "src/core/Disposable.js",
    "static": true,
    "longname": "src/core/Disposable.js~Disposable",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/core/Disposable.js",
    "importStyle": "{Disposable}",
    "description": "The Disposable contract.\n\nImplemented by objects that can free internal resources.",
    "lineNumber": 9,
    "interface": true
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "dispose",
    "memberof": "src/core/Disposable.js~Disposable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Disposable.js~Disposable#dispose",
    "access": "public",
    "description": "Frees internal resources.",
    "lineNumber": 15,
    "params": [],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "src/core/index.js",
    "content": "/**\r\n * Core components.\r\n *\r\n * @module rabbit-hole/core\r\n */\r\n\r\nexport { Serializable } from \"./Serializable.js\";\r\nexport { Deserializable } from \"./Deserializable.js\";\r\nexport { Disposable } from \"./Disposable.js\";\r\nexport { TransferableContainer } from \"./TransferableContainer.js\";\r\n\r\nexport { Queue } from \"./Queue.js\";\r\nexport { Terrain } from \"./Terrain.js\";\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/core/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "src/core/Queue.js",
    "content": "/**\r\n * A FIFO queue.\r\n *\r\n * Elements are added to the end of the queue and removed from the front.\r\n *\r\n * Based on:\r\n *  http://code.stephenmorley.org/javascript/queues/\r\n */\r\n\r\nexport class Queue {\r\n\r\n\t/**\r\n\t * Constructs a new queue.\r\n\t */\r\n\r\n\tconstructor() {\r\n\r\n\t\t/**\r\n\t\t * A list of elements.\r\n\t\t *\r\n\t\t * @type {Array}\r\n\t\t */\r\n\r\n\t\tthis.elements = [];\r\n\r\n\t\t/**\r\n\t\t * The head of the queue.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.head = 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The current size of the queue.\r\n\t *\r\n\t * @type {Number}\r\n\t */\r\n\r\n\tget size() {\r\n\r\n\t\treturn (this.elements.length - this.head);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the queue is empty, and false otherwise.\r\n\t *\r\n\t * @type {Boolean}\r\n\t */\r\n\r\n\tget empty() {\r\n\r\n\t\treturn (this.elements.length === 0);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the given queue.\r\n\t *\r\n\t * @param {Queue} queue - A queue.\r\n\t * @return {Queue} This queue.\r\n\t */\r\n\r\n\tcopy(queue) {\r\n\r\n\t\tthis.elements = Array.from(queue.elements);\r\n\t\tthis.head = queue.head;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Clones this queue.\r\n\t *\r\n\t * @return {Queue} Th cloned queue.\r\n\t */\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy(this);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an element to the queue.\r\n\t *\r\n\t * @param {Object} element - An arbitrary object.\r\n\t */\r\n\r\n\tadd(element) {\r\n\r\n\t\tthis.elements.push(element);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves, but does not remove, the head of the queue.\r\n\t *\r\n\t * @return {Object} The head of the queue, or undefined if the queue is empty.\r\n\t */\r\n\r\n\tpeek() {\r\n\r\n\t\treturn (this.elements.length > 0) ? this.elements[this.head] : undefined;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves and removes the head of the queue.\r\n\t *\r\n\t * @return {Object} The head of the queue, or undefined if the queue is empty.\r\n\t */\r\n\r\n\tpoll() {\r\n\r\n\t\tconst elements = this.elements;\r\n\t\tconst length = elements.length;\r\n\r\n\t\tlet element;\r\n\r\n\t\tif(length > 0) {\r\n\r\n\t\t\telement = elements[this.head++];\r\n\r\n\t\t\t// Remove free space if necessary.\r\n\t\t\tif(this.head * 2 >= length) {\r\n\r\n\t\t\t\tthis.elements = elements.slice(this.head);\r\n\t\t\t\tthis.head = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn element;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Resets this queue.\r\n\t */\r\n\r\n\tclear() {\r\n\r\n\t\tthis.elements = [];\r\n\t\tthis.head = 0;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/core/Queue.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "class",
    "name": "Queue",
    "memberof": "src/core/Queue.js",
    "static": true,
    "longname": "src/core/Queue.js~Queue",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/core/Queue.js",
    "importStyle": "{Queue}",
    "description": "A FIFO queue.\n\nElements are added to the end of the queue and removed from the front.\n\nBased on:\n http://code.stephenmorley.org/javascript/queues/",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 99,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/core/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Queue.js~Queue#constructor",
    "access": "public",
    "description": "Constructs a new queue.",
    "lineNumber": 16
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "elements",
    "memberof": "src/core/Queue.js~Queue",
    "static": false,
    "longname": "src/core/Queue.js~Queue#elements",
    "access": "public",
    "description": "A list of elements.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "head",
    "memberof": "src/core/Queue.js~Queue",
    "static": false,
    "longname": "src/core/Queue.js~Queue#head",
    "access": "public",
    "description": "The head of the queue.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 102,
    "kind": "get",
    "name": "size",
    "memberof": "src/core/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Queue.js~Queue#size",
    "access": "public",
    "description": "The current size of the queue.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "get",
    "name": "empty",
    "memberof": "src/core/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Queue.js~Queue#empty",
    "access": "public",
    "description": "Returns true if the queue is empty, and false otherwise.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "copy",
    "memberof": "src/core/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Queue.js~Queue#copy",
    "access": "public",
    "description": "Copies the given queue.",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "Queue"
        ],
        "spread": false,
        "optional": false,
        "name": "queue",
        "description": "A queue."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Queue"
      ],
      "spread": false,
      "description": "This queue."
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "clone",
    "memberof": "src/core/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Queue.js~Queue#clone",
    "access": "public",
    "description": "Clones this queue.",
    "lineNumber": 82,
    "return": {
      "nullable": null,
      "types": [
        "Queue"
      ],
      "spread": false,
      "description": "Th cloned queue."
    },
    "params": []
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "add",
    "memberof": "src/core/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Queue.js~Queue#add",
    "access": "public",
    "description": "Adds an element to the queue.",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "An arbitrary object."
      }
    ],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "peek",
    "memberof": "src/core/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Queue.js~Queue#peek",
    "access": "public",
    "description": "Retrieves, but does not remove, the head of the queue.",
    "lineNumber": 106,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The head of the queue, or undefined if the queue is empty."
    },
    "params": []
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "poll",
    "memberof": "src/core/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Queue.js~Queue#poll",
    "access": "public",
    "description": "Retrieves and removes the head of the queue.",
    "lineNumber": 118,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The head of the queue, or undefined if the queue is empty."
    },
    "params": []
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "clear",
    "memberof": "src/core/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Queue.js~Queue#clear",
    "access": "public",
    "description": "Resets this queue.",
    "lineNumber": 147,
    "params": [],
    "return": null
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "src/core/Serializable.js",
    "content": "/**\r\n * The Serializable contract.\r\n *\r\n * Implemented by objects that can provide a flat representation of the data\r\n * they contain.\r\n *\r\n * @interface\r\n */\r\n\r\nexport class Serializable {\r\n\r\n\t/**\r\n\t * Serialises this data.\r\n\t *\r\n\t * @param {Boolean} [deflate=false] - Whether the data should be compressed if possible.\r\n\t * @return {Object} The serialised data.\r\n\t */\r\n\r\n\tserialize(deflate = false) {}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/core/Serializable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "class",
    "name": "Serializable",
    "memberof": "src/core/Serializable.js",
    "static": true,
    "longname": "src/core/Serializable.js~Serializable",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/core/Serializable.js",
    "importStyle": "{Serializable}",
    "description": "The Serializable contract.\n\nImplemented by objects that can provide a flat representation of the data\nthey contain.",
    "lineNumber": 10,
    "interface": true
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/core/Serializable.js~Serializable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Serializable.js~Serializable#serialize",
    "access": "public",
    "description": "Serialises this data.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "deflate",
        "description": "Whether the data should be compressed if possible."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The serialised data."
    }
  },
  {
    "__docId__": 119,
    "kind": "file",
    "name": "src/core/terrain-events.js",
    "content": "import { TerrainEvent } from \"../events/TerrainEvent.js\";\r\n\r\n/**\r\n * Signals the start of a modification task.\r\n *\r\n * This event is dispatched by {@link Terrain}.\r\n *\r\n * @type {TerrainEvent}\r\n * @example terrain.addEventListener(\"modificationstart\", myListener);\r\n */\r\n\r\nexport const modificationstart = new TerrainEvent(\"modificationstart\");\r\n\r\n/**\r\n * Signals the end of a modification task.\r\n *\r\n * This event is dispatched by {@link Terrain}.\r\n *\r\n * @type {TerrainEvent}\r\n * @example terrain.addEventListener(\"modificationend\", myListener);\r\n */\r\n\r\nexport const modificationend = new TerrainEvent(\"modificationend\");\r\n\r\n/**\r\n * Signals the start of an extraction task.\r\n *\r\n * This event is dispatched by {@link Terrain}.\r\n *\r\n * @type {TerrainEvent}\r\n * @example terrain.addEventListener(\"extractionstart\", myListener);\r\n */\r\n\r\nexport const extractionstart = new TerrainEvent(\"extractionstart\");\r\n\r\n/**\r\n * Signals the end of an extraction task.\r\n *\r\n * This event is dispatched by {@link Terrain}.\r\n *\r\n * @type {TerrainEvent}\r\n * @example terrain.addEventListener(\"extractionend\", myListener);\r\n */\r\n\r\nexport const extractionend = new TerrainEvent(\"extractionend\");\r\n\r\n/**\r\n * Signals the end of a volume data loading process.\r\n *\r\n * This event is dispatched by {@link Terrain}.\r\n *\r\n * @type {TerrainEvent}\r\n * @example terrain.addEventListener(\"load\", myListener);\r\n */\r\n\r\nexport const load = new TerrainEvent(\"load\");\r\n\r\n/**\r\n * Signals the occurrence of an unexpected error.\r\n *\r\n * This event is dispatched by {@link Terrain}.\r\n *\r\n * @type {TerrainEvent}\r\n * @example terrain.addEventListener(\"error\", myListener);\r\n */\r\n\r\nexport const error = new TerrainEvent(\"error\");\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/core/terrain-events.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "modificationstart",
    "memberof": "src/core/terrain-events.js",
    "static": true,
    "longname": "src/core/terrain-events.js~modificationstart",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/core/terrain-events.js",
    "importStyle": "{modificationstart}",
    "description": "Signals the start of a modification task.\n\nThis event is dispatched by {@link Terrain}.",
    "examples": [
      "terrain.addEventListener(\"modificationstart\", myListener);"
    ],
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "TerrainEvent"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "modificationend",
    "memberof": "src/core/terrain-events.js",
    "static": true,
    "longname": "src/core/terrain-events.js~modificationend",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/core/terrain-events.js",
    "importStyle": "{modificationend}",
    "description": "Signals the end of a modification task.\n\nThis event is dispatched by {@link Terrain}.",
    "examples": [
      "terrain.addEventListener(\"modificationend\", myListener);"
    ],
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "TerrainEvent"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "extractionstart",
    "memberof": "src/core/terrain-events.js",
    "static": true,
    "longname": "src/core/terrain-events.js~extractionstart",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/core/terrain-events.js",
    "importStyle": "{extractionstart}",
    "description": "Signals the start of an extraction task.\n\nThis event is dispatched by {@link Terrain}.",
    "examples": [
      "terrain.addEventListener(\"extractionstart\", myListener);"
    ],
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "TerrainEvent"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "extractionend",
    "memberof": "src/core/terrain-events.js",
    "static": true,
    "longname": "src/core/terrain-events.js~extractionend",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/core/terrain-events.js",
    "importStyle": "{extractionend}",
    "description": "Signals the end of an extraction task.\n\nThis event is dispatched by {@link Terrain}.",
    "examples": [
      "terrain.addEventListener(\"extractionend\", myListener);"
    ],
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "TerrainEvent"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "load",
    "memberof": "src/core/terrain-events.js",
    "static": true,
    "longname": "src/core/terrain-events.js~load",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/core/terrain-events.js",
    "importStyle": "{load}",
    "description": "Signals the end of a volume data loading process.\n\nThis event is dispatched by {@link Terrain}.",
    "examples": [
      "terrain.addEventListener(\"load\", myListener);"
    ],
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "TerrainEvent"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "error",
    "memberof": "src/core/terrain-events.js",
    "static": true,
    "longname": "src/core/terrain-events.js~error",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/core/terrain-events.js",
    "importStyle": "{error}",
    "description": "Signals the occurrence of an unexpected error.\n\nThis event is dispatched by {@link Terrain}.",
    "examples": [
      "terrain.addEventListener(\"error\", myListener);"
    ],
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "TerrainEvent"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "src/core/Terrain.js",
    "content": "import { EventTarget } from \"synthetic-event\";\r\nimport { OperationType } from \"../volume/csg/OperationType.js\";\r\nimport { SDFReviver } from \"../volume/sdf/SDFReviver.js\";\r\nimport { SDFLoader } from \"../loaders/SDFLoader.js\";\r\nimport { HermiteData } from \"../volume/HermiteData.js\";\r\nimport { WorldOctree } from \"../octree/world/WorldOctree.js\";\r\nimport { Clipmap } from \"../clipmap/Clipmap.js\";\r\nimport { Action } from \"../worker/Action.js\";\r\nimport { ExtractionRequest } from \"../worker/messages/ExtractionRequest.js\";\r\nimport { ModificationRequest } from \"../worker/messages/ModificationRequest.js\";\r\n// import { Task } from \"./Task.js\";\r\nimport { ThreadPool } from \"../worker/ThreadPool.js\";\r\nimport * as events from \"./terrain-events.js\";\r\n\r\n/**\r\n * The terrain system.\r\n *\r\n * Manages volume modifications and mesh generation.\r\n *\r\n * @implements {Disposable}\r\n * @implements {EventListener}\r\n */\r\n\r\nexport class Terrain extends EventTarget {\r\n\r\n\t/**\r\n\t * Constructs a new terrain.\r\n\t *\r\n\t * @param {Object} [options] - The options.\r\n\t * @param {Number} [options.workers=navigator.hardwareConcurrency] - Limits the amount of active workers. Cannot exceed the amount of logical processors.\r\n\t * @param {Number} [options.resolution=32] - The resolution of the volume data.\r\n\t * @param {Number} [options.world] - Additional world octree settings. See {@link WorldOctree} for details.\r\n\t */\r\n\r\n\tconstructor(options = {}) {\r\n\r\n\t\tconst worldSettings = (options.world !== undefined) ? options.world : {};\r\n\r\n\t\tHermiteData.resolution = (options.resolution !== undefined) ? options.resolution : 32;\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The terrain mesh. Add this object to your scene.\r\n\t\t *\r\n\t\t * @type {Group}\r\n\t\t */\r\n\r\n\t\tthis.object = null;\r\n\r\n\t\t/**\r\n\t\t * The world octree.\r\n\t\t *\r\n\t\t * @type {WorldOctree}\r\n\t\t */\r\n\r\n\t\tthis.world = new WorldOctree(worldSettings.cellSize, worldSettings.levels, worldSettings.keyDesign);\r\n\r\n\t\t/**\r\n\t\t * A clipmap.\r\n\t\t *\r\n\t\t * @type {Clipmap}\r\n\t\t */\r\n\r\n\t\tthis.clipmap = new Clipmap(this.world);\r\n\t\tthis.clipmap.addEventListener(\"shellupdate\", this);\r\n\r\n\t\t/**\r\n\t\t * A thread pool. Each worker from this pool is capable of performing\r\n\t\t * isosurface extractions as well as CSG operations on discrete volume data.\r\n\t\t *\r\n\t\t * @type {ThreadPool}\r\n\t\t */\r\n\r\n\t\tthis.threadPool = new ThreadPool(options.workers);\r\n\t\tthis.threadPool.addEventListener(\"message\", this);\r\n\r\n\t\t/**\r\n\t\t * Keeps track of tasks that are currently being processed by a worker.\r\n\t\t *\r\n\t\t * Note: The amount of tracked tasks cannot exceed the amount of workers.\r\n\t\t *\r\n\t\t * @type {WeakMap}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.tasks = new WeakMap();\r\n\r\n\t\t/**\r\n\t\t * An SDF loader.\r\n\t\t *\r\n\t\t * @type {SDFLoader}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.sdfLoader = new SDFLoader();\r\n\t\tthis.sdfLoader.addEventListener(\"load\", this);\r\n\r\n\t\t/**\r\n\t\t * A chronological sequence of CSG operations that have been executed during\r\n\t\t * this session.\r\n\t\t *\r\n\t\t * @type {SignedDistanceFunction[]}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.history = [];\r\n\r\n\t\t/**\r\n\t\t * A squared distance threshold.\r\n\t\t *\r\n\t\t * If the squared distance from the current view position to a given new\r\n\t\t * position is greater than this threshold, the clipmap will be updated.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.dtSq = this.world.getCellSize();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles events.\r\n\t *\r\n\t * @param {Event} event - An event.\r\n\t */\r\n\r\n\thandleEvent(event) {\r\n\r\n\t\tswitch(event.type) {\r\n\r\n\t\t\tcase \"shellupdate\":\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"message\":\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"load\":\r\n\t\t\t\tthis.revive(event.descriptions);\r\n\t\t\t\tthis.dispatchEvent(events.load);\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Executes the given SDF.\r\n\t *\r\n\t * SDFs without a valid CSG operation type will be ignored.\r\n\t * See {@link OperationType} for a list of available CSG operation types.\r\n\t *\r\n\t * Instead of using this method directly, it's recommended to use the\r\n\t * convenience methods {@link union}, {@link subtract} and {@link intersect}.\r\n\t *\r\n\t * @param {SignedDistanceFunction} sdf - An SDF.\r\n\t */\r\n\r\n\tapplyCSG(sdf) {\r\n\r\n\t\tthis.world.applyCSG(sdf);\r\n\t\tthis.history.push(sdf);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Executes the given SDF and adds the generated data to the volume.\r\n\t *\r\n\t * @param {SignedDistanceFunction} sdf - An SDF.\r\n\t */\r\n\r\n\tunion(sdf) {\r\n\r\n\t\tthis.applyCSG(sdf.setOperationType(OperationType.UNION));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Executes the given SDF and subtracts the generated data from the volume.\r\n\t *\r\n\t * @param {SignedDistanceFunction} sdf - An SDF.\r\n\t */\r\n\r\n\tsubtract(sdf) {\r\n\r\n\t\tthis.applyCSG(sdf.setOperationType(OperationType.DIFFERENCE));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Executes the given SDF and discards the volume data that doesn't overlap\r\n\t * with the generated data.\r\n\t *\r\n\t * @param {SignedDistanceFunction} sdf - An SDF.\r\n\t */\r\n\r\n\tintersect(sdf) {\r\n\r\n\t\tthis.applyCSG(sdf.setOperationType(OperationType.INTERSECTION));\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the terrain geometry.\r\n\t *\r\n\t * This method should be called every time the position has changed.\r\n\t *\r\n\t * @param {Vector3} position - A position.\r\n\t */\r\n\r\n\tupdate(position) {\r\n\r\n\t\t// Check if the position has changed enough.\r\n\t\tif(this.clipmap.position.distanceToSquared(position) >= this.dtSq) {\r\n\r\n\t\t\tthis.clipmap.update(position);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Finds the world cells that intersect with the given ray.\r\n\t *\r\n\t * @param {Ray} ray - A ray.\r\n\t * @return {WorldOctant[]} A list of intersecting world octants. Sorted by distance, closest first.\r\n\t */\r\n\r\n\traycast(ray) {\r\n\r\n\t\treturn this.world.raycast(ray);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Resets this terrain by removing all data and closing active worker threads.\r\n\t */\r\n\r\n\tclear() {\r\n\r\n\t\tthis.world.clear();\r\n\t\tthis.clipmap.clear();\r\n\t\tthis.threadPool.clear();\r\n\t\tthis.sdfLoader.clear();\r\n\r\n\t\tthis.tasks = new WeakMap();\r\n\t\tthis.history = [];\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Frees internal resources.\r\n\t *\r\n\t * By calling this method the terrain system will become unoperative.\r\n\t */\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.threadPool.dispose();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Revives the given serialised SDFs and applies them to the current volume.\r\n\t *\r\n\t * @private\r\n\t * @param {Array} descriptions - A list of serialised SDFs.\r\n\t */\r\n\r\n\trevive(descriptions) {\r\n\r\n\t\tlet i, l;\r\n\r\n\t\tfor(i = 0, l = descriptions.length; i < l; ++i) {\r\n\r\n\t\t\tthis.applyCSG(SDFReviver.revive(descriptions[i]));\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Saves a description of the current volume data.\r\n\t *\r\n\t * @return {DOMString} A URL to the exported save data, or null if there is no data.\r\n\t */\r\n\r\n\tsave() {\r\n\r\n\t\treturn (this.history.length === 0) ? null : URL.createObjectURL(\r\n\r\n\t\t\tnew Blob([JSON.stringify(this.history)], { type: \"text/json\" })\r\n\r\n\t\t);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Loads a volume data description.\r\n\t *\r\n\t * A load event will be dispatched when the loading process has finished.\r\n\t *\r\n\t * @param {String} data - A stringified list of SDF descriptions.\r\n\t */\r\n\r\n\tload(data) {\r\n\r\n\t\tconst descriptions = JSON.parse(data);\r\n\r\n\t\tthis.clear();\r\n\t\tthis.sdfLoader.load(descriptions);\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/core/Terrain.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "class",
    "name": "Terrain",
    "memberof": "src/core/Terrain.js",
    "static": true,
    "longname": "src/core/Terrain.js~Terrain",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/core/Terrain.js",
    "importStyle": "{Terrain}",
    "description": "The terrain system.\n\nManages volume modifications and mesh generation.",
    "lineNumber": 24,
    "interface": false,
    "extends": [
      "synthetic-event~EventTarget"
    ],
    "implements": [
      "Disposable",
      "EventListener"
    ]
  },
  {
    "__docId__": 128,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/core/Terrain.js~Terrain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#constructor",
    "access": "public",
    "description": "Constructs a new terrain.",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "navigator.hardwareConcurrency",
        "defaultRaw": "navigator.hardwareConcurrency",
        "name": "options.workers",
        "description": "Limits the amount of active workers. Cannot exceed the amount of logical processors."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "32",
        "defaultRaw": 32,
        "name": "options.resolution",
        "description": "The resolution of the volume data."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.world",
        "description": "Additional world octree settings. See {@link WorldOctree} for details."
      }
    ]
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "object",
    "memberof": "src/core/Terrain.js~Terrain",
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#object",
    "access": "public",
    "description": "The terrain mesh. Add this object to your scene.",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "Group"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "world",
    "memberof": "src/core/Terrain.js~Terrain",
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#world",
    "access": "public",
    "description": "The world octree.",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "WorldOctree"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "clipmap",
    "memberof": "src/core/Terrain.js~Terrain",
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#clipmap",
    "access": "public",
    "description": "A clipmap.",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "Clipmap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "threadPool",
    "memberof": "src/core/Terrain.js~Terrain",
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#threadPool",
    "access": "public",
    "description": "A thread pool. Each worker from this pool is capable of performing\nisosurface extractions as well as CSG operations on discrete volume data.",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "ThreadPool"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "tasks",
    "memberof": "src/core/Terrain.js~Terrain",
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#tasks",
    "access": "private",
    "description": "Keeps track of tasks that are currently being processed by a worker.\n\nNote: The amount of tracked tasks cannot exceed the amount of workers.",
    "lineNumber": 87,
    "type": {
      "nullable": null,
      "types": [
        "WeakMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "sdfLoader",
    "memberof": "src/core/Terrain.js~Terrain",
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#sdfLoader",
    "access": "private",
    "description": "An SDF loader.",
    "lineNumber": 96,
    "type": {
      "nullable": null,
      "types": [
        "SDFLoader"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "history",
    "memberof": "src/core/Terrain.js~Terrain",
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#history",
    "access": "private",
    "description": "A chronological sequence of CSG operations that have been executed during\nthis session.",
    "lineNumber": 107,
    "type": {
      "nullable": null,
      "types": [
        "SignedDistanceFunction[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "dtSq",
    "memberof": "src/core/Terrain.js~Terrain",
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#dtSq",
    "access": "private",
    "description": "A squared distance threshold.\n\nIf the squared distance from the current view position to a given new\nposition is greater than this threshold, the clipmap will be updated.",
    "lineNumber": 119,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "handleEvent",
    "memberof": "src/core/Terrain.js~Terrain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#handleEvent",
    "access": "public",
    "description": "Handles events.",
    "lineNumber": 129,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "An event."
      }
    ],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "applyCSG",
    "memberof": "src/core/Terrain.js~Terrain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#applyCSG",
    "access": "public",
    "description": "Executes the given SDF.\n\nSDFs without a valid CSG operation type will be ignored.\nSee {@link OperationType} for a list of available CSG operation types.\n\nInstead of using this method directly, it's recommended to use the\nconvenience methods {@link union}, {@link subtract} and {@link intersect}.",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "SignedDistanceFunction"
        ],
        "spread": false,
        "optional": false,
        "name": "sdf",
        "description": "An SDF."
      }
    ],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "union",
    "memberof": "src/core/Terrain.js~Terrain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#union",
    "access": "public",
    "description": "Executes the given SDF and adds the generated data to the volume.",
    "lineNumber": 173,
    "params": [
      {
        "nullable": null,
        "types": [
          "SignedDistanceFunction"
        ],
        "spread": false,
        "optional": false,
        "name": "sdf",
        "description": "An SDF."
      }
    ],
    "return": null
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "subtract",
    "memberof": "src/core/Terrain.js~Terrain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#subtract",
    "access": "public",
    "description": "Executes the given SDF and subtracts the generated data from the volume.",
    "lineNumber": 185,
    "params": [
      {
        "nullable": null,
        "types": [
          "SignedDistanceFunction"
        ],
        "spread": false,
        "optional": false,
        "name": "sdf",
        "description": "An SDF."
      }
    ],
    "return": null
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "intersect",
    "memberof": "src/core/Terrain.js~Terrain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#intersect",
    "access": "public",
    "description": "Executes the given SDF and discards the volume data that doesn't overlap\nwith the generated data.",
    "lineNumber": 198,
    "params": [
      {
        "nullable": null,
        "types": [
          "SignedDistanceFunction"
        ],
        "spread": false,
        "optional": false,
        "name": "sdf",
        "description": "An SDF."
      }
    ],
    "return": null
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "update",
    "memberof": "src/core/Terrain.js~Terrain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#update",
    "access": "public",
    "description": "Updates the terrain geometry.\n\nThis method should be called every time the position has changed.",
    "lineNumber": 212,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "A position."
      }
    ],
    "return": null
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "raycast",
    "memberof": "src/core/Terrain.js~Terrain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#raycast",
    "access": "public",
    "description": "Finds the world cells that intersect with the given ray.",
    "lineNumber": 230,
    "params": [
      {
        "nullable": null,
        "types": [
          "Ray"
        ],
        "spread": false,
        "optional": false,
        "name": "ray",
        "description": "A ray."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WorldOctant[]"
      ],
      "spread": false,
      "description": "A list of intersecting world octants. Sorted by distance, closest first."
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "clear",
    "memberof": "src/core/Terrain.js~Terrain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#clear",
    "access": "public",
    "description": "Resets this terrain by removing all data and closing active worker threads.",
    "lineNumber": 240,
    "params": [],
    "return": null
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "dispose",
    "memberof": "src/core/Terrain.js~Terrain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#dispose",
    "access": "public",
    "description": "Frees internal resources.\n\nBy calling this method the terrain system will become unoperative.",
    "lineNumber": 258,
    "params": [],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "revive",
    "memberof": "src/core/Terrain.js~Terrain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#revive",
    "access": "private",
    "description": "Revives the given serialised SDFs and applies them to the current volume.",
    "lineNumber": 271,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "descriptions",
        "description": "A list of serialised SDFs."
      }
    ],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "save",
    "memberof": "src/core/Terrain.js~Terrain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#save",
    "access": "public",
    "description": "Saves a description of the current volume data.",
    "lineNumber": 289,
    "return": {
      "nullable": null,
      "types": [
        "DOMString"
      ],
      "spread": false,
      "description": "A URL to the exported save data, or null if there is no data."
    },
    "params": []
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "load",
    "memberof": "src/core/Terrain.js~Terrain",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Terrain.js~Terrain#load",
    "access": "public",
    "description": "Loads a volume data description.\n\nA load event will be dispatched when the loading process has finished.",
    "lineNumber": 307,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "A stringified list of SDF descriptions."
      }
    ],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "file",
    "name": "src/core/TransferableContainer.js",
    "content": "/**\r\n * The TransferableContainer contract.\r\n *\r\n * Implemented by objects that can list their internal transferable objects.\r\n *\r\n * @interface\r\n */\r\n\r\nexport class TransferableContainer {\r\n\r\n\t/**\r\n\t * Creates a list of transferable items.\r\n\t *\r\n\t * The `Transferable` interface represents an object that can be transferred\r\n\t * between different execution contexts, like the main thread and Web Workers.\r\n\t *\r\n\t * For example, `Worker.postMessage()` takes an optional array of\r\n\t * `Transferable` objects to transfer ownership of. If the ownership of an\r\n\t * object is transferred, it becomes unusable (neutered) in the context it was\r\n\t * sent from and becomes available only to the worker it was sent to.\r\n\t * `Transferable` objects are instances of classes like `ArrayBuffer`,\r\n\t * `MessagePort` or `ImageBitmap`.\r\n\t *\r\n\t * @param {Array} [transferList] - An optional target list. The transferable items will be added to this list.\r\n\t * @return {Transferable[]} The transfer list. Null is not an acceptable value for the transferList.\r\n\t */\r\n\r\n\tcreateTransferList(transferList = []) {}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/core/TransferableContainer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 152,
    "kind": "class",
    "name": "TransferableContainer",
    "memberof": "src/core/TransferableContainer.js",
    "static": true,
    "longname": "src/core/TransferableContainer.js~TransferableContainer",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/core/TransferableContainer.js",
    "importStyle": "{TransferableContainer}",
    "description": "The TransferableContainer contract.\n\nImplemented by objects that can list their internal transferable objects.",
    "lineNumber": 9,
    "interface": true
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "createTransferList",
    "memberof": "src/core/TransferableContainer.js~TransferableContainer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/TransferableContainer.js~TransferableContainer#createTransferList",
    "access": "public",
    "description": "Creates a list of transferable items.\n\nThe `Transferable` interface represents an object that can be transferred\nbetween different execution contexts, like the main thread and Web Workers.\n\nFor example, `Worker.postMessage()` takes an optional array of\n`Transferable` objects to transfer ownership of. If the ownership of an\nobject is transferred, it becomes unusable (neutered) in the context it was\nsent from and becomes available only to the worker it was sent to.\n`Transferable` objects are instances of classes like `ArrayBuffer`,\n`MessagePort` or `ImageBitmap`.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "transferList",
        "description": "An optional target list. The transferable items will be added to this list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transferable[]"
      ],
      "spread": false,
      "description": "The transfer list. Null is not an acceptable value for the transferList."
    }
  },
  {
    "__docId__": 154,
    "kind": "file",
    "name": "src/events/ClipmapEvent.js",
    "content": "import { Event } from \"synthetic-event\";\r\n\r\n/**\r\n * A clipmap event.\r\n */\r\n\r\nexport class ClipmapEvent extends Event {\r\n\r\n\t/**\r\n\t * Constructs a new clipmap event.\r\n\t *\r\n\t * @param {String} type - The name of the event.\r\n\t */\r\n\r\n\tconstructor(type) {\r\n\r\n\t\tsuper(type);\r\n\r\n\t\t/**\r\n\t\t * The LOD shell.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.lod = -1;\r\n\r\n\t\t/**\r\n\t\t * A list of world octant Identifiers that have left the LOD shell.\r\n\t\t *\r\n\t\t * @type {WorldOctantId[]}\r\n\t\t */\r\n\r\n\t\tthis.left = null;\r\n\r\n\t\t/**\r\n\t\t * A list of world octant Identifiers that have entered the LOD shell.\r\n\t\t *\r\n\t\t * @type {WorldOctantId[]}\r\n\t\t */\r\n\r\n\t\tthis.entered = null;\r\n\r\n\t\t/**\r\n\t\t * An error event.\r\n\t\t *\r\n\t\t * @type {ErrorEvent}\r\n\t\t */\r\n\r\n\t\tthis.error = null;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/events/ClipmapEvent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 155,
    "kind": "class",
    "name": "ClipmapEvent",
    "memberof": "src/events/ClipmapEvent.js",
    "static": true,
    "longname": "src/events/ClipmapEvent.js~ClipmapEvent",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/events/ClipmapEvent.js",
    "importStyle": "{ClipmapEvent}",
    "description": "A clipmap event.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "synthetic-event~Event"
    ]
  },
  {
    "__docId__": 156,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/ClipmapEvent.js~ClipmapEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/ClipmapEvent.js~ClipmapEvent#constructor",
    "access": "public",
    "description": "Constructs a new clipmap event.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The name of the event."
      }
    ]
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "lod",
    "memberof": "src/events/ClipmapEvent.js~ClipmapEvent",
    "static": false,
    "longname": "src/events/ClipmapEvent.js~ClipmapEvent#lod",
    "access": "public",
    "description": "The LOD shell.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "left",
    "memberof": "src/events/ClipmapEvent.js~ClipmapEvent",
    "static": false,
    "longname": "src/events/ClipmapEvent.js~ClipmapEvent#left",
    "access": "public",
    "description": "A list of world octant Identifiers that have left the LOD shell.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "WorldOctantId[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "entered",
    "memberof": "src/events/ClipmapEvent.js~ClipmapEvent",
    "static": false,
    "longname": "src/events/ClipmapEvent.js~ClipmapEvent#entered",
    "access": "public",
    "description": "A list of world octant Identifiers that have entered the LOD shell.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "WorldOctantId[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "error",
    "memberof": "src/events/ClipmapEvent.js~ClipmapEvent",
    "static": false,
    "longname": "src/events/ClipmapEvent.js~ClipmapEvent#error",
    "access": "public",
    "description": "An error event.",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "ErrorEvent"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 161,
    "kind": "file",
    "name": "src/events/index.js",
    "content": "/**\r\n * A collection of events.\r\n *\r\n * @module rabbit-hole/events\r\n */\r\n\r\nexport { SDFLoaderEvent } from \"./SDFLoaderEvent.js\";\r\nexport { TerrainEvent } from \"./TerrainEvent.js\";\r\nexport { WorkerEvent } from \"./WorkerEvent.js\";\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/events/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "src/events/SDFLoaderEvent.js",
    "content": "import { Event } from \"synthetic-event\";\r\n\r\n/**\r\n * An SDF loader event.\r\n */\r\n\r\nexport class SDFLoaderEvent extends Event {\r\n\r\n\t/**\r\n\t * Constructs a new SDF loader event.\r\n\t *\r\n\t * @param {String} type - The name of the event.\r\n\t */\r\n\r\n\tconstructor(type) {\r\n\r\n\t\tsuper(type);\r\n\r\n\t\t/**\r\n\t\t * A list of serialised SDFs.\r\n\t\t *\r\n\t\t * @type {Array}\r\n\t\t */\r\n\r\n\t\tthis.descriptions = null;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/events/SDFLoaderEvent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "class",
    "name": "SDFLoaderEvent",
    "memberof": "src/events/SDFLoaderEvent.js",
    "static": true,
    "longname": "src/events/SDFLoaderEvent.js~SDFLoaderEvent",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/events/SDFLoaderEvent.js",
    "importStyle": "{SDFLoaderEvent}",
    "description": "An SDF loader event.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "synthetic-event~Event"
    ]
  },
  {
    "__docId__": 164,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/SDFLoaderEvent.js~SDFLoaderEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/SDFLoaderEvent.js~SDFLoaderEvent#constructor",
    "access": "public",
    "description": "Constructs a new SDF loader event.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The name of the event."
      }
    ]
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "descriptions",
    "memberof": "src/events/SDFLoaderEvent.js~SDFLoaderEvent",
    "static": false,
    "longname": "src/events/SDFLoaderEvent.js~SDFLoaderEvent#descriptions",
    "access": "public",
    "description": "A list of serialised SDFs.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "src/events/TerrainEvent.js",
    "content": "import { Event } from \"synthetic-event\";\r\n\r\n/**\r\n * A terrain event.\r\n */\r\n\r\nexport class TerrainEvent extends Event {\r\n\r\n\t/**\r\n\t * Constructs a new terrain event.\r\n\t *\r\n\t * @param {String} type - The name of the event.\r\n\t */\r\n\r\n\tconstructor(type) {\r\n\r\n\t\tsuper(type);\r\n\r\n\t\t/**\r\n\t\t * A world octant.\r\n\t\t *\r\n\t\t * @type {WorldOctant}\r\n\t\t */\r\n\r\n\t\tthis.octant = null;\r\n\r\n\t\t/**\r\n\t\t * The Identifier of the world octant.\r\n\t\t *\r\n\t\t * @type {WorldOctantId}\r\n\t\t */\r\n\r\n\t\tthis.octantId = null;\r\n\r\n\t\t/**\r\n\t\t * An error event.\r\n\t\t *\r\n\t\t * @type {ErrorEvent}\r\n\t\t */\r\n\r\n\t\tthis.error = null;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/events/TerrainEvent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "class",
    "name": "TerrainEvent",
    "memberof": "src/events/TerrainEvent.js",
    "static": true,
    "longname": "src/events/TerrainEvent.js~TerrainEvent",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/events/TerrainEvent.js",
    "importStyle": "{TerrainEvent}",
    "description": "A terrain event.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "synthetic-event~Event"
    ]
  },
  {
    "__docId__": 168,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/TerrainEvent.js~TerrainEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/TerrainEvent.js~TerrainEvent#constructor",
    "access": "public",
    "description": "Constructs a new terrain event.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The name of the event."
      }
    ]
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "octant",
    "memberof": "src/events/TerrainEvent.js~TerrainEvent",
    "static": false,
    "longname": "src/events/TerrainEvent.js~TerrainEvent#octant",
    "access": "public",
    "description": "A world octant.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "WorldOctant"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "octantId",
    "memberof": "src/events/TerrainEvent.js~TerrainEvent",
    "static": false,
    "longname": "src/events/TerrainEvent.js~TerrainEvent#octantId",
    "access": "public",
    "description": "The Identifier of the world octant.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "WorldOctantId"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "error",
    "memberof": "src/events/TerrainEvent.js~TerrainEvent",
    "static": false,
    "longname": "src/events/TerrainEvent.js~TerrainEvent#error",
    "access": "public",
    "description": "An error event.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "ErrorEvent"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "src/events/WorkerEvent.js",
    "content": "import { Event } from \"synthetic-event\";\r\n\r\n/**\r\n * A worker event.\r\n */\r\n\r\nexport class WorkerEvent extends Event {\r\n\r\n\t/**\r\n\t * Constructs a new worker event.\r\n\t *\r\n\t * @param {String} type - The name of the event.\r\n\t */\r\n\r\n\tconstructor(type) {\r\n\r\n\t\tsuper(type);\r\n\r\n\t\t/**\r\n\t\t * A worker.\r\n\t\t *\r\n\t\t * @type {Worker}\r\n\t\t */\r\n\r\n\t\tthis.worker = null;\r\n\r\n\t\t/**\r\n\t\t * A worker response.\r\n\t\t *\r\n\t\t * @type {Response}\r\n\t\t */\r\n\r\n\t\tthis.response = null;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/events/WorkerEvent.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "class",
    "name": "WorkerEvent",
    "memberof": "src/events/WorkerEvent.js",
    "static": true,
    "longname": "src/events/WorkerEvent.js~WorkerEvent",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/events/WorkerEvent.js",
    "importStyle": "{WorkerEvent}",
    "description": "A worker event.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "synthetic-event~Event"
    ]
  },
  {
    "__docId__": 174,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/events/WorkerEvent.js~WorkerEvent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/events/WorkerEvent.js~WorkerEvent#constructor",
    "access": "public",
    "description": "Constructs a new worker event.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The name of the event."
      }
    ]
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "worker",
    "memberof": "src/events/WorkerEvent.js~WorkerEvent",
    "static": false,
    "longname": "src/events/WorkerEvent.js~WorkerEvent#worker",
    "access": "public",
    "description": "A worker.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "Worker"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "response",
    "memberof": "src/events/WorkerEvent.js~WorkerEvent",
    "static": false,
    "longname": "src/events/WorkerEvent.js~WorkerEvent#response",
    "access": "public",
    "description": "A worker response.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "Response"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 177,
    "kind": "file",
    "name": "src/index.js",
    "content": "/**\r\n * Exposure of the library components.\r\n *\r\n * @module rabbit-hole\r\n */\r\n\r\nexport {\r\n\tDeserializable,\r\n\tDisposable,\r\n\tQueue,\r\n\tSerializable,\r\n\tTerrain,\r\n\tTransferableContainer\r\n} from \"./core\";\r\n\r\nexport {\r\n\tClipmap,\r\n\tScene\r\n} from \"./clipmap\";\r\n\r\nexport {\r\n\tRunLengthEncoding\r\n} from \"./codecs\";\r\n\r\nexport {\r\n\tSDFLoaderEvent,\r\n\tTerrainEvent,\r\n\tWorkerEvent\r\n} from \"./events\";\r\n\r\nexport {\r\n\tDualContouring,\r\n\tIsosurface\r\n} from \"./isosurface\";\r\n\r\nexport {\r\n\tSDFLoader\r\n} from \"./loaders\";\r\n\r\nexport {\r\n\tGivens,\r\n\tQEFSolver,\r\n\tQEFData,\r\n\tSchur,\r\n\tSingularValueDecomposition\r\n} from \"./math\";\r\n\r\nexport {\r\n\tIntermediateWorldOctant,\r\n\tKeyDesign,\r\n\tKeyIterator,\r\n\tSparseVoxelOctree,\r\n\tVoxelCell,\r\n\tWorldOctant,\r\n\tWorldOctantId,\r\n\tWorldOctantIterator,\r\n\tWorldOctantWrapper,\r\n\tWorldOctree,\r\n\tWorldOctreeCSG,\r\n\tWorldOctreeRaycaster\r\n} from \"./octree\";\r\n\r\nexport {\r\n\tBinaryUtils\r\n} from \"./utils\";\r\n\r\nexport {\r\n\tEdge,\r\n\tEdgeData,\r\n\tEdgeIterator,\r\n\tHermiteData,\r\n\tMaterial,\r\n\tVoxel\r\n} from \"./volume\";\r\n\r\nexport {\r\n\tConstructiveSolidGeometry,\r\n\tDifference,\r\n\tIntersection,\r\n\tOperationType,\r\n\tUnion\r\n} from \"./volume/csg\";\r\n\r\nexport {\r\n\tFractalNoise,\r\n\tHeightfield,\r\n\tSDFType,\r\n\tSignedDistanceFunction,\r\n\tSuperPrimitive,\r\n\tSuperPrimitivePreset\r\n} from \"./volume/sdf\";\r\n\r\nexport {\r\n\tAction,\r\n\tDataProcessor,\r\n\tSurfaceExtractor,\r\n\tThreadPool,\r\n\tVolumeModifier\r\n} from \"./worker\";\r\n\r\nexport {\r\n\tConfigurationMessage,\r\n\tDataMessage,\r\n\tMessage,\r\n\tExtractionRequest,\r\n\tExtractionResponse,\r\n\tModificationRequest,\r\n\tModificationResponse\r\n} from \"./worker/messages\";\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "src/isosurface/dual-contouring/DualContouring.js",
    "content": "import { edges } from \"sparse-octree\";\r\nimport { Material } from \"../../volume/Material.js\";\r\nimport { Isosurface } from \"../Isosurface.js\";\r\nimport * as tables from \"./tables.js\";\r\n\r\n/**\r\n * The maximum number of vertices. Vertex indices use 16 bits.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\n\r\nconst MAX_VERTEX_COUNT = Math.pow(2, 16) - 1;\r\n\r\n/**\r\n * An edge contouring sub-procedure.\r\n *\r\n * @private\r\n * @param {Array} octants - Four leaf octants.\r\n * @param {Number} dir - A direction index.\r\n * @param {Array} indexBuffer - An output list for vertex indices.\r\n */\r\n\r\nfunction contourProcessEdge(octants, dir, indexBuffer) {\r\n\r\n\tconst indices = [-1, -1, -1, -1];\r\n\tconst signChange = [false, false, false, false];\r\n\r\n\tlet minSize = Infinity;\r\n\tlet minIndex = 0;\r\n\tlet flip = false;\r\n\r\n\tlet c1, c2, m1, m2;\r\n\tlet octant, edge;\r\n\tlet i;\r\n\r\n\tfor(i = 0; i < 4; ++i) {\r\n\r\n\t\toctant = octants[i];\r\n\t\tedge = tables.procEdgeMask[dir][i];\r\n\r\n\t\tc1 = edges[edge][0];\r\n\t\tc2 = edges[edge][1];\r\n\r\n\t\tm1 = (octant.voxel.materials >> c1) & 1;\r\n\t\tm2 = (octant.voxel.materials >> c2) & 1;\r\n\r\n\t\tif(octant.size < minSize) {\r\n\r\n\t\t\tminSize = octant.size;\r\n\t\t\tminIndex = i;\r\n\t\t\tflip = (m1 !== Material.AIR);\r\n\r\n\t\t}\r\n\r\n\t\tindices[i] = octant.voxel.index;\r\n\t\tsignChange[i] = (m1 !== m2);\r\n\r\n\t}\r\n\r\n\tif(signChange[minIndex]) {\r\n\r\n\t\tif(!flip) {\r\n\r\n\t\t\tindexBuffer.push(indices[0]);\r\n\t\t\tindexBuffer.push(indices[1]);\r\n\t\t\tindexBuffer.push(indices[3]);\r\n\r\n\t\t\tindexBuffer.push(indices[0]);\r\n\t\t\tindexBuffer.push(indices[3]);\r\n\t\t\tindexBuffer.push(indices[2]);\r\n\r\n\t\t} else {\r\n\r\n\t\t\tindexBuffer.push(indices[0]);\r\n\t\t\tindexBuffer.push(indices[3]);\r\n\t\t\tindexBuffer.push(indices[1]);\r\n\r\n\t\t\tindexBuffer.push(indices[0]);\r\n\t\t\tindexBuffer.push(indices[2]);\r\n\t\t\tindexBuffer.push(indices[3]);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * An edge contouring procedure.\r\n *\r\n * @private\r\n * @param {Array} octants - Four edge octants.\r\n * @param {Number} dir - A direction index.\r\n * @param {Array} indexBuffer - An output list for vertex indices.\r\n */\r\n\r\nfunction contourEdgeProc(octants, dir, indexBuffer) {\r\n\r\n\tconst c = [0, 0, 0, 0];\r\n\r\n\tlet edgeOctants;\r\n\tlet octant;\r\n\tlet i, j;\r\n\r\n\tif(octants[0].voxel !== null && octants[1].voxel !== null &&\r\n\t\toctants[2].voxel !== null && octants[3].voxel !== null) {\r\n\r\n\t\tcontourProcessEdge(octants, dir, indexBuffer);\r\n\r\n\t} else {\r\n\r\n\t\tfor(i = 0; i < 2; ++i) {\r\n\r\n\t\t\tc[0] = tables.edgeProcEdgeMask[dir][i][0];\r\n\t\t\tc[1] = tables.edgeProcEdgeMask[dir][i][1];\r\n\t\t\tc[2] = tables.edgeProcEdgeMask[dir][i][2];\r\n\t\t\tc[3] = tables.edgeProcEdgeMask[dir][i][3];\r\n\r\n\t\t\tedgeOctants = [];\r\n\r\n\t\t\tfor(j = 0; j < 4; ++j) {\r\n\r\n\t\t\t\toctant = octants[j];\r\n\r\n\t\t\t\tif(octant.voxel !== null) {\r\n\r\n\t\t\t\t\tedgeOctants[j] = octant;\r\n\r\n\t\t\t\t} else if(octant.children !== null) {\r\n\r\n\t\t\t\t\tedgeOctants[j] = octant.children[c[j]];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif(j === 4) {\r\n\r\n\t\t\t\tcontourEdgeProc(edgeOctants, tables.edgeProcEdgeMask[dir][i][4], indexBuffer);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A face contouring procedure.\r\n *\r\n * @private\r\n * @param {Array} octants - Two face octants.\r\n * @param {Number} dir - A direction index.\r\n * @param {Array} indexBuffer - An output list for vertex indices.\r\n */\r\n\r\nfunction contourFaceProc(octants, dir, indexBuffer) {\r\n\r\n\tconst c = [0, 0, 0, 0];\r\n\r\n\tconst orders = [\r\n\t\t[0, 0, 1, 1],\r\n\t\t[0, 1, 0, 1]\r\n\t];\r\n\r\n\tlet faceOctants, edgeOctants;\r\n\tlet order, octant;\r\n\tlet i, j;\r\n\r\n\tif(octants[0].children !== null || octants[1].children !== null) {\r\n\r\n\t\tfor(i = 0; i < 4; ++i) {\r\n\r\n\t\t\tc[0] = tables.faceProcFaceMask[dir][i][0];\r\n\t\t\tc[1] = tables.faceProcFaceMask[dir][i][1];\r\n\r\n\t\t\tfaceOctants = [\r\n\t\t\t\t(octants[0].children === null) ? octants[0] : octants[0].children[c[0]],\r\n\t\t\t\t(octants[1].children === null) ? octants[1] : octants[1].children[c[1]]\r\n\t\t\t];\r\n\r\n\t\t\tcontourFaceProc(faceOctants, tables.faceProcFaceMask[dir][i][2], indexBuffer);\r\n\r\n\t\t}\r\n\r\n\t\tfor(i = 0; i < 4; ++i) {\r\n\r\n\t\t\tc[0] = tables.faceProcEdgeMask[dir][i][1];\r\n\t\t\tc[1] = tables.faceProcEdgeMask[dir][i][2];\r\n\t\t\tc[2] = tables.faceProcEdgeMask[dir][i][3];\r\n\t\t\tc[3] = tables.faceProcEdgeMask[dir][i][4];\r\n\r\n\t\t\torder = orders[tables.faceProcEdgeMask[dir][i][0]];\r\n\r\n\t\t\tedgeOctants = [];\r\n\r\n\t\t\tfor(j = 0; j < 4; ++j) {\r\n\r\n\t\t\t\toctant = octants[order[j]];\r\n\r\n\t\t\t\tif(octant.voxel !== null) {\r\n\r\n\t\t\t\t\tedgeOctants[j] = octant;\r\n\r\n\t\t\t\t} else if(octant.children !== null) {\r\n\r\n\t\t\t\t\tedgeOctants[j] = octant.children[c[j]];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif(j === 4) {\r\n\r\n\t\t\t\tcontourEdgeProc(edgeOctants, tables.faceProcEdgeMask[dir][i][5], indexBuffer);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * The main contouring procedure.\r\n *\r\n * @private\r\n * @param {Octant} octant - An octant.\r\n * @param {Array} indexBuffer - An output list for vertex indices.\r\n */\r\n\r\nfunction contourCellProc(octant, indexBuffer) {\r\n\r\n\tconst children = octant.children;\r\n\tconst c = [0, 0, 0, 0];\r\n\r\n\tlet faceOctants, edgeOctants;\r\n\tlet i;\r\n\r\n\tif(children !== null) {\r\n\r\n\t\tfor(i = 0; i < 8; ++i) {\r\n\r\n\t\t\tcontourCellProc(children[i], indexBuffer);\r\n\r\n\t\t}\r\n\r\n\t\tfor(i = 0; i < 12; ++i) {\r\n\r\n\t\t\tc[0] = tables.cellProcFaceMask[i][0];\r\n\t\t\tc[1] = tables.cellProcFaceMask[i][1];\r\n\r\n\t\t\tfaceOctants = [\r\n\t\t\t\tchildren[c[0]],\r\n\t\t\t\tchildren[c[1]]\r\n\t\t\t];\r\n\r\n\t\t\tcontourFaceProc(faceOctants, tables.cellProcFaceMask[i][2], indexBuffer);\r\n\r\n\t\t}\r\n\r\n\t\tfor(i = 0; i < 6; ++i) {\r\n\r\n\t\t\tc[0] = tables.cellProcEdgeMask[i][0];\r\n\t\t\tc[1] = tables.cellProcEdgeMask[i][1];\r\n\t\t\tc[2] = tables.cellProcEdgeMask[i][2];\r\n\t\t\tc[3] = tables.cellProcEdgeMask[i][3];\r\n\r\n\t\t\tedgeOctants = [\r\n\t\t\t\tchildren[c[0]],\r\n\t\t\t\tchildren[c[1]],\r\n\t\t\t\tchildren[c[2]],\r\n\t\t\t\tchildren[c[3]]\r\n\t\t\t];\r\n\r\n\t\t\tcontourEdgeProc(edgeOctants, tables.cellProcEdgeMask[i][4], indexBuffer);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Collects positions and normals from the voxel information of the given octant\r\n * and its children. The generated vertex indices are stored in the respective\r\n * voxels during the octree traversal.\r\n *\r\n * @private\r\n * @param {Octant} octant - An octant.\r\n * @param {Array} positions - An array to be filled with vertices.\r\n * @param {Array} normals - An array to be filled with normals.\r\n * @param {Number} index - The next vertex index.\r\n */\r\n\r\nfunction generateVertexIndices(octant, positions, normals, index) {\r\n\r\n\tlet i, voxel;\r\n\r\n\tif(octant.children !== null) {\r\n\r\n\t\tfor(i = 0; i < 8; ++i) {\r\n\r\n\t\t\tindex = generateVertexIndices(octant.children[i], positions, normals, index);\r\n\r\n\t\t}\r\n\r\n\t} else if(octant.voxel !== null) {\r\n\r\n\t\tvoxel = octant.voxel;\r\n\t\tvoxel.index = index;\r\n\r\n\t\tpositions[index * 3] = voxel.position.x;\r\n\t\tpositions[index * 3 + 1] = voxel.position.y;\r\n\t\tpositions[index * 3 + 2] = voxel.position.z;\r\n\r\n\t\tnormals[index * 3] = voxel.normal.x;\r\n\t\tnormals[index * 3 + 1] = voxel.normal.y;\r\n\t\tnormals[index * 3 + 2] = voxel.normal.z;\r\n\r\n\t\t++index;\r\n\r\n\t}\r\n\r\n\treturn index;\r\n\r\n}\r\n\r\n/**\r\n * Dual Contouring is an isosurface extraction technique that was originally\r\n * presented by Tao Ju in 2002:\r\n *  http://www.cs.wustl.edu/~taoju/research/dualContour.pdf\r\n */\r\n\r\nexport class DualContouring {\r\n\r\n\t/**\r\n\t * Contours the given volume data.\r\n\t *\r\n\t * @param {SparseVoxelOctree} svo - A voxel octree.\r\n\t * @return {Isosurface} The generated isosurface or null if no data was generated.\r\n\t */\r\n\r\n\tstatic run(svo) {\r\n\r\n\t\tconst indexBuffer = [];\r\n\r\n\t\t// Each voxel contains one vertex.\r\n\t\tconst vertexCount = svo.voxelCount;\r\n\r\n\t\tlet result = null;\r\n\t\tlet positions = null;\r\n\t\tlet normals = null;\r\n\t\tlet uvs = null;\r\n\t\tlet materials = null;\r\n\r\n\t\tif(vertexCount > MAX_VERTEX_COUNT) {\r\n\r\n\t\t\tconsole.warn(\r\n\t\t\t\t\"Could not create geometry for cell at position\", svo.min,\r\n\t\t\t\t\"(vertex count of\", vertexCount, \"exceeds limit of \", MAX_VERTEX_COUNT, \")\"\r\n\t\t\t);\r\n\r\n\t\t} else if(vertexCount > 0) {\r\n\r\n\t\t\tpositions = new Float32Array(vertexCount * 3);\r\n\t\t\tnormals = new Float32Array(vertexCount * 3);\r\n\t\t\tuvs = new Float32Array(vertexCount * 2);\r\n\t\t\tmaterials = new Uint8Array(vertexCount);\r\n\r\n\t\t\tgenerateVertexIndices(svo.root, positions, normals, 0);\r\n\t\t\tcontourCellProc(svo.root, indexBuffer);\r\n\r\n\t\t\tresult = new Isosurface(\r\n\t\t\t\tnew Uint16Array(indexBuffer),\r\n\t\t\t\tpositions,\r\n\t\t\t\tnormals,\r\n\t\t\t\tuvs,\r\n\t\t\t\tmaterials\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/isosurface/dual-contouring/DualContouring.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "MAX_VERTEX_COUNT",
    "memberof": "src/isosurface/dual-contouring/DualContouring.js",
    "static": true,
    "longname": "src/isosurface/dual-contouring/DualContouring.js~MAX_VERTEX_COUNT",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/isosurface/dual-contouring/DualContouring.js",
    "importStyle": null,
    "description": "The maximum number of vertices. Vertex indices use 16 bits.",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "function",
    "name": "contourProcessEdge",
    "memberof": "src/isosurface/dual-contouring/DualContouring.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/isosurface/dual-contouring/DualContouring.js~contourProcessEdge",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/isosurface/dual-contouring/DualContouring.js",
    "importStyle": null,
    "description": "An edge contouring sub-procedure.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "octants",
        "description": "Four leaf octants."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "A direction index."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "indexBuffer",
        "description": "An output list for vertex indices."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "contourEdgeProc",
    "memberof": "src/isosurface/dual-contouring/DualContouring.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/isosurface/dual-contouring/DualContouring.js~contourEdgeProc",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/isosurface/dual-contouring/DualContouring.js",
    "importStyle": null,
    "description": "An edge contouring procedure.",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "octants",
        "description": "Four edge octants."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "A direction index."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "indexBuffer",
        "description": "An output list for vertex indices."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 182,
    "kind": "function",
    "name": "contourFaceProc",
    "memberof": "src/isosurface/dual-contouring/DualContouring.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/isosurface/dual-contouring/DualContouring.js~contourFaceProc",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/isosurface/dual-contouring/DualContouring.js",
    "importStyle": null,
    "description": "A face contouring procedure.",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "octants",
        "description": "Two face octants."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": "A direction index."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "indexBuffer",
        "description": "An output list for vertex indices."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 183,
    "kind": "function",
    "name": "contourCellProc",
    "memberof": "src/isosurface/dual-contouring/DualContouring.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/isosurface/dual-contouring/DualContouring.js~contourCellProc",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/isosurface/dual-contouring/DualContouring.js",
    "importStyle": null,
    "description": "The main contouring procedure.",
    "lineNumber": 243,
    "params": [
      {
        "nullable": null,
        "types": [
          "Octant"
        ],
        "spread": false,
        "optional": false,
        "name": "octant",
        "description": "An octant."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "indexBuffer",
        "description": "An output list for vertex indices."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 184,
    "kind": "function",
    "name": "generateVertexIndices",
    "memberof": "src/isosurface/dual-contouring/DualContouring.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/isosurface/dual-contouring/DualContouring.js~generateVertexIndices",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/isosurface/dual-contouring/DualContouring.js",
    "importStyle": null,
    "description": "Collects positions and normals from the voxel information of the given octant\nand its children. The generated vertex indices are stored in the respective\nvoxels during the octree traversal.",
    "lineNumber": 307,
    "params": [
      {
        "nullable": null,
        "types": [
          "Octant"
        ],
        "spread": false,
        "optional": false,
        "name": "octant",
        "description": "An octant."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "positions",
        "description": "An array to be filled with vertices."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "normals",
        "description": "An array to be filled with normals."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The next vertex index."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 185,
    "kind": "class",
    "name": "DualContouring",
    "memberof": "src/isosurface/dual-contouring/DualContouring.js",
    "static": true,
    "longname": "src/isosurface/dual-contouring/DualContouring.js~DualContouring",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/isosurface/dual-contouring/DualContouring.js",
    "importStyle": "{DualContouring}",
    "description": "Dual Contouring is an isosurface extraction technique that was originally\npresented by Tao Ju in 2002:\n http://www.cs.wustl.edu/~taoju/research/dualContour.pdf",
    "lineNumber": 346,
    "interface": false
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "run",
    "memberof": "src/isosurface/dual-contouring/DualContouring.js~DualContouring",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/isosurface/dual-contouring/DualContouring.js~DualContouring.run",
    "access": "public",
    "description": "Contours the given volume data.",
    "lineNumber": 355,
    "params": [
      {
        "nullable": null,
        "types": [
          "SparseVoxelOctree"
        ],
        "spread": false,
        "optional": false,
        "name": "svo",
        "description": "A voxel octree."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Isosurface"
      ],
      "spread": false,
      "description": "The generated isosurface or null if no data was generated."
    }
  },
  {
    "__docId__": 187,
    "kind": "file",
    "name": "src/isosurface/dual-contouring/tables.js",
    "content": "/**\r\n * An edge mask.\r\n *\r\n * @type {Uint8Array}\r\n */\r\n\r\nexport const edgeMask = new Uint8Array([5, 3, 6]);\r\n\r\n/**\r\n * A face map.\r\n *\r\n * @type {Uint8Array[]}\r\n */\r\n\r\nexport const faceMap = [\r\n\r\n\tnew Uint8Array([4, 8, 5, 9]),\r\n\tnew Uint8Array([6, 10, 7, 11]),\r\n\tnew Uint8Array([0, 8, 1, 10]),\r\n\tnew Uint8Array([2, 9, 3, 11]),\r\n\tnew Uint8Array([0, 4, 2, 6]),\r\n\tnew Uint8Array([1, 5, 3, 7])\r\n\r\n];\r\n\r\n/**\r\n * A face mask for cell processing.\r\n *\r\n * @type {Uint8Array[]}\r\n */\r\n\r\nexport const cellProcFaceMask = [\r\n\r\n\tnew Uint8Array([0, 4, 0]),\r\n\tnew Uint8Array([1, 5, 0]),\r\n\tnew Uint8Array([2, 6, 0]),\r\n\tnew Uint8Array([3, 7, 0]),\r\n\tnew Uint8Array([0, 2, 1]),\r\n\tnew Uint8Array([4, 6, 1]),\r\n\tnew Uint8Array([1, 3, 1]),\r\n\tnew Uint8Array([5, 7, 1]),\r\n\tnew Uint8Array([0, 1, 2]),\r\n\tnew Uint8Array([2, 3, 2]),\r\n\tnew Uint8Array([4, 5, 2]),\r\n\tnew Uint8Array([6, 7, 2])\r\n\r\n];\r\n\r\n/**\r\n * An edge mask for cell processing.\r\n *\r\n * @type {Uint8Array[]}\r\n */\r\n\r\nexport const cellProcEdgeMask = [\r\n\r\n\tnew Uint8Array([0, 1, 2, 3, 0]),\r\n\tnew Uint8Array([4, 5, 6, 7, 0]),\r\n\tnew Uint8Array([0, 4, 1, 5, 1]),\r\n\tnew Uint8Array([2, 6, 3, 7, 1]),\r\n\tnew Uint8Array([0, 2, 4, 6, 2]),\r\n\tnew Uint8Array([1, 3, 5, 7, 2])\r\n\r\n];\r\n\r\n/**\r\n * A face mask for face processing.\r\n *\r\n * @type {Array<Uint8Array[]>}\r\n */\r\n\r\nexport const faceProcFaceMask = [\r\n\r\n\t[\r\n\t\tnew Uint8Array([4, 0, 0]),\r\n\t\tnew Uint8Array([5, 1, 0]),\r\n\t\tnew Uint8Array([6, 2, 0]),\r\n\t\tnew Uint8Array([7, 3, 0])\r\n\t],\r\n\r\n\t[\r\n\t\tnew Uint8Array([2, 0, 1]),\r\n\t\tnew Uint8Array([6, 4, 1]),\r\n\t\tnew Uint8Array([3, 1, 1]),\r\n\t\tnew Uint8Array([7, 5, 1])\r\n\t],\r\n\r\n\t[\r\n\t\tnew Uint8Array([1, 0, 2]),\r\n\t\tnew Uint8Array([3, 2, 2]),\r\n\t\tnew Uint8Array([5, 4, 2]),\r\n\t\tnew Uint8Array([7, 6, 2])\r\n\t]\r\n\r\n];\r\n\r\n/**\r\n * An edge mask for face processing.\r\n *\r\n * @type {Array<Uint8Array[]>}\r\n */\r\n\r\nexport const faceProcEdgeMask = [\r\n\r\n\t[\r\n\t\tnew Uint8Array([1, 4, 0, 5, 1, 1]),\r\n\t\tnew Uint8Array([1, 6, 2, 7, 3, 1]),\r\n\t\tnew Uint8Array([0, 4, 6, 0, 2, 2]),\r\n\t\tnew Uint8Array([0, 5, 7, 1, 3, 2])\r\n\t],\r\n\r\n\t[\r\n\t\tnew Uint8Array([0, 2, 3, 0, 1, 0]),\r\n\t\tnew Uint8Array([0, 6, 7, 4, 5, 0]),\r\n\t\tnew Uint8Array([1, 2, 0, 6, 4, 2]),\r\n\t\tnew Uint8Array([1, 3, 1, 7, 5, 2])\r\n\t],\r\n\r\n\t[\r\n\t\tnew Uint8Array([1, 1, 0, 3, 2, 0]),\r\n\t\tnew Uint8Array([1, 5, 4, 7, 6, 0]),\r\n\t\tnew Uint8Array([0, 1, 5, 0, 4, 1]),\r\n\t\tnew Uint8Array([0, 3, 7, 2, 6, 1])\r\n\t]\r\n\r\n];\r\n\r\n/**\r\n * An edge mask for edge processing.\r\n *\r\n * @type {Array<Uint8Array[]>}\r\n */\r\n\r\nexport const edgeProcEdgeMask = [\r\n\r\n\t[\r\n\t\tnew Uint8Array([3, 2, 1, 0, 0]),\r\n\t\tnew Uint8Array([7, 6, 5, 4, 0])\r\n\t],\r\n\r\n\t[\r\n\t\tnew Uint8Array([5, 1, 4, 0, 1]),\r\n\t\tnew Uint8Array([7, 3, 6, 2, 1])\r\n\t],\r\n\r\n\t[\r\n\t\tnew Uint8Array([6, 4, 2, 0, 2]),\r\n\t\tnew Uint8Array([7, 5, 3, 1, 2])\r\n\t]\r\n\r\n];\r\n\r\n/**\r\n * An edge mask.\r\n *\r\n * @type {Uint8Array[]}\r\n */\r\n\r\nexport const procEdgeMask = [\r\n\r\n\tnew Uint8Array([3, 2, 1, 0]),\r\n\tnew Uint8Array([7, 5, 6, 4]),\r\n\tnew Uint8Array([11, 10, 9, 8])\r\n\r\n];\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/isosurface/dual-contouring/tables.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 188,
    "kind": "variable",
    "name": "edgeMask",
    "memberof": "src/isosurface/dual-contouring/tables.js",
    "static": true,
    "longname": "src/isosurface/dual-contouring/tables.js~edgeMask",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/isosurface/dual-contouring/tables.js",
    "importStyle": "{edgeMask}",
    "description": "An edge mask.",
    "lineNumber": 7,
    "type": {
      "nullable": null,
      "types": [
        "Uint8Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "name": "faceMap",
    "memberof": "src/isosurface/dual-contouring/tables.js",
    "static": true,
    "longname": "src/isosurface/dual-contouring/tables.js~faceMap",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/isosurface/dual-contouring/tables.js",
    "importStyle": "{faceMap}",
    "description": "A face map.",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "Uint8Array[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "name": "cellProcFaceMask",
    "memberof": "src/isosurface/dual-contouring/tables.js",
    "static": true,
    "longname": "src/isosurface/dual-contouring/tables.js~cellProcFaceMask",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/isosurface/dual-contouring/tables.js",
    "importStyle": "{cellProcFaceMask}",
    "description": "A face mask for cell processing.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Uint8Array[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 191,
    "kind": "variable",
    "name": "cellProcEdgeMask",
    "memberof": "src/isosurface/dual-contouring/tables.js",
    "static": true,
    "longname": "src/isosurface/dual-contouring/tables.js~cellProcEdgeMask",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/isosurface/dual-contouring/tables.js",
    "importStyle": "{cellProcEdgeMask}",
    "description": "An edge mask for cell processing.",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "Uint8Array[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 192,
    "kind": "variable",
    "name": "faceProcFaceMask",
    "memberof": "src/isosurface/dual-contouring/tables.js",
    "static": true,
    "longname": "src/isosurface/dual-contouring/tables.js~faceProcFaceMask",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/isosurface/dual-contouring/tables.js",
    "importStyle": "{faceProcFaceMask}",
    "description": "A face mask for face processing.",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "Array<Uint8Array[]>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 193,
    "kind": "variable",
    "name": "faceProcEdgeMask",
    "memberof": "src/isosurface/dual-contouring/tables.js",
    "static": true,
    "longname": "src/isosurface/dual-contouring/tables.js~faceProcEdgeMask",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/isosurface/dual-contouring/tables.js",
    "importStyle": "{faceProcEdgeMask}",
    "description": "An edge mask for face processing.",
    "lineNumber": 103,
    "type": {
      "nullable": null,
      "types": [
        "Array<Uint8Array[]>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 194,
    "kind": "variable",
    "name": "edgeProcEdgeMask",
    "memberof": "src/isosurface/dual-contouring/tables.js",
    "static": true,
    "longname": "src/isosurface/dual-contouring/tables.js~edgeProcEdgeMask",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/isosurface/dual-contouring/tables.js",
    "importStyle": "{edgeProcEdgeMask}",
    "description": "An edge mask for edge processing.",
    "lineNumber": 134,
    "type": {
      "nullable": null,
      "types": [
        "Array<Uint8Array[]>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 195,
    "kind": "variable",
    "name": "procEdgeMask",
    "memberof": "src/isosurface/dual-contouring/tables.js",
    "static": true,
    "longname": "src/isosurface/dual-contouring/tables.js~procEdgeMask",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/isosurface/dual-contouring/tables.js",
    "importStyle": "{procEdgeMask}",
    "description": "An edge mask.",
    "lineNumber": 159,
    "type": {
      "nullable": null,
      "types": [
        "Uint8Array[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "src/isosurface/index.js",
    "content": "/**\r\n * Isosurface extraction algorithms.\r\n *\r\n * @module rabbit-hole/isosurface\r\n */\r\n\r\nexport { DualContouring } from \"./dual-contouring/DualContouring.js\";\r\nexport { Isosurface } from \"./Isosurface.js\";\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/isosurface/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "file",
    "name": "src/isosurface/Isosurface.js",
    "content": "/**\r\n * An isosurface, the result of a contouring process.\r\n *\r\n * @implements {Serializable}\r\n * @implements {Deserializable}\r\n * @implements {TransferableContainer}\r\n */\r\n\r\nexport class Isosurface {\r\n\r\n\t/**\r\n\t * Constructs a new isosurface.\r\n\t *\r\n\t * @param {Uint16Array} indices - Triangle indices.\r\n\t * @param {Float32Array} positions - Generated vertices.\r\n\t * @param {Float32Array} normals - Generated normals.\r\n\t * @param {Float32Array} uvs - Generated uvs.\r\n\t * @param {Uint8Array} materials - Generated materials.\r\n\t */\r\n\r\n\tconstructor(indices, positions, normals, uvs, materials) {\r\n\r\n\t\t/**\r\n\t\t * A set of vertex indices that describe triangles.\r\n\t\t *\r\n\t\t * @type {Uint16Array}\r\n\t\t */\r\n\r\n\t\tthis.indices = indices;\r\n\r\n\t\t/**\r\n\t\t * A set of vertices.\r\n\t\t *\r\n\t\t * @type {Float32Array}\r\n\t\t */\r\n\r\n\t\tthis.positions = positions;\r\n\r\n\t\t/**\r\n\t\t * A set of normals.\r\n\t\t *\r\n\t\t * @type {Float32Array}\r\n\t\t */\r\n\r\n\t\tthis.normals = normals;\r\n\r\n\t\t/**\r\n\t\t * A set of UV coordinates.\r\n\t\t *\r\n\t\t * @type {Float32Array}\r\n\t\t */\r\n\r\n\t\tthis.uvs = uvs;\r\n\r\n\t\t/**\r\n\t\t * A set of material indices.\r\n\t\t *\r\n\t\t * @type {Uint8Array}\r\n\t\t */\r\n\r\n\t\tthis.materials = materials;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Serialises this isosurface.\r\n\t *\r\n\t * @param {Boolean} [deflate=false] - Whether the data should be compressed if possible.\r\n\t * @return {Object} The serialised data.\r\n\t */\r\n\r\n\tserialize(deflate = false) {\r\n\r\n\t\treturn {\r\n\t\t\tindices: this.indices,\r\n\t\t\tpositions: this.positions,\r\n\t\t\tnormals: this.normals,\r\n\t\t\tuvs: this.uvs,\r\n\t\t\tmaterials: this.materials\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adopts the given serialised isosurface.\r\n\t *\r\n\t * @param {Object} object - A serialised isosurface. Can be null.\r\n\t * @return {Deserializable} This object or null if the given serialised isosurface was null.\r\n\t */\r\n\r\n\tdeserialize(object) {\r\n\r\n\t\tlet result = this;\r\n\r\n\t\tif(object !== null) {\r\n\r\n\t\t\tthis.indices = object.indices;\r\n\t\t\tthis.positions = object.positions;\r\n\t\t\tthis.normals = object.normals;\r\n\t\t\tthis.uvs = object.uvs;\r\n\t\t\tthis.materials = object.materials;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tresult = null;\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a list of transferable items.\r\n\t *\r\n\t * @param {Array} [transferList] - An optional target list. The transferable items will be added to this list.\r\n\t * @return {Transferable[]} The transfer list.\r\n\t */\r\n\r\n\tcreateTransferList(transferList = []) {\r\n\r\n\t\ttransferList.push(this.indices.buffer);\r\n\t\ttransferList.push(this.positions.buffer);\r\n\t\ttransferList.push(this.normals.buffer);\r\n\t\ttransferList.push(this.uvs.buffer);\r\n\t\ttransferList.push(this.materials.buffer);\r\n\r\n\t\treturn transferList;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/isosurface/Isosurface.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 198,
    "kind": "class",
    "name": "Isosurface",
    "memberof": "src/isosurface/Isosurface.js",
    "static": true,
    "longname": "src/isosurface/Isosurface.js~Isosurface",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/isosurface/Isosurface.js",
    "importStyle": "{Isosurface}",
    "description": "An isosurface, the result of a contouring process.",
    "lineNumber": 9,
    "interface": false,
    "implements": [
      "Serializable",
      "Deserializable",
      "TransferableContainer"
    ]
  },
  {
    "__docId__": 199,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/isosurface/Isosurface.js~Isosurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/isosurface/Isosurface.js~Isosurface#constructor",
    "access": "public",
    "description": "Constructs a new isosurface.",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Uint16Array"
        ],
        "spread": false,
        "optional": false,
        "name": "indices",
        "description": "Triangle indices."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "positions",
        "description": "Generated vertices."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "normals",
        "description": "Generated normals."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "uvs",
        "description": "Generated uvs."
      },
      {
        "nullable": null,
        "types": [
          "Uint8Array"
        ],
        "spread": false,
        "optional": false,
        "name": "materials",
        "description": "Generated materials."
      }
    ]
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "indices",
    "memberof": "src/isosurface/Isosurface.js~Isosurface",
    "static": false,
    "longname": "src/isosurface/Isosurface.js~Isosurface#indices",
    "access": "public",
    "description": "A set of vertex indices that describe triangles.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Uint16Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "positions",
    "memberof": "src/isosurface/Isosurface.js~Isosurface",
    "static": false,
    "longname": "src/isosurface/Isosurface.js~Isosurface#positions",
    "access": "public",
    "description": "A set of vertices.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "normals",
    "memberof": "src/isosurface/Isosurface.js~Isosurface",
    "static": false,
    "longname": "src/isosurface/Isosurface.js~Isosurface#normals",
    "access": "public",
    "description": "A set of normals.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 203,
    "kind": "member",
    "name": "uvs",
    "memberof": "src/isosurface/Isosurface.js~Isosurface",
    "static": false,
    "longname": "src/isosurface/Isosurface.js~Isosurface#uvs",
    "access": "public",
    "description": "A set of UV coordinates.",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 204,
    "kind": "member",
    "name": "materials",
    "memberof": "src/isosurface/Isosurface.js~Isosurface",
    "static": false,
    "longname": "src/isosurface/Isosurface.js~Isosurface#materials",
    "access": "public",
    "description": "A set of material indices.",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "Uint8Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/isosurface/Isosurface.js~Isosurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/isosurface/Isosurface.js~Isosurface#serialize",
    "access": "public",
    "description": "Serialises this isosurface.",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "deflate",
        "description": "Whether the data should be compressed if possible."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The serialised data."
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "deserialize",
    "memberof": "src/isosurface/Isosurface.js~Isosurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/isosurface/Isosurface.js~Isosurface#deserialize",
    "access": "public",
    "description": "Adopts the given serialised isosurface.",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "A serialised isosurface. Can be null."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Deserializable"
      ],
      "spread": false,
      "description": "This object or null if the given serialised isosurface was null."
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "createTransferList",
    "memberof": "src/isosurface/Isosurface.js~Isosurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/isosurface/Isosurface.js~Isosurface#createTransferList",
    "access": "public",
    "description": "Creates a list of transferable items.",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "transferList",
        "description": "An optional target list. The transferable items will be added to this list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transferable[]"
      ],
      "spread": false,
      "description": "The transfer list."
    }
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "src/loaders/index.js",
    "content": "/**\r\n * A collection of loaders.\r\n *\r\n * @module rabbit-hole/loaders\r\n */\r\n\r\nexport { SDFLoader } from \"./SDFLoader.js\";\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/loaders/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "file",
    "name": "src/loaders/sdf-loader-events.js",
    "content": "import { SDFLoaderEvent } from \"../events/SDFLoaderEvent.js\";\r\n\r\n/**\r\n * A load event.\r\n *\r\n * This event is dispatched by {@link SDFLoader}.\r\n *\r\n * @type {SDFLoaderEvent}\r\n * @example sdfLoader.addEventListener(\"load\", myListener);\r\n */\r\n\r\nexport const load = new SDFLoaderEvent(\"load\");\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/loaders/sdf-loader-events.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 215,
    "kind": "variable",
    "name": "load",
    "memberof": "src/loaders/sdf-loader-events.js",
    "static": true,
    "longname": "src/loaders/sdf-loader-events.js~load",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/loaders/sdf-loader-events.js",
    "importStyle": "{load}",
    "description": "A load event.\n\nThis event is dispatched by {@link SDFLoader}.",
    "examples": [
      "sdfLoader.addEventListener(\"load\", myListener);"
    ],
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "SDFLoaderEvent"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 216,
    "kind": "file",
    "name": "src/loaders/SDFLoader.js",
    "content": "import { EventTarget } from \"synthetic-event\";\r\nimport * as events from \"./sdf-loader-events.js\";\r\n\r\n/**\r\n * An SDF loader.\r\n *\r\n * @implements {EventListener}\r\n */\r\n\r\nexport class SDFLoader extends EventTarget {\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * Indicates how many items still need to be loaded.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.items = 0;\r\n\r\n\t\t/**\r\n\t\t * A list of serialised SDFs.\r\n\t\t *\r\n\t\t * @type {Array}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.descriptions = null;\r\n\r\n\t\t/**\r\n\t\t * A collection that maps images to their respective serialised SDFs.\r\n\t\t *\r\n\t\t * @type {WeakMap}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.imageMap = new WeakMap();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Clears this loader.\r\n\t */\r\n\r\n\tclear() {\r\n\r\n\t\tthis.imageMap = new WeakMap();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles events.\r\n\t *\r\n\t * @param {Event} event - An event.\r\n\t */\r\n\r\n\thandleEvent(event) {\r\n\r\n\t\tswitch(event.type) {\r\n\r\n\t\t\tcase \"load\":\r\n\t\t\t\tthis.progress(event);\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Finishes a loading task.\r\n\t *\r\n\t * @param {Event} [event=null] - An event.\r\n\t */\r\n\r\n\tprogress(event = null) {\r\n\r\n\t\tconst item = (event !== null) ? event.target : null;\r\n\t\tconst imageMap = this.imageMap;\r\n\r\n\t\tlet description;\r\n\r\n\t\tif(item !== null) {\r\n\r\n\t\t\tif(imageMap.has(item)) {\r\n\r\n\t\t\t\tdescription = imageMap.get(item);\r\n\t\t\t\tdescription.image = item;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t--this.items;\r\n\r\n\t\t}\r\n\r\n\t\tif(this.items === 0) {\r\n\r\n\t\t\tthis.clear();\r\n\t\t\tevents.load.descriptions = this.descriptions;\r\n\t\t\tthis.dispatchEvent(events.load);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Loads an image data url for a given serialised SDF.\r\n\t *\r\n\t * @param {Object} description - A serialised SDF that contains an image data url.\r\n\t */\r\n\r\n\tloadImage(description) {\r\n\r\n\t\tconst image = new Image();\r\n\r\n\t\tthis.imageMap.set(image, description);\r\n\t\t++this.items;\r\n\r\n\t\timage.addEventListener(\"load\", this);\r\n\t\timage.src = description.dataURL;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Inflates the given serialised SDF.\r\n\t *\r\n\t * @private\r\n\t * @param {Object} description - A serialised SDF.\r\n\t */\r\n\r\n\tinflate(description) {\r\n\r\n\t\tlet child;\r\n\r\n\t\tif(description.dataURL !== null) {\r\n\r\n\t\t\t// The description contains compressed image data.\r\n\t\t\tthis.loadImage(description);\r\n\r\n\t\t}\r\n\r\n\t\tfor(child of description.children) {\r\n\r\n\t\t\tthis.inflate(child);\r\n\r\n\t\t}\r\n\r\n\t\tthis.progress();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Loads the given serialised SDFs but doesn't fully revive them.\r\n\t *\r\n\t * This loader will emit a `load` event when all SDFs have been inflated. The\r\n\t * descriptions can then safely be revived using the {@link SDFReviver}.\r\n\t *\r\n\t * @param {Array} descriptions - A list of serialised SDF. The individual descriptions will be inflated.\r\n\t */\r\n\r\n\tload(descriptions) {\r\n\r\n\t\tlet description;\r\n\r\n\t\tthis.items = 0;\r\n\t\tthis.descriptions = descriptions;\r\n\r\n\t\tfor(description of descriptions) {\r\n\r\n\t\t\tthis.inflate(description);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/loaders/SDFLoader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 217,
    "kind": "class",
    "name": "SDFLoader",
    "memberof": "src/loaders/SDFLoader.js",
    "static": true,
    "longname": "src/loaders/SDFLoader.js~SDFLoader",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/loaders/SDFLoader.js",
    "importStyle": "{SDFLoader}",
    "description": "An SDF loader.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "synthetic-event~EventTarget"
    ],
    "implements": [
      "EventListener"
    ]
  },
  {
    "__docId__": 218,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/loaders/SDFLoader.js~SDFLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/loaders/SDFLoader.js~SDFLoader#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "items",
    "memberof": "src/loaders/SDFLoader.js~SDFLoader",
    "static": false,
    "longname": "src/loaders/SDFLoader.js~SDFLoader#items",
    "access": "private",
    "description": "Indicates how many items still need to be loaded.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "descriptions",
    "memberof": "src/loaders/SDFLoader.js~SDFLoader",
    "static": false,
    "longname": "src/loaders/SDFLoader.js~SDFLoader#descriptions",
    "access": "private",
    "description": "A list of serialised SDFs.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "imageMap",
    "memberof": "src/loaders/SDFLoader.js~SDFLoader",
    "static": false,
    "longname": "src/loaders/SDFLoader.js~SDFLoader#imageMap",
    "access": "private",
    "description": "A collection that maps images to their respective serialised SDFs.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "WeakMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "clear",
    "memberof": "src/loaders/SDFLoader.js~SDFLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/loaders/SDFLoader.js~SDFLoader#clear",
    "access": "public",
    "description": "Clears this loader.",
    "lineNumber": 49,
    "params": [],
    "return": null
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "handleEvent",
    "memberof": "src/loaders/SDFLoader.js~SDFLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/loaders/SDFLoader.js~SDFLoader#handleEvent",
    "access": "public",
    "description": "Handles events.",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "An event."
      }
    ],
    "return": null
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "progress",
    "memberof": "src/loaders/SDFLoader.js~SDFLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/loaders/SDFLoader.js~SDFLoader#progress",
    "access": "public",
    "description": "Finishes a loading task.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "event",
        "description": "An event."
      }
    ],
    "return": null
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "loadImage",
    "memberof": "src/loaders/SDFLoader.js~SDFLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/loaders/SDFLoader.js~SDFLoader#loadImage",
    "access": "public",
    "description": "Loads an image data url for a given serialised SDF.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "A serialised SDF that contains an image data url."
      }
    ],
    "return": null
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "inflate",
    "memberof": "src/loaders/SDFLoader.js~SDFLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/loaders/SDFLoader.js~SDFLoader#inflate",
    "access": "private",
    "description": "Inflates the given serialised SDF.",
    "lineNumber": 134,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "A serialised SDF."
      }
    ],
    "return": null
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "load",
    "memberof": "src/loaders/SDFLoader.js~SDFLoader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/loaders/SDFLoader.js~SDFLoader#load",
    "access": "public",
    "description": "Loads the given serialised SDFs but doesn't fully revive them.\n\nThis loader will emit a `load` event when all SDFs have been inflated. The\ndescriptions can then safely be revived using the {@link SDFReviver}.",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "descriptions",
        "description": "A list of serialised SDF. The individual descriptions will be inflated."
      }
    ],
    "return": null
  },
  {
    "__docId__": 231,
    "kind": "file",
    "name": "src/math/Givens.js",
    "content": "import { Vector2 } from \"math-ds\";\r\n\r\n/**\r\n * Symmetric Givens coefficients.\r\n *\r\n * @type {Vector2}\r\n * @private\r\n */\r\n\r\nconst coefficients = new Vector2();\r\n\r\n/**\r\n * A collection of matrix rotation utilities.\r\n */\r\n\r\nexport class Givens {\r\n\r\n\t/**\r\n\t * Calculates symmetric Givens coefficients.\r\n\t *\r\n\t * @param {Number} aPP - PP.\r\n\t * @param {Number} aPQ - PQ.\r\n\t * @param {Number} aQQ - QQ.\r\n\t * @return {Vector2} The coefficients C and S.\r\n\t */\r\n\r\n\tstatic calculateCoefficients(aPP, aPQ, aQQ) {\r\n\r\n\t\tlet tau, stt, tan;\r\n\r\n\t\tif(aPQ === 0.0) {\r\n\r\n\t\t\tcoefficients.x = 1.0;\r\n\t\t\tcoefficients.y = 0.0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttau = (aQQ - aPP) / (2.0 * aPQ);\r\n\t\t\tstt = Math.sqrt(1.0 + tau * tau);\r\n\t\t\ttan = 1.0 / ((tau >= 0.0) ? (tau + stt) : (tau - stt));\r\n\r\n\t\t\tcoefficients.x = 1.0 / Math.sqrt(1.0 + tan * tan);\r\n\t\t\tcoefficients.y = tan * coefficients.x;\r\n\r\n\t\t}\r\n\r\n\t\treturn coefficients;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/math/Givens.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "variable",
    "name": "coefficients",
    "memberof": "src/math/Givens.js",
    "static": true,
    "longname": "src/math/Givens.js~coefficients",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/math/Givens.js",
    "importStyle": null,
    "description": "Symmetric Givens coefficients.",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "Vector2"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 233,
    "kind": "class",
    "name": "Givens",
    "memberof": "src/math/Givens.js",
    "static": true,
    "longname": "src/math/Givens.js~Givens",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/math/Givens.js",
    "importStyle": "{Givens}",
    "description": "A collection of matrix rotation utilities.",
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "calculateCoefficients",
    "memberof": "src/math/Givens.js~Givens",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Givens.js~Givens.calculateCoefficients",
    "access": "public",
    "description": "Calculates symmetric Givens coefficients.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aPP",
        "description": "PP."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aPQ",
        "description": "PQ."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "aQQ",
        "description": "QQ."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector2"
      ],
      "spread": false,
      "description": "The coefficients C and S."
    }
  },
  {
    "__docId__": 235,
    "kind": "file",
    "name": "src/math/index.js",
    "content": "/**\r\n * Mathematical system components.\r\n *\r\n * @module rabbit-hole/math\r\n */\r\n\r\nexport { SingularValueDecomposition } from \"./SingularValueDecomposition.js\";\r\nexport { Givens } from \"./Givens.js\";\r\nexport { Schur } from \"./Schur.js\";\r\n\r\nexport { QEFSolver } from \"./QEFSolver.js\";\r\nexport { QEFData } from \"./QEFData.js\";\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/math/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 236,
    "kind": "file",
    "name": "src/math/QEFData.js",
    "content": "import { SymmetricMatrix3, Vector3 } from \"math-ds\";\r\n\r\n/**\r\n * A data container for the QEF solver.\r\n */\r\n\r\nexport class QEFData {\r\n\r\n\t/**\r\n\t * Constructs a new QEF data container.\r\n\t */\r\n\r\n\tconstructor() {\r\n\r\n\t\t/**\r\n\t\t * A symmetric matrix.\r\n\t\t *\r\n\t\t * @type {SymmetricMatrix3}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.ata = new SymmetricMatrix3();\r\n\r\n\t\tthis.ata.set(\r\n\r\n\t\t\t0, 0, 0,\r\n\t\t\t0, 0,\r\n\t\t\t0\r\n\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * A vector.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.atb = new Vector3();\r\n\r\n\t\t/**\r\n\t\t * An accumulation of the surface intersection points.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.massPointSum = new Vector3();\r\n\r\n\t\t/**\r\n\t\t * The amount of accumulated surface intersection points.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.numPoints = 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the values of this data instance.\r\n\t *\r\n\t * @param {SymmetricMatrix3} ata - ATA.\r\n\t * @param {Vector3} atb - ATb.\r\n\t * @param {Vector3} massPointSum - The accumulated mass points.\r\n\t * @param {Vector3} numPoints - The number of mass points.\r\n\t * @return {QEFData} This data.\r\n\t */\r\n\r\n\tset(ata, atb, massPointSum, numPoints) {\r\n\r\n\t\tthis.ata.copy(ata);\r\n\t\tthis.atb.copy(atb);\r\n\r\n\t\tthis.massPointSum.copy(massPointSum);\r\n\t\tthis.numPoints = numPoints;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies values from a given data instance.\r\n\t *\r\n\t * @param {QEFData} d - The data to copy.\r\n\t * @return {QEFData} This data.\r\n\t */\r\n\r\n\tcopy(d) {\r\n\r\n\t\treturn this.set(d.ata, d.atb, d.massPointSum, d.numPoints);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the given surface intersection point and normal.\r\n\t *\r\n\t * @param {Vector3} p - An intersection point.\r\n\t * @param {Vector3} n - A surface intersection normal.\r\n\t */\r\n\r\n\tadd(p, n) {\r\n\r\n\t\tconst nx = n.x;\r\n\t\tconst ny = n.y;\r\n\t\tconst nz = n.z;\r\n\r\n\t\tconst b = p.dot(n);\r\n\r\n\t\tconst ata = this.ata.elements;\r\n\t\tconst atb = this.atb;\r\n\r\n\t\tata[0] += nx * nx;\r\n\t\tata[1] += nx * ny; ata[3] += ny * ny;\r\n\t\tata[2] += nx * nz; ata[4] += ny * nz; ata[5] += nz * nz;\r\n\r\n\t\tatb.x += b * nx;\r\n\t\tatb.y += b * ny;\r\n\t\tatb.z += b * nz;\r\n\r\n\t\tthis.massPointSum.add(p);\r\n\r\n\t\t++this.numPoints;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an entire data set.\r\n\t *\r\n\t * @param {QEFData} d - QEF data.\r\n\t */\r\n\r\n\taddData(d) {\r\n\r\n\t\tthis.ata.add(d.ata);\r\n\t\tthis.atb.add(d.atb);\r\n\r\n\t\tthis.massPointSum.add(d.massPointSum);\r\n\t\tthis.numPoints += d.numPoints;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Clears this data.\r\n\t */\r\n\r\n\tclear() {\r\n\r\n\t\tthis.ata.set(\r\n\r\n\t\t\t0, 0, 0,\r\n\t\t\t0, 0,\r\n\t\t\t0\r\n\r\n\t\t);\r\n\r\n\t\tthis.atb.set(0, 0, 0);\r\n\t\tthis.massPointSum.set(0, 0, 0);\r\n\t\tthis.numPoints = 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Clones this data.\r\n\t *\r\n\t * @return {QEFData} The cloned data.\r\n\t */\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy(this);\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/math/QEFData.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 237,
    "kind": "class",
    "name": "QEFData",
    "memberof": "src/math/QEFData.js",
    "static": true,
    "longname": "src/math/QEFData.js~QEFData",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/math/QEFData.js",
    "importStyle": "{QEFData}",
    "description": "A data container for the QEF solver.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 238,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/QEFData.js~QEFData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/QEFData.js~QEFData#constructor",
    "access": "public",
    "description": "Constructs a new QEF data container.",
    "lineNumber": 13
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "ata",
    "memberof": "src/math/QEFData.js~QEFData",
    "static": false,
    "longname": "src/math/QEFData.js~QEFData#ata",
    "access": "private",
    "description": "A symmetric matrix.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "SymmetricMatrix3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 240,
    "kind": "member",
    "name": "atb",
    "memberof": "src/math/QEFData.js~QEFData",
    "static": false,
    "longname": "src/math/QEFData.js~QEFData#atb",
    "access": "private",
    "description": "A vector.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 241,
    "kind": "member",
    "name": "massPointSum",
    "memberof": "src/math/QEFData.js~QEFData",
    "static": false,
    "longname": "src/math/QEFData.js~QEFData#massPointSum",
    "access": "private",
    "description": "An accumulation of the surface intersection points.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 242,
    "kind": "member",
    "name": "numPoints",
    "memberof": "src/math/QEFData.js~QEFData",
    "static": false,
    "longname": "src/math/QEFData.js~QEFData#numPoints",
    "access": "public",
    "description": "The amount of accumulated surface intersection points.",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "set",
    "memberof": "src/math/QEFData.js~QEFData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/QEFData.js~QEFData#set",
    "access": "public",
    "description": "Sets the values of this data instance.",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "SymmetricMatrix3"
        ],
        "spread": false,
        "optional": false,
        "name": "ata",
        "description": "ATA."
      },
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "atb",
        "description": "ATb."
      },
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "massPointSum",
        "description": "The accumulated mass points."
      },
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "numPoints",
        "description": "The number of mass points."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "QEFData"
      ],
      "spread": false,
      "description": "This data."
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "copy",
    "memberof": "src/math/QEFData.js~QEFData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/QEFData.js~QEFData#copy",
    "access": "public",
    "description": "Copies values from a given data instance.",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "QEFData"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": "The data to copy."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "QEFData"
      ],
      "spread": false,
      "description": "This data."
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "add",
    "memberof": "src/math/QEFData.js~QEFData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/QEFData.js~QEFData#add",
    "access": "public",
    "description": "Adds the given surface intersection point and normal.",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "An intersection point."
      },
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "A surface intersection normal."
      }
    ],
    "return": null
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "addData",
    "memberof": "src/math/QEFData.js~QEFData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/QEFData.js~QEFData#addData",
    "access": "public",
    "description": "Adds an entire data set.",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "QEFData"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": "QEF data."
      }
    ],
    "return": null
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "clear",
    "memberof": "src/math/QEFData.js~QEFData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/QEFData.js~QEFData#clear",
    "access": "public",
    "description": "Clears this data.",
    "lineNumber": 147,
    "params": [],
    "return": null
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "clone",
    "memberof": "src/math/QEFData.js~QEFData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/QEFData.js~QEFData#clone",
    "access": "public",
    "description": "Clones this data.",
    "lineNumber": 169,
    "return": {
      "nullable": null,
      "types": [
        "QEFData"
      ],
      "spread": false,
      "description": "The cloned data."
    },
    "params": []
  },
  {
    "__docId__": 252,
    "kind": "file",
    "name": "src/math/QEFSolver.js",
    "content": "import { SymmetricMatrix3, Vector3 } from \"math-ds\";\r\nimport { SingularValueDecomposition } from \"./SingularValueDecomposition.js\";\r\n\r\n/**\r\n * A point.\r\n *\r\n * @type {Vector3}\r\n * @private\r\n */\r\n\r\nconst p = new Vector3();\r\n\r\n/**\r\n * Computes the error of the approximated position.\r\n *\r\n * @private\r\n * @param {SymmetricMatrix3} ata - ATA.\r\n * @param {Vector3} atb - ATb.\r\n * @param {Vector3} x - The calculated vertex position.\r\n * @return {Number} The QEF error.\r\n */\r\n\r\nfunction calculateError(ata, atb, x) {\r\n\r\n\tata.applyToVector3(p.copy(x));\r\n\tp.subVectors(atb, p);\r\n\r\n\treturn p.dot(p);\r\n\r\n}\r\n\r\n/**\r\n * A Quaratic Error Function solver.\r\n *\r\n * Finds a point inside a voxel that minimises the sum of the squares of the\r\n * distances to the surface intersection planes associated with the voxel.\r\n *\r\n * Based on an implementation by Leonard Ritter and Nick Gildea:\r\n *  https://github.com/nickgildea/qef\r\n */\r\n\r\nexport class QEFSolver {\r\n\r\n\t/**\r\n\t * Constructs a new QEF solver.\r\n\t */\r\n\r\n\tconstructor() {\r\n\r\n\t\t/**\r\n\t\t * QEF data. Will be used destructively.\r\n\t\t *\r\n\t\t * @type {QEFData}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.data = null;\r\n\r\n\t\t/**\r\n\t\t * ATA.\r\n\t\t *\r\n\t\t * @type {SymmetricMatrix3}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.ata = new SymmetricMatrix3();\r\n\r\n\t\t/**\r\n\t\t * ATb.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.atb = new Vector3();\r\n\r\n\t\t/**\r\n\t\t * The mass point of the current QEF data set.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\r\n\t\tthis.massPoint = new Vector3();\r\n\r\n\t\t/**\r\n\t\t * Indicates whether this solver has a solution.\r\n\t\t *\r\n\t\t * @type {Boolean}\r\n\t\t */\r\n\r\n\t\tthis.hasSolution = false;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the QEF data.\r\n\t *\r\n\t * @param {QEFData} d - QEF Data.\r\n\t * @return {QEFSolver} This solver.\r\n\t */\r\n\r\n\tsetData(d) {\r\n\r\n\t\tthis.data = d;\r\n\t\tthis.hasSolution = false;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Solves the Quadratic Error Function.\r\n\t *\r\n\t * @param {Vector3} x - A target vector to store the vertex position in.\r\n\t * @return {Number} The quadratic error of the solution.\r\n\t */\r\n\r\n\tsolve(x) {\r\n\r\n\t\tconst data = this.data;\r\n\t\tconst massPoint = this.massPoint;\r\n\t\tconst ata = this.ata.copy(data.ata);\r\n\t\tconst atb = this.atb.copy(data.atb);\r\n\r\n\t\tlet error = Infinity;\r\n\r\n\t\tif(!this.hasSolution && data !== null && data.numPoints > 0) {\r\n\r\n\t\t\t// Divide the mass point sum to get the average.\r\n\t\t\tp.copy(data.massPointSum).divideScalar(data.numPoints);\r\n\t\t\tmassPoint.copy(p);\r\n\r\n\t\t\tata.applyToVector3(p);\r\n\t\t\tatb.sub(p);\r\n\r\n\t\t\tSingularValueDecomposition.solve(ata, atb, x);\r\n\t\t\terror = calculateError(ata, atb, x);\r\n\t\t\tx.add(massPoint);\r\n\r\n\t\t\tthis.hasSolution = true;\r\n\r\n\t\t}\r\n\r\n\t\treturn error;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/math/QEFSolver.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 253,
    "kind": "variable",
    "name": "p",
    "memberof": "src/math/QEFSolver.js",
    "static": true,
    "longname": "src/math/QEFSolver.js~p",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/math/QEFSolver.js",
    "importStyle": null,
    "description": "A point.",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 254,
    "kind": "function",
    "name": "calculateError",
    "memberof": "src/math/QEFSolver.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/QEFSolver.js~calculateError",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/math/QEFSolver.js",
    "importStyle": null,
    "description": "Computes the error of the approximated position.",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "SymmetricMatrix3"
        ],
        "spread": false,
        "optional": false,
        "name": "ata",
        "description": "ATA."
      },
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "atb",
        "description": "ATb."
      },
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The calculated vertex position."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The QEF error."
    },
    "ignore": true
  },
  {
    "__docId__": 255,
    "kind": "class",
    "name": "QEFSolver",
    "memberof": "src/math/QEFSolver.js",
    "static": true,
    "longname": "src/math/QEFSolver.js~QEFSolver",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/math/QEFSolver.js",
    "importStyle": "{QEFSolver}",
    "description": "A Quaratic Error Function solver.\n\nFinds a point inside a voxel that minimises the sum of the squares of the\ndistances to the surface intersection planes associated with the voxel.\n\nBased on an implementation by Leonard Ritter and Nick Gildea:\n https://github.com/nickgildea/qef",
    "lineNumber": 42,
    "interface": false
  },
  {
    "__docId__": 256,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/math/QEFSolver.js~QEFSolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/QEFSolver.js~QEFSolver#constructor",
    "access": "public",
    "description": "Constructs a new QEF solver.",
    "lineNumber": 48
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "data",
    "memberof": "src/math/QEFSolver.js~QEFSolver",
    "static": false,
    "longname": "src/math/QEFSolver.js~QEFSolver#data",
    "access": "private",
    "description": "QEF data. Will be used destructively.",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "QEFData"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "ata",
    "memberof": "src/math/QEFSolver.js~QEFSolver",
    "static": false,
    "longname": "src/math/QEFSolver.js~QEFSolver#ata",
    "access": "private",
    "description": "ATA.",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "SymmetricMatrix3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "atb",
    "memberof": "src/math/QEFSolver.js~QEFSolver",
    "static": false,
    "longname": "src/math/QEFSolver.js~QEFSolver#atb",
    "access": "private",
    "description": "ATb.",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 260,
    "kind": "member",
    "name": "massPoint",
    "memberof": "src/math/QEFSolver.js~QEFSolver",
    "static": false,
    "longname": "src/math/QEFSolver.js~QEFSolver#massPoint",
    "access": "public",
    "description": "The mass point of the current QEF data set.",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "hasSolution",
    "memberof": "src/math/QEFSolver.js~QEFSolver",
    "static": false,
    "longname": "src/math/QEFSolver.js~QEFSolver#hasSolution",
    "access": "public",
    "description": "Indicates whether this solver has a solution.",
    "lineNumber": 91,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "setData",
    "memberof": "src/math/QEFSolver.js~QEFSolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/QEFSolver.js~QEFSolver#setData",
    "access": "public",
    "description": "Sets the QEF data.",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "QEFData"
        ],
        "spread": false,
        "optional": false,
        "name": "d",
        "description": "QEF Data."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "QEFSolver"
      ],
      "spread": false,
      "description": "This solver."
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "solve",
    "memberof": "src/math/QEFSolver.js~QEFSolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/math/QEFSolver.js~QEFSolver#solve",
    "access": "public",
    "description": "Solves the Quadratic Error Function.",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "A target vector to store the vertex position in."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The quadratic error of the solution."
    }
  },
  {
    "__docId__": 267,
    "kind": "file",
    "name": "src/math/Schur.js",
    "content": "/**\r\n * A collection of matrix rotation utilities.\r\n */\r\n\r\nexport class Schur {\r\n\r\n\t/**\r\n\t * Rotates the given matrix.\r\n\t *\r\n\t * @param {Vector2} a - The vector that should be rotated.\r\n\t * @param {Vector2} coefficients - Givens coefficients.\r\n\t */\r\n\r\n\tstatic rotateXY(a, coefficients) {\r\n\r\n\t\tconst c = coefficients.x;\r\n\t\tconst s = coefficients.y;\r\n\r\n\t\tconst u = a.x;\r\n\t\tconst v = a.y;\r\n\r\n\t\ta.set(\r\n\t\t\tc * u - s * v,\r\n\t\t\ts * u + c * v\r\n\t\t);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Rotates the given matrix.\r\n\t *\r\n\t * @param {Vector2} a - The vector that should be rotated.\r\n\t * @param {Vector2} q - A coefficient factor.\r\n\t * @param {Vector2} coefficients - Givens coefficients.\r\n\t */\r\n\r\n\tstatic rotateQXY(a, q, coefficients) {\r\n\r\n\t\tconst c = coefficients.x;\r\n\t\tconst s = coefficients.y;\r\n\t\tconst cc = c * c;\r\n\t\tconst ss = s * s;\r\n\r\n\t\tconst mx = 2.0 * c * s * q;\r\n\r\n\t\tconst u = a.x;\r\n\t\tconst v = a.y;\r\n\r\n\t\ta.set(\r\n\t\t\tcc * u - mx + ss * v,\r\n\t\t\tss * u + mx + cc * v\r\n\t\t);\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/math/Schur.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 268,
    "kind": "class",
    "name": "Schur",
    "memberof": "src/math/Schur.js",
    "static": true,
    "longname": "src/math/Schur.js~Schur",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/math/Schur.js",
    "importStyle": "{Schur}",
    "description": "A collection of matrix rotation utilities.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "rotateXY",
    "memberof": "src/math/Schur.js~Schur",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Schur.js~Schur.rotateXY",
    "access": "public",
    "description": "Rotates the given matrix.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector2"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "The vector that should be rotated."
      },
      {
        "nullable": null,
        "types": [
          "Vector2"
        ],
        "spread": false,
        "optional": false,
        "name": "coefficients",
        "description": "Givens coefficients."
      }
    ],
    "return": null
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "rotateQXY",
    "memberof": "src/math/Schur.js~Schur",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/Schur.js~Schur.rotateQXY",
    "access": "public",
    "description": "Rotates the given matrix.",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector2"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "The vector that should be rotated."
      },
      {
        "nullable": null,
        "types": [
          "Vector2"
        ],
        "spread": false,
        "optional": false,
        "name": "q",
        "description": "A coefficient factor."
      },
      {
        "nullable": null,
        "types": [
          "Vector2"
        ],
        "spread": false,
        "optional": false,
        "name": "coefficients",
        "description": "Givens coefficients."
      }
    ],
    "return": null
  },
  {
    "__docId__": 271,
    "kind": "file",
    "name": "src/math/SingularValueDecomposition.js",
    "content": "import { Matrix3, SymmetricMatrix3, Vector2, Vector3 } from \"math-ds\";\r\nimport { Givens } from \"./Givens.js\";\r\nimport { Schur } from \"./Schur.js\";\r\n\r\n/**\r\n * A threshold for pseudo inversions.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\n\r\nconst PSEUDOINVERSE_THRESHOLD = 1e-1;\r\n\r\n/**\r\n * The number of SVD sweeps.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\n\r\nconst SVD_SWEEPS = 5;\r\n\r\n/**\r\n * A symmetric matrix.\r\n *\r\n * @type {SymmetricMatrix3}\r\n * @private\r\n */\r\n\r\nconst sm = new SymmetricMatrix3();\r\n\r\n/**\r\n * A matrix.\r\n *\r\n * @type {Matrix3}\r\n * @private\r\n */\r\n\r\nconst m = new Matrix3();\r\n\r\n/**\r\n * A vector.\r\n *\r\n * @type {Vector2}\r\n * @private\r\n */\r\n\r\nconst a = new Vector2();\r\n\r\n/**\r\n * A vector that holds the singular values.\r\n *\r\n * @type {Vector3}\r\n * @private\r\n */\r\n\r\nconst b = new Vector3();\r\n\r\n/**\r\n * Rotates the matrix element from the first row, second column.\r\n *\r\n * @private\r\n * @param {SymmetricMatrix3} vtav - A symmetric matrix.\r\n * @param {Matrix3} v - A matrix.\r\n */\r\n\r\nfunction rotate01(vtav, v) {\r\n\r\n\tconst se = vtav.elements;\r\n\tconst ve = v.elements;\r\n\r\n\tlet coefficients;\r\n\r\n\tif(se[1] !== 0.0) {\r\n\r\n\t\tcoefficients = Givens.calculateCoefficients(se[0], se[1], se[3]);\r\n\r\n\t\tSchur.rotateQXY(a.set(se[0], se[3]), se[1], coefficients);\r\n\t\tse[0] = a.x; se[3] = a.y;\r\n\r\n\t\tSchur.rotateXY(a.set(se[2], se[4]), coefficients);\r\n\t\tse[2] = a.x; se[4] = a.y;\r\n\r\n\t\tse[1] = 0.0;\r\n\r\n\t\tSchur.rotateXY(a.set(ve[0], ve[3]), coefficients);\r\n\t\tve[0] = a.x; ve[3] = a.y;\r\n\r\n\t\tSchur.rotateXY(a.set(ve[1], ve[4]), coefficients);\r\n\t\tve[1] = a.x; ve[4] = a.y;\r\n\r\n\t\tSchur.rotateXY(a.set(ve[2], ve[5]), coefficients);\r\n\t\tve[2] = a.x; ve[5] = a.y;\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Rotates the matrix element from the first row, third column.\r\n *\r\n * @private\r\n * @param {SymmetricMatrix3} vtav - A symmetric matrix.\r\n * @param {Matrix3} v - A matrix.\r\n */\r\n\r\nfunction rotate02(vtav, v) {\r\n\r\n\tconst se = vtav.elements;\r\n\tconst ve = v.elements;\r\n\r\n\tlet coefficients;\r\n\r\n\tif(se[2] !== 0.0) {\r\n\r\n\t\tcoefficients = Givens.calculateCoefficients(se[0], se[2], se[5]);\r\n\r\n\t\tSchur.rotateQXY(a.set(se[0], se[5]), se[2], coefficients);\r\n\t\tse[0] = a.x; se[5] = a.y;\r\n\r\n\t\tSchur.rotateXY(a.set(se[1], se[4]), coefficients);\r\n\t\tse[1] = a.x; se[4] = a.y;\r\n\r\n\t\tse[2] = 0.0;\r\n\r\n\t\tSchur.rotateXY(a.set(ve[0], ve[6]), coefficients);\r\n\t\tve[0] = a.x; ve[6] = a.y;\r\n\r\n\t\tSchur.rotateXY(a.set(ve[1], ve[7]), coefficients);\r\n\t\tve[1] = a.x; ve[7] = a.y;\r\n\r\n\t\tSchur.rotateXY(a.set(ve[2], ve[8]), coefficients);\r\n\t\tve[2] = a.x; ve[8] = a.y;\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Rotates the matrix element from the second row, third column.\r\n *\r\n * @private\r\n * @param {SymmetricMatrix3} vtav - A symmetric matrix.\r\n * @param {Matrix3} v - A matrix.\r\n */\r\n\r\nfunction rotate12(vtav, v) {\r\n\r\n\tconst se = vtav.elements;\r\n\tconst ve = v.elements;\r\n\r\n\tlet coefficients;\r\n\r\n\tif(se[4] !== 0.0) {\r\n\r\n\t\tcoefficients = Givens.calculateCoefficients(se[3], se[4], se[5]);\r\n\r\n\t\tSchur.rotateQXY(a.set(se[3], se[5]), se[4], coefficients);\r\n\t\tse[3] = a.x; se[5] = a.y;\r\n\r\n\t\tSchur.rotateXY(a.set(se[1], se[2]), coefficients);\r\n\t\tse[1] = a.x; se[2] = a.y;\r\n\r\n\t\tse[4] = 0.0;\r\n\r\n\t\tSchur.rotateXY(a.set(ve[3], ve[6]), coefficients);\r\n\t\tve[3] = a.x; ve[6] = a.y;\r\n\r\n\t\tSchur.rotateXY(a.set(ve[4], ve[7]), coefficients);\r\n\t\tve[4] = a.x; ve[7] = a.y;\r\n\r\n\t\tSchur.rotateXY(a.set(ve[5], ve[8]), coefficients);\r\n\t\tve[5] = a.x; ve[8] = a.y;\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Calculates the singular values.\r\n *\r\n * @private\r\n * @param {SymmetricMatrix3} vtav - A symmetric matrix.\r\n * @param {Matrix3} v - An identity matrix.\r\n * @return {Vector3} The singular values.\r\n */\r\n\r\nfunction solveSymmetric(vtav, v) {\r\n\r\n\tconst e = vtav.elements;\r\n\r\n\tlet i;\r\n\r\n\tfor(i = 0; i < SVD_SWEEPS; ++i) {\r\n\r\n\t\t// Rotate the upper right (lower left) triagonal.\r\n\t\trotate01(vtav, v);\r\n\t\trotate02(vtav, v);\r\n\t\trotate12(vtav, v);\r\n\r\n\t}\r\n\r\n\treturn b.set(e[0], e[3], e[5]);\r\n\r\n}\r\n\r\n/**\r\n * Computes the pseudo inverse of a given value.\r\n *\r\n * @private\r\n * @param {Number} x - The value to invert.\r\n * @return {Number} The inverted value.\r\n */\r\n\r\nfunction invert(x) {\r\n\r\n\tconst invX = (Math.abs(x) < PSEUDOINVERSE_THRESHOLD) ? 0.0 : 1.0 / x;\r\n\r\n\treturn (Math.abs(invX) < PSEUDOINVERSE_THRESHOLD) ? 0.0 : invX;\r\n\r\n}\r\n\r\n/**\r\n * Calculates the pseudo inverse of v using the singular values.\r\n *\r\n * @private\r\n * @param {Matrix3} v - A matrix.\r\n * @param {Vector3} sigma - The singular values.\r\n * @return {Matrix3} The inverted matrix.\r\n */\r\n\r\nfunction pseudoInverse(v, sigma) {\r\n\r\n\tconst ve = v.elements;\r\n\r\n\tconst v00 = ve[0], v01 = ve[3], v02 = ve[6];\r\n\tconst v10 = ve[1], v11 = ve[4], v12 = ve[7];\r\n\tconst v20 = ve[2], v21 = ve[5], v22 = ve[8];\r\n\r\n\tconst d0 = invert(sigma.x);\r\n\tconst d1 = invert(sigma.y);\r\n\tconst d2 = invert(sigma.z);\r\n\r\n\treturn v.set(\r\n\r\n\t\t// First row.\r\n\t\tv00 * d0 * v00 + v01 * d1 * v01 + v02 * d2 * v02,\r\n\t\tv00 * d0 * v10 + v01 * d1 * v11 + v02 * d2 * v12,\r\n\t\tv00 * d0 * v20 + v01 * d1 * v21 + v02 * d2 * v22,\r\n\r\n\t\t// Second row.\r\n\t\tv10 * d0 * v00 + v11 * d1 * v01 + v12 * d2 * v02,\r\n\t\tv10 * d0 * v10 + v11 * d1 * v11 + v12 * d2 * v12,\r\n\t\tv10 * d0 * v20 + v11 * d1 * v21 + v12 * d2 * v22,\r\n\r\n\t\t// Third row.\r\n\t\tv20 * d0 * v00 + v21 * d1 * v01 + v22 * d2 * v02,\r\n\t\tv20 * d0 * v10 + v21 * d1 * v11 + v22 * d2 * v12,\r\n\t\tv20 * d0 * v20 + v21 * d1 * v21 + v22 * d2 * v22\r\n\r\n\t);\r\n\r\n}\r\n\r\n/**\r\n * A Singular Value Decomposition solver.\r\n *\r\n * Decomposes the given linear system into the matrices U, D and V and solves\r\n * the equation: U D V^T x = b.\r\n *\r\n * See http://mathworld.wolfram.com/SingularValueDecomposition.html for more\r\n * information.\r\n */\r\n\r\nexport class SingularValueDecomposition {\r\n\r\n\t/**\r\n\t * Performs the Singular Value Decomposition to solve the given linear system.\r\n\t *\r\n\t * @param {SymmetricMatrix3} ata - ATA. Will not be modified.\r\n\t * @param {Vector3} atb - ATb. Will not be modified.\r\n\t * @param {Vector3} x - A target vector to store the result in.\r\n\t */\r\n\r\n\tstatic solve(ata, atb, x) {\r\n\r\n\t\tconst sigma = solveSymmetric(sm.copy(ata), m.identity());\r\n\t\tconst invV = pseudoInverse(m, sigma);\r\n\r\n\t\tx.copy(atb).applyMatrix3(invV);\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/math/SingularValueDecomposition.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 272,
    "kind": "variable",
    "name": "PSEUDOINVERSE_THRESHOLD",
    "memberof": "src/math/SingularValueDecomposition.js",
    "static": true,
    "longname": "src/math/SingularValueDecomposition.js~PSEUDOINVERSE_THRESHOLD",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/math/SingularValueDecomposition.js",
    "importStyle": null,
    "description": "A threshold for pseudo inversions.",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 273,
    "kind": "variable",
    "name": "SVD_SWEEPS",
    "memberof": "src/math/SingularValueDecomposition.js",
    "static": true,
    "longname": "src/math/SingularValueDecomposition.js~SVD_SWEEPS",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/math/SingularValueDecomposition.js",
    "importStyle": null,
    "description": "The number of SVD sweeps.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 274,
    "kind": "variable",
    "name": "sm",
    "memberof": "src/math/SingularValueDecomposition.js",
    "static": true,
    "longname": "src/math/SingularValueDecomposition.js~sm",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/math/SingularValueDecomposition.js",
    "importStyle": null,
    "description": "A symmetric matrix.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "SymmetricMatrix3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 275,
    "kind": "variable",
    "name": "m",
    "memberof": "src/math/SingularValueDecomposition.js",
    "static": true,
    "longname": "src/math/SingularValueDecomposition.js~m",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/math/SingularValueDecomposition.js",
    "importStyle": null,
    "description": "A matrix.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Matrix3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 276,
    "kind": "variable",
    "name": "a",
    "memberof": "src/math/SingularValueDecomposition.js",
    "static": true,
    "longname": "src/math/SingularValueDecomposition.js~a",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/math/SingularValueDecomposition.js",
    "importStyle": null,
    "description": "A vector.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Vector2"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 277,
    "kind": "variable",
    "name": "b",
    "memberof": "src/math/SingularValueDecomposition.js",
    "static": true,
    "longname": "src/math/SingularValueDecomposition.js~b",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/math/SingularValueDecomposition.js",
    "importStyle": null,
    "description": "A vector that holds the singular values.",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 278,
    "kind": "function",
    "name": "rotate01",
    "memberof": "src/math/SingularValueDecomposition.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/SingularValueDecomposition.js~rotate01",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/math/SingularValueDecomposition.js",
    "importStyle": null,
    "description": "Rotates the matrix element from the first row, second column.",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "SymmetricMatrix3"
        ],
        "spread": false,
        "optional": false,
        "name": "vtav",
        "description": "A symmetric matrix."
      },
      {
        "nullable": null,
        "types": [
          "Matrix3"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "A matrix."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 279,
    "kind": "function",
    "name": "rotate02",
    "memberof": "src/math/SingularValueDecomposition.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/SingularValueDecomposition.js~rotate02",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/math/SingularValueDecomposition.js",
    "importStyle": null,
    "description": "Rotates the matrix element from the first row, third column.",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "SymmetricMatrix3"
        ],
        "spread": false,
        "optional": false,
        "name": "vtav",
        "description": "A symmetric matrix."
      },
      {
        "nullable": null,
        "types": [
          "Matrix3"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "A matrix."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 280,
    "kind": "function",
    "name": "rotate12",
    "memberof": "src/math/SingularValueDecomposition.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/SingularValueDecomposition.js~rotate12",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/math/SingularValueDecomposition.js",
    "importStyle": null,
    "description": "Rotates the matrix element from the second row, third column.",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "SymmetricMatrix3"
        ],
        "spread": false,
        "optional": false,
        "name": "vtav",
        "description": "A symmetric matrix."
      },
      {
        "nullable": null,
        "types": [
          "Matrix3"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "A matrix."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 281,
    "kind": "function",
    "name": "solveSymmetric",
    "memberof": "src/math/SingularValueDecomposition.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/SingularValueDecomposition.js~solveSymmetric",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/math/SingularValueDecomposition.js",
    "importStyle": null,
    "description": "Calculates the singular values.",
    "lineNumber": 188,
    "params": [
      {
        "nullable": null,
        "types": [
          "SymmetricMatrix3"
        ],
        "spread": false,
        "optional": false,
        "name": "vtav",
        "description": "A symmetric matrix."
      },
      {
        "nullable": null,
        "types": [
          "Matrix3"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "An identity matrix."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": "The singular values."
    },
    "ignore": true
  },
  {
    "__docId__": 282,
    "kind": "function",
    "name": "invert",
    "memberof": "src/math/SingularValueDecomposition.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/SingularValueDecomposition.js~invert",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/math/SingularValueDecomposition.js",
    "importStyle": null,
    "description": "Computes the pseudo inverse of a given value.",
    "lineNumber": 215,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The value to invert."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The inverted value."
    },
    "ignore": true
  },
  {
    "__docId__": 283,
    "kind": "function",
    "name": "pseudoInverse",
    "memberof": "src/math/SingularValueDecomposition.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/SingularValueDecomposition.js~pseudoInverse",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/math/SingularValueDecomposition.js",
    "importStyle": null,
    "description": "Calculates the pseudo inverse of v using the singular values.",
    "lineNumber": 232,
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix3"
        ],
        "spread": false,
        "optional": false,
        "name": "v",
        "description": "A matrix."
      },
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "sigma",
        "description": "The singular values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix3"
      ],
      "spread": false,
      "description": "The inverted matrix."
    },
    "ignore": true
  },
  {
    "__docId__": 284,
    "kind": "class",
    "name": "SingularValueDecomposition",
    "memberof": "src/math/SingularValueDecomposition.js",
    "static": true,
    "longname": "src/math/SingularValueDecomposition.js~SingularValueDecomposition",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/math/SingularValueDecomposition.js",
    "importStyle": "{SingularValueDecomposition}",
    "description": "A Singular Value Decomposition solver.\n\nDecomposes the given linear system into the matrices U, D and V and solves\nthe equation: U D V^T x = b.\n\nSee http://mathworld.wolfram.com/SingularValueDecomposition.html for more\ninformation.",
    "lineNumber": 275,
    "interface": false
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "solve",
    "memberof": "src/math/SingularValueDecomposition.js~SingularValueDecomposition",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/math/SingularValueDecomposition.js~SingularValueDecomposition.solve",
    "access": "public",
    "description": "Performs the Singular Value Decomposition to solve the given linear system.",
    "lineNumber": 285,
    "params": [
      {
        "nullable": null,
        "types": [
          "SymmetricMatrix3"
        ],
        "spread": false,
        "optional": false,
        "name": "ata",
        "description": "ATA. Will not be modified."
      },
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "atb",
        "description": "ATb. Will not be modified."
      },
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "A target vector to store the result in."
      }
    ],
    "return": null
  },
  {
    "__docId__": 286,
    "kind": "file",
    "name": "src/octree/index.js",
    "content": "/**\r\n * Space partitioning components.\r\n *\r\n * @module rabbit-hole/octree\r\n */\r\n\r\nexport {\r\n\tSparseVoxelOctree,\r\n\tVoxelCell\r\n} from \"./voxel\";\r\n\r\nexport {\r\n\tIntermediateWorldOctant,\r\n\tKeyDesign,\r\n\tKeyIterator,\r\n\tWorldOctant,\r\n\tWorldOctantId,\r\n\tWorldOctantIterator,\r\n\tWorldOctantWrapper,\r\n\tWorldOctree,\r\n\tWorldOctreeCSG,\r\n\tWorldOctreeRaycaster\r\n} from \"./world\";\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/octree/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 287,
    "kind": "file",
    "name": "src/octree/voxel/index.js",
    "content": "/**\r\n * Space partitioning components used for contouring.\r\n *\r\n * @module rabbit-hole/octree/voxel\r\n */\r\n\r\nexport { SparseVoxelOctree } from \"./SparseVoxelOctree.js\";\r\nexport { VoxelCell } from \"./VoxelCell.js\";\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/octree/voxel/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 288,
    "kind": "file",
    "name": "src/octree/voxel/SparseVoxelOctree.js",
    "content": "import { Octree, pattern, edges } from \"sparse-octree\";\r\nimport { Vector3 } from \"math-ds\";\r\nimport { QEFData } from \"../../math/QEFData.js\";\r\nimport { QEFSolver } from \"../../math/QEFSolver.js\";\r\nimport { HermiteData } from \"../../volume/HermiteData.js\";\r\nimport { Material } from \"../../volume/Material.js\";\r\nimport { Voxel } from \"../../volume/Voxel.js\";\r\nimport { VoxelCell } from \"./VoxelCell.js\";\r\n\r\n/**\r\n * Creates intermediate voxel cells down to the leaf octant that is described\r\n * by the given local grid coordinates and returns it.\r\n *\r\n * @private\r\n * @param {VoxelCell} cell - The root octant.\r\n * @param {Number} n - The grid resolution.\r\n * @param {Number} x - A local grid point X-coordinate.\r\n * @param {Number} y - A local grid point Y-coordinate.\r\n * @param {Number} z - A local grid point Z-coordinate.\r\n * @return {VoxelCell} A leaf voxel cell.\r\n */\r\n\r\nfunction getCell(cell, n, x, y, z) {\r\n\r\n\tlet i = 0;\r\n\r\n\tfor(n = n >> 1; n > 0; n >>= 1, i = 0) {\r\n\r\n\t\t// YZ.\r\n\t\tif(x >= n) {\r\n\r\n\t\t\ti += 4; x -= n;\r\n\r\n\t\t}\r\n\r\n\t\t// XZ.\r\n\t\tif(y >= n) {\r\n\r\n\t\t\ti += 2; y -= n;\r\n\r\n\t\t}\r\n\r\n\t\t// XY.\r\n\t\tif(z >= n) {\r\n\r\n\t\t\ti += 1; z -= n;\r\n\r\n\t\t}\r\n\r\n\t\tif(cell.children === null) {\r\n\r\n\t\t\tcell.split();\r\n\r\n\t\t}\r\n\r\n\t\tcell = cell.children[i];\r\n\r\n\t}\r\n\r\n\treturn cell;\r\n\r\n}\r\n\r\n/**\r\n * Creates a voxel and builds a material configuration code from the materials\r\n * in the voxel corners.\r\n *\r\n * @private\r\n * @param {Number} n - The grid resolution.\r\n * @param {Number} x - A local grid point X-coordinate.\r\n * @param {Number} y - A local grid point Y-coordinate.\r\n * @param {Number} z - A local grid point Z-coordinate.\r\n * @param {Uint8Array} materialIndices - The material indices.\r\n * @return {Voxel} A voxel.\r\n */\r\n\r\nfunction createVoxel(n, x, y, z, materialIndices) {\r\n\r\n\tconst m = n + 1;\r\n\tconst mm = m * m;\r\n\r\n\tconst voxel = new Voxel();\r\n\r\n\tlet materials, edgeCount;\r\n\tlet material, offset, index;\r\n\tlet c1, c2, m1, m2;\r\n\r\n\tlet i;\r\n\r\n\t// Pack the material information of the eight corners into a single byte.\r\n\tfor(materials = 0, i = 0; i < 8; ++i) {\r\n\r\n\t\t// Translate the coordinates into a one-dimensional grid point index.\r\n\t\toffset = pattern[i];\r\n\t\tindex = (z + offset[2]) * mm + (y + offset[1]) * m + (x + offset[0]);\r\n\r\n\t\t// Convert the identified material index into a binary value.\r\n\t\tmaterial = Math.min(materialIndices[index], Material.SOLID);\r\n\r\n\t\t// Store the value in bit i.\r\n\t\tmaterials |= (material << i);\r\n\r\n\t}\r\n\r\n\t// Find out how many edges intersect with the implicit surface.\r\n\tfor(edgeCount = 0, i = 0; i < 12; ++i) {\r\n\r\n\t\tc1 = edges[i][0];\r\n\t\tc2 = edges[i][1];\r\n\r\n\t\tm1 = (materials >> c1) & 1;\r\n\t\tm2 = (materials >> c2) & 1;\r\n\r\n\t\t// Check if there is a material change on the edge.\r\n\t\tif(m1 !== m2) {\r\n\r\n\t\t\t++edgeCount;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvoxel.materials = materials;\r\n\tvoxel.edgeCount = edgeCount;\r\n\tvoxel.qefData = new QEFData();\r\n\r\n\treturn voxel;\r\n\r\n}\r\n\r\n/**\r\n * A sparse, cubic voxel octree.\r\n */\r\n\r\nexport class SparseVoxelOctree extends Octree {\r\n\r\n\t/**\r\n\t * Constructs a new voxel octree.\r\n\t *\r\n\t * @param {HermiteData} data - A set of volume data.\r\n\t * @param {Vector3} [min] - The lower bounds of this octree.\r\n\t * @param {Number} [size=1] - The size of this octree.\r\n\t */\r\n\r\n\tconstructor(data, min = new Vector3(), size = 1) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The root octant.\r\n\t\t *\r\n\t\t * @type {VoxelCell}\r\n\t\t */\r\n\r\n\t\tthis.root = new VoxelCell(min, size);\r\n\r\n\t\t/**\r\n\t\t * The amount of voxels in this octree.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.voxelCount = 0;\r\n\r\n\t\tif(data !== null && data.edgeData !== null) {\r\n\r\n\t\t\tthis.construct(data);\r\n\r\n\t\t}\r\n\r\n\t\tif(VoxelCell.errorThreshold >= 0) {\r\n\r\n\t\t\tthis.simplify();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Attempts to simplify the octree by clustering voxels.\r\n\t *\r\n\t * @private\r\n\t */\r\n\r\n\tsimplify() {\r\n\r\n\t\tthis.voxelCount -= this.root.collapse();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs voxel cells from volume data.\r\n\t *\r\n\t * @private\r\n\t * @param {HermiteData} data - The volume data.\r\n\t */\r\n\r\n\tconstruct(data) {\r\n\r\n\t\tconst n = HermiteData.resolution;\r\n\t\tconst edgeData = data.edgeData;\r\n\t\tconst materialIndices = data.materialIndices;\r\n\r\n\t\tconst qefSolver = new QEFSolver();\r\n\t\tconst intersection = new Vector3();\r\n\r\n\t\tconst edgeIterators = [\r\n\t\t\tedgeData.edgesX(this.min, this.root.size),\r\n\t\t\tedgeData.edgesY(this.min, this.root.size),\r\n\t\t\tedgeData.edgesZ(this.min, this.root.size)\r\n\t\t];\r\n\r\n\t\tconst sequences = [\r\n\t\t\tnew Uint8Array([0, 1, 2, 3]),\r\n\t\t\tnew Uint8Array([0, 1, 4, 5]),\r\n\t\t\tnew Uint8Array([0, 2, 4, 6])\r\n\t\t];\r\n\r\n\t\tlet voxelCount = 0;\r\n\r\n\t\tlet edges, edge;\r\n\t\tlet sequence, offset;\r\n\t\tlet cell, voxel;\r\n\r\n\t\tlet x, y, z;\r\n\t\tlet d, i;\r\n\r\n\t\t// Process edges X -> Y -> Z.\r\n\t\tfor(d = 0; d < 3; ++d) {\r\n\r\n\t\t\tsequence = sequences[d];\r\n\t\t\tedges = edgeIterators[d];\r\n\r\n\t\t\tfor(edge of edges) {\r\n\r\n\t\t\t\tedge.computeZeroCrossingPosition(intersection);\r\n\r\n\t\t\t\t// Each edge can belong to up to four voxel cells.\r\n\t\t\t\tfor(i = 0; i < 4; ++i) {\r\n\r\n\t\t\t\t\t// Rotate around the edge.\r\n\t\t\t\t\toffset = pattern[sequence[i]];\r\n\r\n\t\t\t\t\tx = edge.coordinates.x - offset[0];\r\n\t\t\t\t\ty = edge.coordinates.y - offset[1];\r\n\t\t\t\t\tz = edge.coordinates.z - offset[2];\r\n\r\n\t\t\t\t\t// Check if the adjusted coordinates still lie inside the grid bounds.\r\n\t\t\t\t\tif(x >= 0 && y >= 0 && z >= 0 && x < n && y < n && z < n) {\r\n\r\n\t\t\t\t\t\tcell = getCell(this.root, n, x, y, z);\r\n\r\n\t\t\t\t\t\tif(cell.voxel === null) {\r\n\r\n\t\t\t\t\t\t\t// The existence of the edge guarantees that the voxel contains the surface.\r\n\t\t\t\t\t\t\tcell.voxel = createVoxel(n, x, y, z, materialIndices);\r\n\r\n\t\t\t\t\t\t\t++voxelCount;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Add the edge data to the voxel.\r\n\t\t\t\t\t\tvoxel = cell.voxel;\r\n\t\t\t\t\t\tvoxel.normal.add(edge.n);\r\n\t\t\t\t\t\tvoxel.qefData.add(intersection, edge.n);\r\n\r\n\t\t\t\t\t\tif(voxel.qefData.numPoints === voxel.edgeCount) {\r\n\r\n\t\t\t\t\t\t\t// Finalise the voxel by solving the accumulated data.\r\n\t\t\t\t\t\t\tqefSolver.setData(voxel.qefData).solve(voxel.position);\r\n\r\n\t\t\t\t\t\t\tif(!cell.contains(voxel.position)) {\r\n\r\n\t\t\t\t\t\t\t\tvoxel.position.copy(qefSolver.massPoint);\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tvoxel.normal.normalize();\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.voxelCount = voxelCount;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/octree/voxel/SparseVoxelOctree.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 289,
    "kind": "function",
    "name": "getCell",
    "memberof": "src/octree/voxel/SparseVoxelOctree.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/octree/voxel/SparseVoxelOctree.js~getCell",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/voxel/SparseVoxelOctree.js",
    "importStyle": null,
    "description": "Creates intermediate voxel cells down to the leaf octant that is described\nby the given local grid coordinates and returns it.",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "VoxelCell"
        ],
        "spread": false,
        "optional": false,
        "name": "cell",
        "description": "The root octant."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "The grid resolution."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "A local grid point X-coordinate."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "A local grid point Y-coordinate."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "A local grid point Z-coordinate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "VoxelCell"
      ],
      "spread": false,
      "description": "A leaf voxel cell."
    },
    "ignore": true
  },
  {
    "__docId__": 290,
    "kind": "function",
    "name": "createVoxel",
    "memberof": "src/octree/voxel/SparseVoxelOctree.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/octree/voxel/SparseVoxelOctree.js~createVoxel",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/voxel/SparseVoxelOctree.js",
    "importStyle": null,
    "description": "Creates a voxel and builds a material configuration code from the materials\nin the voxel corners.",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "The grid resolution."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "A local grid point X-coordinate."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "A local grid point Y-coordinate."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "A local grid point Z-coordinate."
      },
      {
        "nullable": null,
        "types": [
          "Uint8Array"
        ],
        "spread": false,
        "optional": false,
        "name": "materialIndices",
        "description": "The material indices."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Voxel"
      ],
      "spread": false,
      "description": "A voxel."
    },
    "ignore": true
  },
  {
    "__docId__": 291,
    "kind": "class",
    "name": "SparseVoxelOctree",
    "memberof": "src/octree/voxel/SparseVoxelOctree.js",
    "static": true,
    "longname": "src/octree/voxel/SparseVoxelOctree.js~SparseVoxelOctree",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/octree/voxel/SparseVoxelOctree.js",
    "importStyle": "{SparseVoxelOctree}",
    "description": "A sparse, cubic voxel octree.",
    "lineNumber": 135,
    "interface": false,
    "extends": [
      "sparse-octree~Octree"
    ]
  },
  {
    "__docId__": 292,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/octree/voxel/SparseVoxelOctree.js~SparseVoxelOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/voxel/SparseVoxelOctree.js~SparseVoxelOctree#constructor",
    "access": "public",
    "description": "Constructs a new voxel octree.",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "HermiteData"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "A set of volume data."
      },
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": true,
        "name": "min",
        "description": "The lower bounds of this octree."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "size",
        "description": "The size of this octree."
      }
    ]
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "root",
    "memberof": "src/octree/voxel/SparseVoxelOctree.js~SparseVoxelOctree",
    "static": false,
    "longname": "src/octree/voxel/SparseVoxelOctree.js~SparseVoxelOctree#root",
    "access": "public",
    "description": "The root octant.",
    "lineNumber": 155,
    "type": {
      "nullable": null,
      "types": [
        "VoxelCell"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "voxelCount",
    "memberof": "src/octree/voxel/SparseVoxelOctree.js~SparseVoxelOctree",
    "static": false,
    "longname": "src/octree/voxel/SparseVoxelOctree.js~SparseVoxelOctree#voxelCount",
    "access": "public",
    "description": "The amount of voxels in this octree.",
    "lineNumber": 163,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "simplify",
    "memberof": "src/octree/voxel/SparseVoxelOctree.js~SparseVoxelOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/voxel/SparseVoxelOctree.js~SparseVoxelOctree#simplify",
    "access": "private",
    "description": "Attempts to simplify the octree by clustering voxels.",
    "lineNumber": 185,
    "params": [],
    "return": null
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "construct",
    "memberof": "src/octree/voxel/SparseVoxelOctree.js~SparseVoxelOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/voxel/SparseVoxelOctree.js~SparseVoxelOctree#construct",
    "access": "private",
    "description": "Constructs voxel cells from volume data.",
    "lineNumber": 198,
    "params": [
      {
        "nullable": null,
        "types": [
          "HermiteData"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The volume data."
      }
    ],
    "return": null
  },
  {
    "__docId__": 299,
    "kind": "file",
    "name": "src/octree/voxel/VoxelCell.js",
    "content": "import { Vector3 } from \"math-ds\";\r\nimport { CubicOctant } from \"sparse-octree\";\r\nimport { QEFData } from \"../../math/QEFData.js\";\r\nimport { QEFSolver } from \"../../math/QEFSolver.js\";\r\nimport { Voxel } from \"../../volume/Voxel.js\";\r\n\r\n/**\r\n * A QEF solver.\r\n *\r\n * @type {QEFSolver}\r\n * @private\r\n */\r\n\r\nconst qefSolver = new QEFSolver();\r\n\r\n/**\r\n * A bias for boundary checks.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\n\r\nconst BIAS = 1e-1;\r\n\r\n/**\r\n * An error threshold for QEF-based voxel clustering.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\n\r\nlet errorThreshold = -1;\r\n\r\n/**\r\n * A voxel octant.\r\n */\r\n\r\nexport class VoxelCell extends CubicOctant {\r\n\r\n\t/**\r\n\t * Constructs a new voxel octant.\r\n\t *\r\n\t * @param {Vector3} [min] - The lower bounds of the octant.\r\n\t * @param {Number} [size] - The size of the octant.\r\n\t */\r\n\r\n\tconstructor(min, size) {\r\n\r\n\t\tsuper(min, size);\r\n\r\n\t\t/**\r\n\t\t * A voxel that contains draw information.\r\n\t\t *\r\n\t\t * @type {Voxel}\r\n\t\t */\r\n\r\n\t\tthis.voxel = null;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the given point lies inside this cell.\r\n\t *\r\n\t * @param {Vector3} p - A point.\r\n\t * @return {Boolean} Whether the given point lies inside this cell.\r\n\t */\r\n\r\n\tcontains(p) {\r\n\r\n\t\tconst min = this.min;\r\n\t\tconst size = this.size;\r\n\r\n\t\treturn (\r\n\t\t\tp.x >= min.x - BIAS &&\r\n\t\t\tp.y >= min.y - BIAS &&\r\n\t\t\tp.z >= min.z - BIAS &&\r\n\t\t\tp.x <= min.x + size + BIAS &&\r\n\t\t\tp.y <= min.y + size + BIAS &&\r\n\t\t\tp.z <= min.z + size + BIAS\r\n\t\t);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Attempts to simplify this cell.\r\n\t *\r\n\t * @return {Number} The amount of removed voxels.\r\n\t */\r\n\r\n\tcollapse() {\r\n\r\n\t\tconst children = this.children;\r\n\r\n\t\tconst signs = [\r\n\t\t\t-1, -1, -1, -1,\r\n\t\t\t-1, -1, -1, -1\r\n\t\t];\r\n\r\n\t\tconst position = new Vector3();\r\n\r\n\t\tlet midSign = -1;\r\n\t\tlet collapsible = (children !== null);\r\n\r\n\t\tlet removedVoxels = 0;\r\n\r\n\t\tlet child, sign, voxel;\r\n\t\tlet qefData, error;\r\n\r\n\t\tlet v, i;\r\n\r\n\t\tif(collapsible) {\r\n\r\n\t\t\tqefData = new QEFData();\r\n\r\n\t\t\tfor(v = 0, i = 0; i < 8; ++i) {\r\n\r\n\t\t\t\tchild = children[i];\r\n\t\t\t\tremovedVoxels += child.collapse();\r\n\t\t\t\tvoxel = child.voxel;\r\n\r\n\t\t\t\tif(child.children !== null) {\r\n\r\n\t\t\t\t\t// Couldn't simplify the child.\r\n\t\t\t\t\tcollapsible = false;\r\n\r\n\t\t\t\t} else if(voxel !== null) {\r\n\r\n\t\t\t\t\tqefData.addData(voxel.qefData);\r\n\r\n\t\t\t\t\tmidSign = (voxel.materials >> (7 - i)) & 1;\r\n\t\t\t\t\tsigns[i] = (voxel.materials >> i) & 1;\r\n\r\n\t\t\t\t\t++v;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif(collapsible) {\r\n\r\n\t\t\t\terror = qefSolver.setData(qefData).solve(position);\r\n\r\n\t\t\t\tif(error <= errorThreshold) {\r\n\r\n\t\t\t\t\tvoxel = new Voxel();\r\n\t\t\t\t\tvoxel.position.copy(this.contains(position) ? position : qefSolver.massPoint);\r\n\r\n\t\t\t\t\tfor(i = 0; i < 8; ++i) {\r\n\r\n\t\t\t\t\t\tsign = signs[i];\r\n\t\t\t\t\t\tchild = children[i];\r\n\r\n\t\t\t\t\t\tif(sign === -1) {\r\n\r\n\t\t\t\t\t\t\t// Undetermined, use mid sign instead.\r\n\t\t\t\t\t\t\tvoxel.materials |= (midSign << i);\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tvoxel.materials |= (sign << i);\r\n\r\n\t\t\t\t\t\t\t// Accumulate normals.\r\n\t\t\t\t\t\t\tvoxel.normal.add(child.voxel.normal);\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvoxel.normal.normalize();\r\n\t\t\t\t\tvoxel.qefData = qefData;\r\n\r\n\t\t\t\t\tthis.voxel = voxel;\r\n\t\t\t\t\tthis.children = null;\r\n\r\n\t\t\t\t\t// Removed existing voxels and created a new one.\r\n\t\t\t\t\tremovedVoxels += v - 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn removedVoxels;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An error threshold for QEF-based voxel clustering (mesh simplification).\r\n\t *\r\n\t * @type {Number}\r\n\t */\r\n\r\n\tstatic get errorThreshold() {\r\n\r\n\t\treturn errorThreshold;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The mesh simplification error threshold.\r\n\t *\r\n\t * A bigger threshold allows more voxel cells to collapse which results in\r\n\t * less vertices being created.\r\n\t *\r\n\t * An error threshold of -1 disables the mesh simplification.\r\n\t *\r\n\t * @type {Number}\r\n\t */\r\n\r\n\tstatic set errorThreshold(value) {\r\n\r\n\t\terrorThreshold = value;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/octree/voxel/VoxelCell.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 300,
    "kind": "variable",
    "name": "qefSolver",
    "memberof": "src/octree/voxel/VoxelCell.js",
    "static": true,
    "longname": "src/octree/voxel/VoxelCell.js~qefSolver",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/voxel/VoxelCell.js",
    "importStyle": null,
    "description": "A QEF solver.",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "QEFSolver"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 301,
    "kind": "variable",
    "name": "BIAS",
    "memberof": "src/octree/voxel/VoxelCell.js",
    "static": true,
    "longname": "src/octree/voxel/VoxelCell.js~BIAS",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/voxel/VoxelCell.js",
    "importStyle": null,
    "description": "A bias for boundary checks.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 302,
    "kind": "variable",
    "name": "errorThreshold",
    "memberof": "src/octree/voxel/VoxelCell.js",
    "static": true,
    "longname": "src/octree/voxel/VoxelCell.js~errorThreshold",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/voxel/VoxelCell.js",
    "importStyle": null,
    "description": "An error threshold for QEF-based voxel clustering.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 303,
    "kind": "class",
    "name": "VoxelCell",
    "memberof": "src/octree/voxel/VoxelCell.js",
    "static": true,
    "longname": "src/octree/voxel/VoxelCell.js~VoxelCell",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/octree/voxel/VoxelCell.js",
    "importStyle": "{VoxelCell}",
    "description": "A voxel octant.",
    "lineNumber": 38,
    "interface": false,
    "extends": [
      "sparse-octree~CubicOctant"
    ]
  },
  {
    "__docId__": 304,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/octree/voxel/VoxelCell.js~VoxelCell",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/voxel/VoxelCell.js~VoxelCell#constructor",
    "access": "public",
    "description": "Constructs a new voxel octant.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": true,
        "name": "min",
        "description": "The lower bounds of the octant."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "size",
        "description": "The size of the octant."
      }
    ]
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "voxel",
    "memberof": "src/octree/voxel/VoxelCell.js~VoxelCell",
    "static": false,
    "longname": "src/octree/voxel/VoxelCell.js~VoxelCell#voxel",
    "access": "public",
    "description": "A voxel that contains draw information.",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "Voxel"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "contains",
    "memberof": "src/octree/voxel/VoxelCell.js~VoxelCell",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/voxel/VoxelCell.js~VoxelCell#contains",
    "access": "public",
    "description": "Checks if the given point lies inside this cell.",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "A point."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the given point lies inside this cell."
    }
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "collapse",
    "memberof": "src/octree/voxel/VoxelCell.js~VoxelCell",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/voxel/VoxelCell.js~VoxelCell#collapse",
    "access": "public",
    "description": "Attempts to simplify this cell.",
    "lineNumber": 90,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The amount of removed voxels."
    },
    "params": []
  },
  {
    "__docId__": 309,
    "kind": "member",
    "name": "children",
    "memberof": "src/octree/voxel/VoxelCell.js~VoxelCell",
    "static": false,
    "longname": "src/octree/voxel/VoxelCell.js~VoxelCell#children",
    "access": "public",
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "get",
    "name": "errorThreshold",
    "memberof": "src/octree/voxel/VoxelCell.js~VoxelCell",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/octree/voxel/VoxelCell.js~VoxelCell.errorThreshold",
    "access": "public",
    "description": "An error threshold for QEF-based voxel clustering (mesh simplification).",
    "lineNumber": 194,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 311,
    "kind": "set",
    "name": "errorThreshold",
    "memberof": "src/octree/voxel/VoxelCell.js~VoxelCell",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/octree/voxel/VoxelCell.js~VoxelCell.errorThreshold",
    "access": "public",
    "description": "The mesh simplification error threshold.\n\nA bigger threshold allows more voxel cells to collapse which results in\nless vertices being created.\n\nAn error threshold of -1 disables the mesh simplification.",
    "lineNumber": 211,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 312,
    "kind": "file",
    "name": "src/octree/world/index.js",
    "content": "/**\r\n * World octree space partitioning components.\r\n *\r\n * @module rabbit-hole/octree/world\r\n */\r\n\r\nexport { IntermediateWorldOctant } from \"./IntermediateWorldOctant.js\";\r\n\r\nexport { KeyDesign } from \"./KeyDesign.js\";\r\nexport { KeyIterator } from \"./KeyIterator.js\";\r\n\r\nexport { WorldOctant } from \"./WorldOctant.js\";\r\nexport { WorldOctantId } from \"./WorldOctantId.js\";\r\nexport { WorldOctantIterator } from \"./WorldOctantIterator.js\";\r\nexport { WorldOctantWrapper } from \"./WorldOctantWrapper.js\";\r\nexport { WorldOctree } from \"./WorldOctree.js\";\r\nexport { WorldOctreeCSG } from \"./WorldOctreeCSG.js\";\r\nexport { WorldOctreeRaycaster } from \"./WorldOctreeRaycaster.js\";\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/octree/world/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 313,
    "kind": "file",
    "name": "src/octree/world/IntermediateWorldOctant.js",
    "content": "import { WorldOctant } from \"./WorldOctant.js\";\r\n\r\n/**\r\n * A world octant that doesn't reside in LOD zero.\r\n *\r\n * This octant is a container for resampled volume data. Additionally, it stores\r\n * information about the existence of its potential children.\r\n */\r\n\r\nexport class IntermediateWorldOctant extends WorldOctant {\r\n\r\n\t/**\r\n\t * Constructs a new intermediate world octant.\r\n\t */\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * An 8-bit mask that indicates the existence of the eight potential\r\n\t\t * children.\r\n\t\t *\r\n\t\t * The order of the children follows the common octant layout from the\r\n\t\t * external `sparse-octree` module:\r\n\t\t *\r\n\t\t * ```text\r\n\t\t *    3____7\r\n\t\t *  2/___6/|\r\n\t\t *  | 1__|_5\r\n\t\t *  0/___4/\r\n\t\t * ```\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.children = 0;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/octree/world/IntermediateWorldOctant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 314,
    "kind": "class",
    "name": "IntermediateWorldOctant",
    "memberof": "src/octree/world/IntermediateWorldOctant.js",
    "static": true,
    "longname": "src/octree/world/IntermediateWorldOctant.js~IntermediateWorldOctant",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/octree/world/IntermediateWorldOctant.js",
    "importStyle": "{IntermediateWorldOctant}",
    "description": "A world octant that doesn't reside in LOD zero.\n\nThis octant is a container for resampled volume data. Additionally, it stores\ninformation about the existence of its potential children.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/octree/world/WorldOctant.js~WorldOctant"
    ]
  },
  {
    "__docId__": 315,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/octree/world/IntermediateWorldOctant.js~IntermediateWorldOctant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/IntermediateWorldOctant.js~IntermediateWorldOctant#constructor",
    "access": "public",
    "description": "Constructs a new intermediate world octant.",
    "lineNumber": 16
  },
  {
    "__docId__": 316,
    "kind": "member",
    "name": "children",
    "memberof": "src/octree/world/IntermediateWorldOctant.js~IntermediateWorldOctant",
    "static": false,
    "longname": "src/octree/world/IntermediateWorldOctant.js~IntermediateWorldOctant#children",
    "access": "public",
    "description": "An 8-bit mask that indicates the existence of the eight potential\nchildren.\n\nThe order of the children follows the common octant layout from the\nexternal `sparse-octree` module:\n\n```text\n   3____7\n 2/___6/|\n | 1__|_5\n 0/___4/\n```",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 317,
    "kind": "file",
    "name": "src/octree/world/KeyDesign.js",
    "content": "import { Vector3 } from \"math-ds\";\r\nimport { BinaryUtils } from \"../../utils/BinaryUtils.js\";\r\nimport { KeyIterator } from \"./KeyIterator.js\";\r\n\r\n/**\r\n * The amount of bits of a DWord.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\n\r\nconst DWORD_BITS = 32;\r\n\r\n/**\r\n * The amount of different values that can be represented with a DWord.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\n\r\nconst RANGE_DWORD = Math.pow(2, DWORD_BITS);\r\n\r\n/**\r\n * The total amount of available bits for safe integers.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\n\r\nconst BITS = 53;\r\n\r\n/**\r\n * The amount of available high bits.\r\n *\r\n * In JavaScript, bit operations can only be applied to DWords (32-bit).\r\n * All 53-bit keys must be split into a high and a low part for processing.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\n\r\nconst HI_BITS = 21;\r\n\r\n/**\r\n * The amount of available low bits.\r\n *\r\n * In JavaScript, bit operations can only be applied to DWords (32-bit).\r\n * All 53-bit keys must be split into a high and a low part for processing.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\n\r\nconst LO_BITS = 32;\r\n\r\n/**\r\n * A design for octant keys.\r\n *\r\n * 3D coordinates are packed into a single integer to obtain a unique key. This\r\n * class describes the bit allotment for each coordinate and provides methods\r\n * for key packing and unpacking.\r\n *\r\n * See {@link KeyDesign.BITS} for the total amount of available bits.\r\n */\r\n\r\nexport class KeyDesign {\r\n\r\n\t/**\r\n\t * Constructs a new key design.\r\n\t *\r\n\t * @param {Number} [x=Math.round(BITS * 0.4)] - The amount of bits used for the X-coordinate.\r\n\t * @param {Number} [y=Math.round(BITS * 0.2)] - The amount of bits used for the Y-coordinate.\r\n\t * @param {Number} [z=x] - The amount of bits used for the Z-coordinate.\r\n\t */\r\n\r\n\tconstructor(x = Math.round(BITS * 0.4), y = Math.round(BITS * 0.2), z = x) {\r\n\r\n\t\t/**\r\n\t\t * The amount of bits reserved for the X-coordinate.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.x = 0;\r\n\r\n\t\t/**\r\n\t\t * The amount of bits reserved for the Y-coordinate.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.y = 0;\r\n\r\n\t\t/**\r\n\t\t * The amount of bits reserved for the Z-coordinate.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.z = 0;\r\n\r\n\t\t/**\r\n\t\t * The amount of distinct integers that can be represented with X bits.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.rangeX = 0;\r\n\r\n\t\t/**\r\n\t\t * The amount of distinct integers that can be represented with Y bits.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.rangeY = 0;\r\n\r\n\t\t/**\r\n\t\t * The amount of distinct integers that can be represented with Z bits.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.rangeZ = 0;\r\n\r\n\t\t/**\r\n\t\t * The amount of distinct integers that can be represented with X + Y bits.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.rangeXY = 0;\r\n\r\n\t\t/**\r\n\t\t * The key range divided by two.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\r\n\t\tthis.halfRange = null;\r\n\r\n\t\t/**\r\n\t\t * A bit mask for the X-coordinate. The first item holds the low bits while\r\n\t\t * the second item holds the high bits.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.maskX = [0, 0];\r\n\r\n\t\t/**\r\n\t\t * A bit mask for the Y-coordinate. The first item holds the low bits while\r\n\t\t * the second item holds the high bits.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.maskY = [0, 0];\r\n\r\n\t\t/**\r\n\t\t * A bit mask for the Z-coordinate. The first item holds the low bits while\r\n\t\t * the second item holds the high bits.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.maskZ = [0, 0];\r\n\r\n\t\tthis.set(x, y, z);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the bit distribution.\r\n\t *\r\n\t * Make sure to clear your octree after changing the key design!\r\n\t *\r\n\t * @param {Number} [x] - The amount of bits used for the X-coordinate.\r\n\t * @param {Number} [y] - The amount of bits used for the Y-coordinate.\r\n\t * @param {Number} [z] - The amount of bits used for the Z-coordinate.\r\n\t */\r\n\r\n\tset(x, y, z) {\r\n\r\n\t\t// Bit operations currently only work on DWords.\r\n\t\tif(x + y + z > BITS || x > DWORD_BITS || y > DWORD_BITS || z > DWORD_BITS) {\r\n\r\n\t\t\tconsole.warn(\"Invalid bit allotment\");\r\n\r\n\t\t\tx = Math.round(BITS * 0.4);\r\n\t\t\ty = Math.round(BITS * 0.2);\r\n\t\t\tz = x;\r\n\r\n\t\t}\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t\tthis.rangeX = Math.pow(2, x);\r\n\t\tthis.rangeY = Math.pow(2, y);\r\n\t\tthis.rangeZ = Math.pow(2, z);\r\n\r\n\t\tthis.rangeXY = Math.pow(2, x + y);\r\n\r\n\t\tthis.halfRange = new Vector3(\r\n\t\t\tthis.rangeX / 2,\r\n\t\t\tthis.rangeY / 2,\r\n\t\t\tthis.rangeZ / 2\r\n\t\t);\r\n\r\n\t\tthis.updateBitMasks();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates bit masks for the extraction of coordinates from keys.\r\n\t *\r\n\t * @private\r\n\t */\r\n\r\n\tupdateBitMasks() {\r\n\r\n\t\tconst xBits = this.x;\r\n\t\tconst yBits = this.y;\r\n\t\tconst zBits = this.z;\r\n\r\n\t\tconst maskX = this.maskX;\r\n\t\tconst maskY = this.maskY;\r\n\t\tconst maskZ = this.maskZ;\r\n\r\n\t\tconst hiShiftX = DWORD_BITS - Math.max(0, xBits - LO_BITS);\r\n\t\tconst hiShiftY = DWORD_BITS - Math.max(0, yBits + xBits - LO_BITS);\r\n\t\tconst hiShiftZ = DWORD_BITS - Math.max(0, zBits + yBits + xBits - LO_BITS);\r\n\r\n\t\tmaskX[1] = (hiShiftX < DWORD_BITS) ? ~0 >>> hiShiftX : 0;\r\n\t\tmaskX[0] = ~0 >>> Math.max(0, LO_BITS - xBits);\r\n\r\n\t\tmaskY[1] = (((hiShiftY < DWORD_BITS) ? ~0 >>> hiShiftY : 0) & ~maskX[1]) >>> 0;\r\n\t\tmaskY[0] = ((~0 >>> Math.max(0, LO_BITS - (xBits + yBits))) & ~maskX[0]) >>> 0;\r\n\r\n\t\tmaskZ[1] = (((hiShiftZ < DWORD_BITS) ? ~0 >>> hiShiftZ : 0) & ~maskY[1] & ~maskX[1]) >>> 0;\r\n\t\tmaskZ[0] = ((~0 >>> Math.max(0, LO_BITS - (xBits + yBits + zBits))) & ~maskY[0] & ~maskX[0]) >>> 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Extracts the 3D coordinates from a given key.\r\n\t *\r\n\t * @param {Number} key - The key.\r\n\t * @param {Vector3} [target] - A target for the extracted coordinates. If none is provided, a new vector will be created.\r\n\t * @return {Vector3} The extracted coordinates.\r\n\t */\r\n\r\n\tunpackKey(key, target = new Vector3()) {\r\n\r\n\t\tconst maskX = this.maskX;\r\n\t\tconst maskY = this.maskY;\r\n\t\tconst maskZ = this.maskZ;\r\n\r\n\t\t// Split the QWord key in a high and a low DWord.\r\n\t\tconst hi = Math.trunc(key / RANGE_DWORD);\r\n\t\tconst lo = key % RANGE_DWORD;\r\n\r\n\t\treturn target.set(\r\n\r\n\t\t\t((hi & maskX[1]) * RANGE_DWORD) + ((lo & maskX[0]) >>> 0),\r\n\t\t\t(((hi & maskY[1]) * RANGE_DWORD) + ((lo & maskY[0]) >>> 0)) / this.rangeX,\r\n\t\t\t(((hi & maskZ[1]) * RANGE_DWORD) + ((lo & maskZ[0]) >>> 0)) / this.rangeXY\r\n\r\n\t\t);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Packs a 3D position into a unique key.\r\n\t *\r\n\t * @param {Vector3} position - A position.\r\n\t * @return {Number} The octant key.\r\n\t */\r\n\r\n\tpackKey(position) {\r\n\r\n\t\treturn position.z * this.rangeXY + position.y * this.rangeX + position.x;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new key range iterator.\r\n\t *\r\n\t * The key iterator will return all keys in the specified coordinate range,\r\n\t * including those at min and max.\r\n\t *\r\n\t * @param {Vector3} min - The lower key index bounds (zero-based unsigned integer coordinates).\r\n\t * @param {Vector3} max - The upper key index bounds (zero-based unsigned integer coordinates).\r\n\t * @return {KeyIterator} An iterator.\r\n\t */\r\n\r\n\tkeyRange(min, max) {\r\n\r\n\t\treturn new KeyIterator(this, min, max);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the information of this key design into a string.\r\n\t *\r\n\t * @return {String} The key design as a string.\r\n\t */\r\n\r\n\ttoString() {\r\n\r\n\t\tconst maskX = this.maskX;\r\n\t\tconst maskY = this.maskY;\r\n\t\tconst maskZ = this.maskZ;\r\n\r\n\t\treturn (\r\n\r\n\t\t\t\"Key Design\\n\\n\" +\r\n\r\n\t\t\t\"X-Bits: \" + this.x + \"\\n\" +\r\n\t\t\t\"Y-Bits: \" + this.y + \"\\n\" +\r\n\t\t\t\"Z-Bits: \" + this.z + \"\\n\\n\" +\r\n\r\n\t\t\tBinaryUtils.createBinaryString(maskX[1], DWORD_BITS) + \" \" + maskX[1] + \" (HI-Mask X)\\n\" +\r\n\t\t\tBinaryUtils.createBinaryString(maskX[0], DWORD_BITS) + \" \" + maskX[0] + \" (LO-Mask X)\\n\\n\" +\r\n\r\n\t\t\tBinaryUtils.createBinaryString(maskY[1], DWORD_BITS) + \" \" + maskY[1] + \" (HI-Mask Y)\\n\" +\r\n\t\t\tBinaryUtils.createBinaryString(maskY[0], DWORD_BITS) + \" \" + maskY[0] + \" (LO-Mask Y)\\n\\n\" +\r\n\r\n\t\t\tBinaryUtils.createBinaryString(maskZ[1], DWORD_BITS) + \" \" + maskZ[1] + \" (HI-Mask Z)\\n\" +\r\n\t\t\tBinaryUtils.createBinaryString(maskZ[0], DWORD_BITS) + \" \" + maskZ[0] + \" (LO-Mask Z)\\n\"\r\n\r\n\t\t);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The total amount of available bits for safe integers.\r\n\t *\r\n\t * JavaScript uses IEEE 754 binary64 Doubles for Numbers and, as a result,\r\n\t * only supports 53-bit integers as of ES2015.\r\n\t *\r\n\t * For more information see: http://2ality.com/2012/04/number-encoding.html\r\n\t *\r\n\t * @type {Number}\r\n\t */\r\n\r\n\tstatic get BITS() {\r\n\r\n\t\treturn BITS;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The amount of available bits in the high DWord.\r\n\t *\r\n\t * In JavaScript, bit operations can only be applied to DWords (32-bit).\r\n\t * All 53-bit keys must be split into a high and a low part for processing.\r\n\t *\r\n\t * @type {Number}\r\n\t */\r\n\r\n\tstatic get HI_BITS() {\r\n\r\n\t\treturn HI_BITS;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The amount of available bits in the low DWord.\r\n\t *\r\n\t * In JavaScript, bit operations can only be applied to DWords (32-bit).\r\n\t * All 53-bit keys must be split into a high and a low part for processing.\r\n\t *\r\n\t * @type {Number}\r\n\t */\r\n\r\n\tstatic get LO_BITS() {\r\n\r\n\t\treturn LO_BITS;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/octree/world/KeyDesign.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 318,
    "kind": "variable",
    "name": "DWORD_BITS",
    "memberof": "src/octree/world/KeyDesign.js",
    "static": true,
    "longname": "src/octree/world/KeyDesign.js~DWORD_BITS",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/KeyDesign.js",
    "importStyle": null,
    "description": "The amount of bits of a DWord.",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 319,
    "kind": "variable",
    "name": "RANGE_DWORD",
    "memberof": "src/octree/world/KeyDesign.js",
    "static": true,
    "longname": "src/octree/world/KeyDesign.js~RANGE_DWORD",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/KeyDesign.js",
    "importStyle": null,
    "description": "The amount of different values that can be represented with a DWord.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 320,
    "kind": "variable",
    "name": "BITS",
    "memberof": "src/octree/world/KeyDesign.js",
    "static": true,
    "longname": "src/octree/world/KeyDesign.js~BITS",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/KeyDesign.js",
    "importStyle": null,
    "description": "The total amount of available bits for safe integers.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 321,
    "kind": "variable",
    "name": "HI_BITS",
    "memberof": "src/octree/world/KeyDesign.js",
    "static": true,
    "longname": "src/octree/world/KeyDesign.js~HI_BITS",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/KeyDesign.js",
    "importStyle": null,
    "description": "The amount of available high bits.\n\nIn JavaScript, bit operations can only be applied to DWords (32-bit).\nAll 53-bit keys must be split into a high and a low part for processing.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 322,
    "kind": "variable",
    "name": "LO_BITS",
    "memberof": "src/octree/world/KeyDesign.js",
    "static": true,
    "longname": "src/octree/world/KeyDesign.js~LO_BITS",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/KeyDesign.js",
    "importStyle": null,
    "description": "The amount of available low bits.\n\nIn JavaScript, bit operations can only be applied to DWords (32-bit).\nAll 53-bit keys must be split into a high and a low part for processing.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 323,
    "kind": "class",
    "name": "KeyDesign",
    "memberof": "src/octree/world/KeyDesign.js",
    "static": true,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/octree/world/KeyDesign.js",
    "importStyle": "{KeyDesign}",
    "description": "A design for octant keys.\n\n3D coordinates are packed into a single integer to obtain a unique key. This\nclass describes the bit allotment for each coordinate and provides methods\nfor key packing and unpacking.\n\nSee {@link KeyDesign.BITS} for the total amount of available bits.",
    "lineNumber": 66,
    "interface": false
  },
  {
    "__docId__": 324,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign#constructor",
    "access": "public",
    "description": "Constructs a new key design.",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Math.round(BITS * 0.4)",
        "defaultRaw": "Math.round(BITS * 0.4)",
        "name": "x",
        "description": "The amount of bits used for the X-coordinate."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Math.round(BITS * 0.2)",
        "defaultRaw": "Math.round(BITS * 0.2)",
        "name": "y",
        "description": "The amount of bits used for the Y-coordinate."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "x",
        "defaultRaw": "x",
        "name": "z",
        "description": "The amount of bits used for the Z-coordinate."
      }
    ]
  },
  {
    "__docId__": 325,
    "kind": "member",
    "name": "x",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "static": false,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign#x",
    "access": "public",
    "description": "The amount of bits reserved for the X-coordinate.",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 326,
    "kind": "member",
    "name": "y",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "static": false,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign#y",
    "access": "public",
    "description": "The amount of bits reserved for the Y-coordinate.",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 327,
    "kind": "member",
    "name": "z",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "static": false,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign#z",
    "access": "public",
    "description": "The amount of bits reserved for the Z-coordinate.",
    "lineNumber": 100,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 328,
    "kind": "member",
    "name": "rangeX",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "static": false,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign#rangeX",
    "access": "public",
    "description": "The amount of distinct integers that can be represented with X bits.",
    "lineNumber": 108,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 329,
    "kind": "member",
    "name": "rangeY",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "static": false,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign#rangeY",
    "access": "public",
    "description": "The amount of distinct integers that can be represented with Y bits.",
    "lineNumber": 116,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 330,
    "kind": "member",
    "name": "rangeZ",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "static": false,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign#rangeZ",
    "access": "public",
    "description": "The amount of distinct integers that can be represented with Z bits.",
    "lineNumber": 124,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 331,
    "kind": "member",
    "name": "rangeXY",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "static": false,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign#rangeXY",
    "access": "public",
    "description": "The amount of distinct integers that can be represented with X + Y bits.",
    "lineNumber": 132,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 332,
    "kind": "member",
    "name": "halfRange",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "static": false,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign#halfRange",
    "access": "public",
    "description": "The key range divided by two.",
    "lineNumber": 140,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 333,
    "kind": "member",
    "name": "maskX",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "static": false,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign#maskX",
    "access": "private",
    "description": "A bit mask for the X-coordinate. The first item holds the low bits while\nthe second item holds the high bits.",
    "lineNumber": 150,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 334,
    "kind": "member",
    "name": "maskY",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "static": false,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign#maskY",
    "access": "private",
    "description": "A bit mask for the Y-coordinate. The first item holds the low bits while\nthe second item holds the high bits.",
    "lineNumber": 160,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 335,
    "kind": "member",
    "name": "maskZ",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "static": false,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign#maskZ",
    "access": "private",
    "description": "A bit mask for the Z-coordinate. The first item holds the low bits while\nthe second item holds the high bits.",
    "lineNumber": 170,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "set",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign#set",
    "access": "public",
    "description": "Sets the bit distribution.\n\nMake sure to clear your octree after changing the key design!",
    "lineNumber": 186,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "x",
        "description": "The amount of bits used for the X-coordinate."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "y",
        "description": "The amount of bits used for the Y-coordinate."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "z",
        "description": "The amount of bits used for the Z-coordinate."
      }
    ],
    "return": null
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "updateBitMasks",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign#updateBitMasks",
    "access": "private",
    "description": "Creates bit masks for the extraction of coordinates from keys.",
    "lineNumber": 225,
    "params": [],
    "return": null
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "unpackKey",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign#unpackKey",
    "access": "public",
    "description": "Extracts the 3D coordinates from a given key.",
    "lineNumber": 258,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key."
      },
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": true,
        "name": "target",
        "description": "A target for the extracted coordinates. If none is provided, a new vector will be created."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": "The extracted coordinates."
    }
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "packKey",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign#packKey",
    "access": "public",
    "description": "Packs a 3D position into a unique key.",
    "lineNumber": 285,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "A position."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The octant key."
    }
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "keyRange",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign#keyRange",
    "access": "public",
    "description": "Returns a new key range iterator.\n\nThe key iterator will return all keys in the specified coordinate range,\nincluding those at min and max.",
    "lineNumber": 302,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": "The lower key index bounds (zero-based unsigned integer coordinates)."
      },
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "The upper key index bounds (zero-based unsigned integer coordinates)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "KeyIterator"
      ],
      "spread": false,
      "description": "An iterator."
    }
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "toString",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign#toString",
    "access": "public",
    "description": "Converts the information of this key design into a string.",
    "lineNumber": 314,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The key design as a string."
    },
    "params": []
  },
  {
    "__docId__": 350,
    "kind": "get",
    "name": "BITS",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign.BITS",
    "access": "public",
    "description": "The total amount of available bits for safe integers.\n\nJavaScript uses IEEE 754 binary64 Doubles for Numbers and, as a result,\nonly supports 53-bit integers as of ES2015.\n\nFor more information see: http://2ality.com/2012/04/number-encoding.html",
    "lineNumber": 352,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 351,
    "kind": "get",
    "name": "HI_BITS",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign.HI_BITS",
    "access": "public",
    "description": "The amount of available bits in the high DWord.\n\nIn JavaScript, bit operations can only be applied to DWords (32-bit).\nAll 53-bit keys must be split into a high and a low part for processing.",
    "lineNumber": 367,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 352,
    "kind": "get",
    "name": "LO_BITS",
    "memberof": "src/octree/world/KeyDesign.js~KeyDesign",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/octree/world/KeyDesign.js~KeyDesign.LO_BITS",
    "access": "public",
    "description": "The amount of available bits in the low DWord.\n\nIn JavaScript, bit operations can only be applied to DWords (32-bit).\nAll 53-bit keys must be split into a high and a low part for processing.",
    "lineNumber": 382,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 353,
    "kind": "file",
    "name": "src/octree/world/KeyIterator.js",
    "content": "import { Vector3 } from \"math-ds\";\r\nimport IteratorResult from \"iterator-result\";\r\n\r\n/**\r\n * A key range iterator.\r\n *\r\n * @implements {Iterator}\r\n * @implements {Iterable}\r\n */\r\n\r\nexport class KeyIterator {\r\n\r\n\t/**\r\n\t * Constructs a new key iterator.\r\n\t *\r\n\t * This iterator returns all keys in the specified coordinate range, including\r\n\t * those at min and max.\r\n\t *\r\n\t * @param {KeyDesign} keyDesign - A key design.\r\n\t * @param {Vector3} min - The lower index bounds (zero-based unsigned integer coordinates).\r\n\t * @param {Vector3} max - The upper index bounds (zero-based unsigned integer coordinates).\r\n\t */\r\n\r\n\tconstructor(keyDesign, min, max) {\r\n\r\n\t\t/**\r\n\t\t * The key design.\r\n\t\t *\r\n\t\t * @type {KeyDesign}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.keyDesign = keyDesign;\r\n\r\n\t\t/**\r\n\t\t * The lower index bounds.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.min = min;\r\n\r\n\t\t/**\r\n\t\t * The upper index bounds.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.max = max;\r\n\r\n\t\t/**\r\n\t\t * The base key coordinates.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.keyBase = new Vector3();\r\n\r\n\t\t/**\r\n\t\t * The current key iteration coordinates.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.key = new Vector3();\r\n\r\n\t\t/**\r\n\t\t * The iteration limits.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.limit = new Vector3();\r\n\r\n\t\t/**\r\n\t\t * An iterator result.\r\n\t\t *\r\n\t\t * @type {IteratorResult}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.result = new IteratorResult();\r\n\r\n\t\tthis.reset();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Resets this iterator.\r\n\t *\r\n\t * @return {KeyIterator} This iterator.\r\n\t */\r\n\r\n\treset() {\r\n\r\n\t\tconst keyDesign = this.keyDesign;\r\n\t\tconst min = this.min;\r\n\t\tconst max = this.max;\r\n\r\n\t\tif(min.x <= max.x && min.y <= max.y && min.z <= max.z) {\r\n\r\n\t\t\tthis.keyBase.set(min.x, min.y * keyDesign.rangeX, min.z * keyDesign.rangeXY);\r\n\t\t\tthis.limit.set(max.x, max.y * keyDesign.rangeX, max.z * keyDesign.rangeXY);\r\n\t\t\tthis.key.copy(this.keyBase);\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// The range is invalid. Return no keys.\r\n\t\t\tthis.keyBase.set(1, 1, 1);\r\n\t\t\tthis.limit.set(0, 0, 0);\r\n\t\t\tthis.key.copy(this.keyBase);\r\n\r\n\t\t\tconsole.error(\"Invalid key range\", min, max);\r\n\r\n\t\t}\r\n\r\n\t\tthis.result.reset();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Iterates over the key range.\r\n\t *\r\n\t * @return {IteratorResult} The next key.\r\n\t */\r\n\r\n\tnext() {\r\n\r\n\t\tconst result = this.result;\r\n\t\tconst keyDesign = this.keyDesign;\r\n\t\tconst keyBase = this.keyBase;\r\n\t\tconst limit = this.limit;\r\n\t\tconst key = this.key;\r\n\r\n\t\tif(key.z <= limit.z) {\r\n\r\n\t\t\t// Put the key pieces together.\r\n\t\t\tresult.value = key.z + key.y + key.x;\r\n\r\n\t\t\t// Advance the key coordinates.\r\n\t\t\t++key.x;\r\n\r\n\t\t\tif(key.x > limit.x) {\r\n\r\n\t\t\t\tkey.x = keyBase.x;\r\n\t\t\t\tkey.y += keyDesign.rangeX;\r\n\r\n\t\t\t\tif(key.y > limit.y) {\r\n\r\n\t\t\t\t\tkey.y = keyBase.y;\r\n\t\t\t\t\tkey.z += keyDesign.rangeXY;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tresult.value = null;\r\n\t\t\tresult.done = true;\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Called when this iterator will no longer be run to completion.\r\n\t *\r\n\t * @param {Object} value - An interator result value.\r\n\t * @return {IteratorResult} - A premature completion result.\r\n\t */\r\n\r\n\treturn(value) {\r\n\r\n\t\tthis.result.value = value;\r\n\t\tthis.result.done = true;\r\n\r\n\t\treturn this.result;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns this iterator.\r\n\t *\r\n\t * @return {KeyIterator} An iterator.\r\n\t */\r\n\r\n\t[Symbol.iterator]() {\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/octree/world/KeyIterator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 354,
    "kind": "class",
    "name": "KeyIterator",
    "memberof": "src/octree/world/KeyIterator.js",
    "static": true,
    "longname": "src/octree/world/KeyIterator.js~KeyIterator",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/octree/world/KeyIterator.js",
    "importStyle": "{KeyIterator}",
    "description": "A key range iterator.",
    "lineNumber": 11,
    "interface": false,
    "implements": [
      "Iterator",
      "Iterable"
    ]
  },
  {
    "__docId__": 355,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/octree/world/KeyIterator.js~KeyIterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/KeyIterator.js~KeyIterator#constructor",
    "access": "public",
    "description": "Constructs a new key iterator.\n\nThis iterator returns all keys in the specified coordinate range, including\nthose at min and max.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "KeyDesign"
        ],
        "spread": false,
        "optional": false,
        "name": "keyDesign",
        "description": "A key design."
      },
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": "The lower index bounds (zero-based unsigned integer coordinates)."
      },
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "The upper index bounds (zero-based unsigned integer coordinates)."
      }
    ]
  },
  {
    "__docId__": 356,
    "kind": "member",
    "name": "keyDesign",
    "memberof": "src/octree/world/KeyIterator.js~KeyIterator",
    "static": false,
    "longname": "src/octree/world/KeyIterator.js~KeyIterator#keyDesign",
    "access": "private",
    "description": "The key design.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "KeyDesign"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 357,
    "kind": "member",
    "name": "min",
    "memberof": "src/octree/world/KeyIterator.js~KeyIterator",
    "static": false,
    "longname": "src/octree/world/KeyIterator.js~KeyIterator#min",
    "access": "private",
    "description": "The lower index bounds.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 358,
    "kind": "member",
    "name": "max",
    "memberof": "src/octree/world/KeyIterator.js~KeyIterator",
    "static": false,
    "longname": "src/octree/world/KeyIterator.js~KeyIterator#max",
    "access": "private",
    "description": "The upper index bounds.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 359,
    "kind": "member",
    "name": "keyBase",
    "memberof": "src/octree/world/KeyIterator.js~KeyIterator",
    "static": false,
    "longname": "src/octree/world/KeyIterator.js~KeyIterator#keyBase",
    "access": "private",
    "description": "The base key coordinates.",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 360,
    "kind": "member",
    "name": "key",
    "memberof": "src/octree/world/KeyIterator.js~KeyIterator",
    "static": false,
    "longname": "src/octree/world/KeyIterator.js~KeyIterator#key",
    "access": "private",
    "description": "The current key iteration coordinates.",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "limit",
    "memberof": "src/octree/world/KeyIterator.js~KeyIterator",
    "static": false,
    "longname": "src/octree/world/KeyIterator.js~KeyIterator#limit",
    "access": "private",
    "description": "The iteration limits.",
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 362,
    "kind": "member",
    "name": "result",
    "memberof": "src/octree/world/KeyIterator.js~KeyIterator",
    "static": false,
    "longname": "src/octree/world/KeyIterator.js~KeyIterator#result",
    "access": "private",
    "description": "An iterator result.",
    "lineNumber": 87,
    "type": {
      "nullable": null,
      "types": [
        "IteratorResult"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "reset",
    "memberof": "src/octree/world/KeyIterator.js~KeyIterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/KeyIterator.js~KeyIterator#reset",
    "access": "public",
    "description": "Resets this iterator.",
    "lineNumber": 99,
    "return": {
      "nullable": null,
      "types": [
        "KeyIterator"
      ],
      "spread": false,
      "description": "This iterator."
    },
    "params": []
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "next",
    "memberof": "src/octree/world/KeyIterator.js~KeyIterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/KeyIterator.js~KeyIterator#next",
    "access": "public",
    "description": "Iterates over the key range.",
    "lineNumber": 134,
    "return": {
      "nullable": null,
      "types": [
        "IteratorResult"
      ],
      "spread": false,
      "description": "The next key."
    },
    "params": []
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "return",
    "memberof": "src/octree/world/KeyIterator.js~KeyIterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/KeyIterator.js~KeyIterator#return",
    "access": "public",
    "description": "Called when this iterator will no longer be run to completion.",
    "lineNumber": 182,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "An interator result value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "IteratorResult"
      ],
      "spread": false,
      "description": "A premature completion result."
    }
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "[Symbol.iterator]",
    "memberof": "src/octree/world/KeyIterator.js~KeyIterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/KeyIterator.js~KeyIterator#[Symbol.iterator]",
    "access": "public",
    "description": "Returns this iterator.",
    "lineNumber": 197,
    "return": {
      "nullable": null,
      "types": [
        "KeyIterator"
      ],
      "spread": false,
      "description": "An iterator."
    },
    "params": []
  },
  {
    "__docId__": 367,
    "kind": "file",
    "name": "src/octree/world/WorldOctant.js",
    "content": "import { Queue } from \"../../core/Queue.js\";\r\n\r\n/**\r\n * A world octant.\r\n *\r\n * This octant serves as a volume data container. Its position is implicitly\r\n * defined by its key while its size is defined by the LOD grid in which it\r\n * resides. Additionally, it can store a queue of pending CSG operations.\r\n */\r\n\r\nexport class WorldOctant {\r\n\r\n\t/**\r\n\t * Constructs a new world octant.\r\n\t */\r\n\r\n\tconstructor() {\r\n\r\n\t\t/**\r\n\t\t * Hermite data.\r\n\t\t *\r\n\t\t * @type {HermiteData}\r\n\t\t */\r\n\r\n\t\tthis.data = null;\r\n\r\n\t\t/**\r\n\t\t * A CSG operation queue.\r\n\t\t *\r\n\t\t * If this queue is not empty, the volume data has to be modified before it\r\n\t\t * can be contoured.\r\n\t\t *\r\n\t\t * @type {Queue}\r\n\t\t */\r\n\r\n\t\tthis.csg = new Queue();\r\n\r\n\t\t/**\r\n\t\t * A generated isosurface mesh.\r\n\t\t *\r\n\t\t * @type {Isosurface}\r\n\t\t */\r\n\r\n\t\tthis.isosurface = null;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/octree/world/WorldOctant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 368,
    "kind": "class",
    "name": "WorldOctant",
    "memberof": "src/octree/world/WorldOctant.js",
    "static": true,
    "longname": "src/octree/world/WorldOctant.js~WorldOctant",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/octree/world/WorldOctant.js",
    "importStyle": "{WorldOctant}",
    "description": "A world octant.\n\nThis octant serves as a volume data container. Its position is implicitly\ndefined by its key while its size is defined by the LOD grid in which it\nresides. Additionally, it can store a queue of pending CSG operations.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 369,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/octree/world/WorldOctant.js~WorldOctant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctant.js~WorldOctant#constructor",
    "access": "public",
    "description": "Constructs a new world octant.",
    "lineNumber": 17
  },
  {
    "__docId__": 370,
    "kind": "member",
    "name": "data",
    "memberof": "src/octree/world/WorldOctant.js~WorldOctant",
    "static": false,
    "longname": "src/octree/world/WorldOctant.js~WorldOctant#data",
    "access": "public",
    "description": "Hermite data.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "HermiteData"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 371,
    "kind": "member",
    "name": "csg",
    "memberof": "src/octree/world/WorldOctant.js~WorldOctant",
    "static": false,
    "longname": "src/octree/world/WorldOctant.js~WorldOctant#csg",
    "access": "public",
    "description": "A CSG operation queue.\n\nIf this queue is not empty, the volume data has to be modified before it\ncan be contoured.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "Queue"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 372,
    "kind": "member",
    "name": "isosurface",
    "memberof": "src/octree/world/WorldOctant.js~WorldOctant",
    "static": false,
    "longname": "src/octree/world/WorldOctant.js~WorldOctant#isosurface",
    "access": "public",
    "description": "A generated isosurface mesh.",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "Isosurface"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 373,
    "kind": "file",
    "name": "src/octree/world/WorldOctantId.js",
    "content": "/**\r\n * A world octant identifier.\r\n *\r\n * Each octant can be identified by a LOD index and a positional key.\r\n */\r\n\r\nexport class WorldOctantId {\r\n\r\n\t/**\r\n\t * Constructs a new world octant identifier.\r\n\t *\r\n\t * @param {Number} [lod=0] - The LOD index.\r\n\t * @param {Number} [key=0] - The key.\r\n\t */\r\n\r\n\tconstructor(lod = 0, key = 0) {\r\n\r\n\t\t/**\r\n\t\t * The LOD grid in which the world octant resides.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.lod = lod;\r\n\r\n\t\t/**\r\n\t\t * The unique key of the world octant.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.key = key;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the LOD index and key.\r\n\t *\r\n\t * @param {Number} lod - The LOD index.\r\n\t * @param {Number} key - The key.\r\n\t * @return {WorldOctantId} This octant identifier.\r\n\t */\r\n\r\n\tset(lod, key) {\r\n\r\n\t\tthis.lod = lod;\r\n\t\tthis.key = key;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the given octant identifier.\r\n\t *\r\n\t * @param {WorldOctantId} id - An octant identifier.\r\n\t * @return {WorldOctantId} This octant identifier.\r\n\t */\r\n\r\n\tcopy(id) {\r\n\r\n\t\tthis.lod = id.lod;\r\n\t\tthis.key = id.key;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Clones this octant identifier.\r\n\t *\r\n\t * @return {WorldOctantId} The cloned octant identifier.\r\n\t */\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy(this);\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/octree/world/WorldOctantId.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 374,
    "kind": "class",
    "name": "WorldOctantId",
    "memberof": "src/octree/world/WorldOctantId.js",
    "static": true,
    "longname": "src/octree/world/WorldOctantId.js~WorldOctantId",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/octree/world/WorldOctantId.js",
    "importStyle": "{WorldOctantId}",
    "description": "A world octant identifier.\n\nEach octant can be identified by a LOD index and a positional key.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 375,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/octree/world/WorldOctantId.js~WorldOctantId",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctantId.js~WorldOctantId#constructor",
    "access": "public",
    "description": "Constructs a new world octant identifier.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "lod",
        "description": "The LOD index."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "key",
        "description": "The key."
      }
    ]
  },
  {
    "__docId__": 376,
    "kind": "member",
    "name": "lod",
    "memberof": "src/octree/world/WorldOctantId.js~WorldOctantId",
    "static": false,
    "longname": "src/octree/world/WorldOctantId.js~WorldOctantId#lod",
    "access": "public",
    "description": "The LOD grid in which the world octant resides.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 377,
    "kind": "member",
    "name": "key",
    "memberof": "src/octree/world/WorldOctantId.js~WorldOctantId",
    "static": false,
    "longname": "src/octree/world/WorldOctantId.js~WorldOctantId#key",
    "access": "public",
    "description": "The unique key of the world octant.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "set",
    "memberof": "src/octree/world/WorldOctantId.js~WorldOctantId",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctantId.js~WorldOctantId#set",
    "access": "public",
    "description": "Sets the LOD index and key.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "lod",
        "description": "The LOD index."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WorldOctantId"
      ],
      "spread": false,
      "description": "This octant identifier."
    }
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "copy",
    "memberof": "src/octree/world/WorldOctantId.js~WorldOctantId",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctantId.js~WorldOctantId#copy",
    "access": "public",
    "description": "Copies the given octant identifier.",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "WorldOctantId"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "An octant identifier."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WorldOctantId"
      ],
      "spread": false,
      "description": "This octant identifier."
    }
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "clone",
    "memberof": "src/octree/world/WorldOctantId.js~WorldOctantId",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctantId.js~WorldOctantId#clone",
    "access": "public",
    "description": "Clones this octant identifier.",
    "lineNumber": 73,
    "return": {
      "nullable": null,
      "types": [
        "WorldOctantId"
      ],
      "spread": false,
      "description": "The cloned octant identifier."
    },
    "params": []
  },
  {
    "__docId__": 385,
    "kind": "file",
    "name": "src/octree/world/WorldOctantIterator.js",
    "content": "import IteratorResult from \"iterator-result\";\r\nimport { WorldOctantWrapper } from \"./WorldOctantWrapper.js\";\r\n\r\n/**\r\n * A world octant iterator.\r\n *\r\n * @implements {Iterator}\r\n * @implements {Iterable}\r\n */\r\n\r\nexport class WorldOctantIterator {\r\n\r\n\t/**\r\n\t * Constructs a new octant iterator.\r\n\t *\r\n\t * @param {WorldOctree} world - An octree.\r\n\t * @param {Number} [lod=0] - The LOD grid to consider.\r\n\t */\r\n\r\n\tconstructor(world, lod = 0) {\r\n\r\n\t\t/**\r\n\t\t * The octree.\r\n\t\t *\r\n\t\t * @type {WorldOctree}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.world = world;\r\n\r\n\t\t/**\r\n\t\t * The size of the cells in the specified LOD grid.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.cellSize = 0;\r\n\r\n\t\t/**\r\n\t\t * The internal octant iterator.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.iterator = null;\r\n\r\n\t\t/**\r\n\t\t * A world octant wrapper.\r\n\t\t *\r\n\t\t * @type {WorldOctantWrapper}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.octantWrapper = new WorldOctantWrapper();\r\n\t\tthis.octantWrapper.id.lod = lod;\r\n\r\n\t\t/**\r\n\t\t * An iterator result.\r\n\t\t *\r\n\t\t * @type {IteratorResult}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.result = new IteratorResult();\r\n\r\n\t\tthis.reset();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Resets this iterator.\r\n\t *\r\n\t * @return {KeyIterator} This iterator.\r\n\t */\r\n\r\n\treset() {\r\n\r\n\t\tconst lod = this.octantWrapper.id.lod;\r\n\t\tconst world = this.world;\r\n\t\tconst grid = world.getGrid(lod);\r\n\r\n\t\tif(grid !== undefined) {\r\n\r\n\t\t\tthis.cellSize = world.getCellSize(lod);\r\n\t\t\tthis.iterator = grid.entries();\r\n\t\t\tthis.result.reset();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error(\"Invalid LOD\", lod);\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Iterates over the octants.\r\n\t *\r\n\t * @return {IteratorResult} The next key.\r\n\t */\r\n\r\n\tnext() {\r\n\r\n\t\tconst result = this.result;\r\n\t\tconst octantWrapper = this.octantWrapper;\r\n\t\tconst internalResult = this.iterator.next();\r\n\t\tconst value = internalResult.value;\r\n\r\n\t\tif(!internalResult.done) {\r\n\r\n\t\t\tthis.keyDesign.unpackKey(value[0], octantWrapper.min);\r\n\t\t\toctantWrapper.min.multiplyScalar(this.cellSize).add(this.world.min);\r\n\t\t\toctantWrapper.max.copy(octantWrapper.min).addScalar(this.cellSize);\r\n\t\t\toctantWrapper.id.key = value[0];\r\n\t\t\toctantWrapper.octant = value[1];\r\n\r\n\t\t\tresult.value = octantWrapper;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tresult.value = null;\r\n\t\t\tresult.done = true;\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Called when this iterator will no longer be run to completion.\r\n\t *\r\n\t * @param {Object} value - An interator result value.\r\n\t * @return {IteratorResult} - A premature completion result.\r\n\t */\r\n\r\n\treturn(value) {\r\n\r\n\t\tthis.result.value = value;\r\n\t\tthis.result.done = true;\r\n\r\n\t\treturn this.result;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns this iterator.\r\n\t *\r\n\t * @return {WorldOctantIterator} An iterator.\r\n\t */\r\n\r\n\t[Symbol.iterator]() {\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/octree/world/WorldOctantIterator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 386,
    "kind": "class",
    "name": "WorldOctantIterator",
    "memberof": "src/octree/world/WorldOctantIterator.js",
    "static": true,
    "longname": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/octree/world/WorldOctantIterator.js",
    "importStyle": "{WorldOctantIterator}",
    "description": "A world octant iterator.",
    "lineNumber": 11,
    "interface": false,
    "implements": [
      "Iterator",
      "Iterable"
    ]
  },
  {
    "__docId__": 387,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator#constructor",
    "access": "public",
    "description": "Constructs a new octant iterator.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "WorldOctree"
        ],
        "spread": false,
        "optional": false,
        "name": "world",
        "description": "An octree."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "lod",
        "description": "The LOD grid to consider."
      }
    ]
  },
  {
    "__docId__": 388,
    "kind": "member",
    "name": "world",
    "memberof": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator",
    "static": false,
    "longname": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator#world",
    "access": "private",
    "description": "The octree.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "WorldOctree"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 389,
    "kind": "member",
    "name": "cellSize",
    "memberof": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator",
    "static": false,
    "longname": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator#cellSize",
    "access": "private",
    "description": "The size of the cells in the specified LOD grid.",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 390,
    "kind": "member",
    "name": "iterator",
    "memberof": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator",
    "static": false,
    "longname": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator#iterator",
    "access": "private",
    "description": "The internal octant iterator.",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 391,
    "kind": "member",
    "name": "octantWrapper",
    "memberof": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator",
    "static": false,
    "longname": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator#octantWrapper",
    "access": "private",
    "description": "A world octant wrapper.",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "WorldOctantWrapper"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 392,
    "kind": "member",
    "name": "result",
    "memberof": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator",
    "static": false,
    "longname": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator#result",
    "access": "private",
    "description": "An iterator result.",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "IteratorResult"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "reset",
    "memberof": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator#reset",
    "access": "public",
    "description": "Resets this iterator.",
    "lineNumber": 78,
    "return": {
      "nullable": null,
      "types": [
        "KeyIterator"
      ],
      "spread": false,
      "description": "This iterator."
    },
    "params": []
  },
  {
    "__docId__": 396,
    "kind": "method",
    "name": "next",
    "memberof": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator#next",
    "access": "public",
    "description": "Iterates over the octants.",
    "lineNumber": 106,
    "return": {
      "nullable": null,
      "types": [
        "IteratorResult"
      ],
      "spread": false,
      "description": "The next key."
    },
    "params": []
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "return",
    "memberof": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator#return",
    "access": "public",
    "description": "Called when this iterator will no longer be run to completion.",
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "An interator result value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "IteratorResult"
      ],
      "spread": false,
      "description": "A premature completion result."
    }
  },
  {
    "__docId__": 398,
    "kind": "method",
    "name": "[Symbol.iterator]",
    "memberof": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctantIterator.js~WorldOctantIterator#[Symbol.iterator]",
    "access": "public",
    "description": "Returns this iterator.",
    "lineNumber": 156,
    "return": {
      "nullable": null,
      "types": [
        "WorldOctantIterator"
      ],
      "spread": false,
      "description": "An iterator."
    },
    "params": []
  },
  {
    "__docId__": 399,
    "kind": "file",
    "name": "src/octree/world/WorldOctantWrapper.js",
    "content": "import { Vector3 } from \"math-ds\";\r\nimport { WorldOctantId } from \"./WorldOctantId.js\";\r\n\r\n/**\r\n * A world octant wrapper that stores positional information.\r\n */\r\n\r\nexport class WorldOctantWrapper {\r\n\r\n\t/**\r\n\t * Constructs a new octant wrapper.\r\n\t *\r\n\t * @param {WorldOctant} [octant=null] - An octant.\r\n\t * @param {WorldOctantId} [id] - The identifier of the octant.\r\n\t */\r\n\r\n\tconstructor(octant = null, id = new WorldOctantId()) {\r\n\r\n\t\t/**\r\n\t\t * A world octant.\r\n\t\t *\r\n\t\t * @type {WorldOctant}\r\n\t\t */\r\n\r\n\t\tthis.octant = octant;\r\n\r\n\t\t/**\r\n\t\t * A world octant identifier.\r\n\t\t *\r\n\t\t * @type {WorldOctantId}\r\n\t\t */\r\n\r\n\t\tthis.id = id;\r\n\r\n\t\t/**\r\n\t\t * The lower bounds.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\r\n\t\tthis.min = new Vector3();\r\n\r\n\t\t/**\r\n\t\t * The upper bounds.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\r\n\t\tthis.max = new Vector3();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the given octant wrapper.\r\n\t *\r\n\t * @param {WorldOctantWrapper} octantWrapper - An octant wrapper.\r\n\t * @return {WorldOctantWrapper} This octant wrapper.\r\n\t */\r\n\r\n\tcopy(octantWrapper) {\r\n\r\n\t\tthis.octant = octantWrapper.octant;\r\n\t\tthis.id.copy(octantWrapper.id);\r\n\t\tthis.min.copy(octantWrapper.min);\r\n\t\tthis.max.copy(octantWrapper.max);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Clones this octant wrapper.\r\n\t *\r\n\t * @return {WorldOctantWrapper} The cloned octant wrapper.\r\n\t */\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy(this);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the center of the wrapped octant.\r\n\t *\r\n\t * @param {Vector3} [target] - A target vector. If none is provided, a new one will be created.\r\n\t * @return {Vector3} A vector that describes the center of the octant.\r\n\t */\r\n\r\n\tgetCenter(target = new Vector3()) {\r\n\r\n\t\treturn target.addVectors(this.min, this.max).multiplyScalar(0.5);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the size of the wrapped octant.\r\n\t *\r\n\t * @param {Vector3} [target] - A target vector. If none is provided, a new one will be created.\r\n\t * @return {Vector3} A vector that describes the size of the octant.\r\n\t */\r\n\r\n\tgetDimensions(target = new Vector3()) {\r\n\r\n\t\treturn target.subVectors(this.max, this.min);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the given point lies inside the boundaries of this wrapper.\r\n\t *\r\n\t * @param {Vector3} point - A point.\r\n\t * @return {Boolean} Whether the given point lies inside the boundaries.\r\n\t */\r\n\r\n\tcontainsPoint(point) {\r\n\r\n\t\tconst min = this.min;\r\n\t\tconst max = this.max;\r\n\r\n\t\treturn (\r\n\t\t\tpoint.x >= min.x &&\r\n\t\t\tpoint.y >= min.y &&\r\n\t\t\tpoint.z >= min.z &&\r\n\t\t\tpoint.x <= max.x &&\r\n\t\t\tpoint.y <= max.y &&\r\n\t\t\tpoint.z <= max.z\r\n\t\t);\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/octree/world/WorldOctantWrapper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 400,
    "kind": "class",
    "name": "WorldOctantWrapper",
    "memberof": "src/octree/world/WorldOctantWrapper.js",
    "static": true,
    "longname": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/octree/world/WorldOctantWrapper.js",
    "importStyle": "{WorldOctantWrapper}",
    "description": "A world octant wrapper that stores positional information.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 401,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper#constructor",
    "access": "public",
    "description": "Constructs a new octant wrapper.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "WorldOctant"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "octant",
        "description": "An octant."
      },
      {
        "nullable": null,
        "types": [
          "WorldOctantId"
        ],
        "spread": false,
        "optional": true,
        "name": "id",
        "description": "The identifier of the octant."
      }
    ]
  },
  {
    "__docId__": 402,
    "kind": "member",
    "name": "octant",
    "memberof": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper",
    "static": false,
    "longname": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper#octant",
    "access": "public",
    "description": "A world octant.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "WorldOctant"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 403,
    "kind": "member",
    "name": "id",
    "memberof": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper",
    "static": false,
    "longname": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper#id",
    "access": "public",
    "description": "A world octant identifier.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "WorldOctantId"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 404,
    "kind": "member",
    "name": "min",
    "memberof": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper",
    "static": false,
    "longname": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper#min",
    "access": "public",
    "description": "The lower bounds.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 405,
    "kind": "member",
    "name": "max",
    "memberof": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper",
    "static": false,
    "longname": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper#max",
    "access": "public",
    "description": "The upper bounds.",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "copy",
    "memberof": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper#copy",
    "access": "public",
    "description": "Copies the given octant wrapper.",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "WorldOctantWrapper"
        ],
        "spread": false,
        "optional": false,
        "name": "octantWrapper",
        "description": "An octant wrapper."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WorldOctantWrapper"
      ],
      "spread": false,
      "description": "This octant wrapper."
    }
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "clone",
    "memberof": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper#clone",
    "access": "public",
    "description": "Clones this octant wrapper.",
    "lineNumber": 77,
    "return": {
      "nullable": null,
      "types": [
        "WorldOctantWrapper"
      ],
      "spread": false,
      "description": "The cloned octant wrapper."
    },
    "params": []
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "getCenter",
    "memberof": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper#getCenter",
    "access": "public",
    "description": "Computes the center of the wrapped octant.",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": true,
        "name": "target",
        "description": "A target vector. If none is provided, a new one will be created."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": "A vector that describes the center of the octant."
    }
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "getDimensions",
    "memberof": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper#getDimensions",
    "access": "public",
    "description": "Computes the size of the wrapped octant.",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": true,
        "name": "target",
        "description": "A target vector. If none is provided, a new one will be created."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": "A vector that describes the size of the octant."
    }
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "containsPoint",
    "memberof": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctantWrapper.js~WorldOctantWrapper#containsPoint",
    "access": "public",
    "description": "Checks if the given point lies inside the boundaries of this wrapper.",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "point",
        "description": "A point."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the given point lies inside the boundaries."
    }
  },
  {
    "__docId__": 412,
    "kind": "file",
    "name": "src/octree/world/WorldOctree.js",
    "content": "import { Vector3 } from \"math-ds\";\r\nimport { pattern } from \"sparse-octree\";\r\nimport { KeyDesign } from \"./KeyDesign.js\";\r\nimport { WorldOctantIterator } from \"./WorldOctantIterator.js\";\r\nimport { WorldOctantWrapper } from \"./WorldOctantWrapper.js\";\r\nimport { WorldOctreeCSG } from \"./WorldOctreeCSG.js\";\r\nimport { WorldOctreeRaycaster } from \"./WorldOctreeRaycaster.js\";\r\n\r\n/**\r\n * A vector.\r\n *\r\n * @type {Vector3}\r\n * @private\r\n */\r\n\r\nconst v = new Vector3();\r\n\r\n/**\r\n * Recursively deletes octant children.\r\n *\r\n * @param {WorldOctree} world - A world octree.\r\n * @param {WorldOctant} octant - The current octant.\r\n * @param {Number} keyX - The X-coordinate of the current octant key.\r\n * @param {Number} keyY - The Y-coordinate of the current octant key.\r\n * @param {Number} keyZ - The Z-coordinate of the current octant key.\r\n * @param {Number} lod - The current LOD value.\r\n */\r\n\r\nfunction removeChildren(world, octant, keyX, keyY, keyZ, lod) {\r\n\r\n\tlet grid, keyDesign;\r\n\tlet children, child;\r\n\tlet offset, key, i;\r\n\r\n\t// The octants from LOD zero have no children.\r\n\tif(lod > 0) {\r\n\r\n\t\t// Look at the next lower LOD.\r\n\t\t--lod;\r\n\r\n\t\tgrid = world.getGrid(lod);\r\n\t\tkeyDesign = world.getKeyDesign();\r\n\t\tchildren = octant.children;\r\n\r\n\t\t// Translate the key coordinates to the next lower LOD.\r\n\t\tkeyX <<= 1; keyY <<= 1; keyZ <<= 1;\r\n\r\n\t\tfor(i = 0; i < 8; ++i) {\r\n\r\n\t\t\t// Check if the child exists.\r\n\t\t\tif((children & (1 << i)) !== 0) {\r\n\r\n\t\t\t\toffset = pattern[i];\r\n\r\n\t\t\t\tv.set(\r\n\t\t\t\t\tkeyX + offset[0],\r\n\t\t\t\t\tkeyY + offset[1],\r\n\t\t\t\t\tkeyZ + offset[2]\r\n\t\t\t\t);\r\n\r\n\t\t\t\tkey = keyDesign.packKey(v);\r\n\r\n\t\t\t\t// Fetch the child and remove it from the grid.\r\n\t\t\t\tchild = grid.get(key);\r\n\t\t\t\tgrid.delete(key);\r\n\r\n\t\t\t\tremoveChildren(world, child, v.x, v.y, v.z, lod);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\toctant.children = 0;\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Recursively removes empty parent nodes.\r\n *\r\n * @param {WorldOctree} world - A world octree.\r\n * @param {Number} keyX - The X-coordinate of the deleted octant's key.\r\n * @param {Number} keyY - The Y-coordinate of the deleted octant's key.\r\n * @param {Number} keyZ - The Z-coordinate of the deleted octant's key.\r\n * @param {Number} lod - The current LOD value.\r\n */\r\n\r\nfunction prune(world, keyX, keyY, keyZ, lod) {\r\n\r\n\tlet grid, i, key, parent;\r\n\r\n\tif(++lod < world.levels) {\r\n\r\n\t\t// Look at the next higher LOD grid.\r\n\t\tgrid = world.getGrid(lod);\r\n\r\n\t\t// Determine the position of the deleted octant relative to its parent.\r\n\t\ti = WorldOctree.calculateOffsetIndex(keyX, keyY, keyZ);\r\n\r\n\t\t// Translate the key coordinates to the next higher LOD.\r\n\t\tv.set(keyX >>> 1, keyY >>> 1, keyZ >>> 1);\r\n\r\n\t\t// The resulting coordinates identify the parent octant.\r\n\t\tkey = world.getKeyDesign().packKey(v);\r\n\t\tparent = grid.get(key);\r\n\r\n\t\t// Unset the existence flag of the deleted child.\r\n\t\tparent.children &= ~(1 << i);\r\n\r\n\t\t// Check if there are any children left.\r\n\t\tif(parent.children === 0) {\r\n\r\n\t\t\t// Remove the empty parent and recur.\r\n\t\t\tgrid.delete(key);\r\n\t\t\tprune(world, v.x, v.y, v.z, lod);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * An octree that subdivides space for fast spatial searches.\r\n *\r\n * The purpose of this linear octree is to efficiently organise volume data. It\r\n * allows direct access to different LOD layers, octant neighbours and parents.\r\n *\r\n * The world octree is axis-aligned and cannot be rotated.\r\n */\r\n\r\nexport class WorldOctree {\r\n\r\n\t/**\r\n\t * Constructs a new world octree.\r\n\t *\r\n\t * Each octant can be uniquely identified by a 3D coordinate and a LOD value.\r\n\t * The individual values for X, Y and Z are combined into a 53-bit key.\r\n\t *\r\n\t * @param {Number} [cellSize=20] - The size of the smallest octants in LOD zero. Must be an integer i such that 0 < i < 2 ** (33 - levels).\r\n\t * @param {Number} [levels=8] - The amount of detail levels. Must be an integer i such that 0 < i < 33.\r\n\t * @param {KeyDesign} [keyDesign] - The bit allotments for the octant coordinates.\r\n\t */\r\n\r\n\tconstructor(cellSize = 20, levels = 8, keyDesign = new KeyDesign()) {\r\n\r\n\t\tlevels = Math.max(Math.min(Math.trunc(levels), 32), 1);\r\n\r\n\t\t/**\r\n\t\t * The LOD zero cell size.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.cellSize = Math.max(Math.min(Math.trunc(cellSize), Math.pow(2, 33 - levels) - 1), 1);\r\n\r\n\t\t/**\r\n\t\t * The octant key design.\r\n\t\t *\r\n\t\t * @type {KeyDesign}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.keyDesign = keyDesign;\r\n\r\n\t\t/**\r\n\t\t * The octant LOD grids.\r\n\t\t *\r\n\t\t * @type {Map[]}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.grids = [];\r\n\r\n\t\twhile(this.grids.length < levels) {\r\n\r\n\t\t\tthis.grids.push(new Map());\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * An empty octant wrapper that merely holds the bounds of this world.\r\n\t\t *\r\n\t\t * @type {WorldOctantWrapper}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.bounds = new WorldOctantWrapper();\r\n\r\n\t\tthis.bounds.min.copy(this.keyDesign.halfRange).multiplyScalar(-this.cellSize);\r\n\t\tthis.bounds.max.copy(this.keyDesign.halfRange).multiplyScalar(this.cellSize);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The lower bounds of this world.\r\n\t *\r\n\t * @type {Vector3}\r\n\t */\r\n\r\n\tget min() {\r\n\r\n\t\treturn this.bounds.min;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The upper bounds of this world.\r\n\t *\r\n\t * @type {Vector3}\r\n\t */\r\n\r\n\tget max() {\r\n\r\n\t\treturn this.bounds.max;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The amount of detail levels. This value can not be changed.\r\n\t *\r\n\t * @type {Number}\r\n\t */\r\n\r\n\tget levels() {\r\n\r\n\t\treturn this.grids.length;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The LOD zero octant grid.\r\n\t *\r\n\t * @type {Number}\r\n\t */\r\n\r\n\tget lodZero() {\r\n\r\n\t\treturn this.grids[0];\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the key design.\r\n\t *\r\n\t * @return {KeyDesign} The key design.\r\n\t */\r\n\r\n\tgetKeyDesign() {\r\n\r\n\t\treturn this.keyDesign;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the size of the cells in the specified LOD grid.\r\n\t *\r\n\t * @param {Number} [lod=0] - The LOD. Must be an integer; fractions will be truncated.\r\n\t * @return {Number} The cell size.\r\n\t */\r\n\r\n\tgetCellSize(lod = 0) {\r\n\r\n\t\treturn (this.cellSize << lod) >>> 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the center of this world.\r\n\t *\r\n\t * @param {Vector3} [target] - A target vector. If none is provided, a new one will be created.\r\n\t * @return {Vector3} A vector that describes the center of this world.\r\n\t */\r\n\r\n\tgetCenter(target) {\r\n\r\n\t\treturn this.bounds.getCenter(target);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the center of this world.\r\n\t *\r\n\t * Keeping the center at (0, 0, 0) is recommended because a large offset can\r\n\t * lead to floating point coordinate imprecisions.\r\n\t *\r\n\t * @param {Vector3} center - The new center.\r\n\t */\r\n\r\n\tsetCenter(center) {\r\n\r\n\t\tthis.min.copy(this.keyDesign.halfRange).multiplyScalar(-this.cellSize).add(center);\r\n\t\tthis.max.copy(this.keyDesign.halfRange).multiplyScalar(this.cellSize).add(center);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the size of this world.\r\n\t *\r\n\t * @param {Vector3} [target] - A target vector. If none is provided, a new one will be created.\r\n\t * @return {Vector3} A vector that describes the size of this world.\r\n\t */\r\n\r\n\tgetDimensions(target) {\r\n\r\n\t\treturn this.bounds.getDimensions(target);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The world octree depth is constant and corresponds to the amount of detail\r\n\t * levels.\r\n\t *\r\n\t * @return {Number} The octree depth.\r\n\t */\r\n\r\n\tgetDepth() {\r\n\r\n\t\treturn this.grids.length - 1;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a specific LOD grid.\r\n\t *\r\n\t * @param {Number} lod - The LOD of the grid.\r\n\t * @return {Map} The requested LOD grid or undefined if the given LOD is out of bounds.\r\n\t */\r\n\r\n\tgetGrid(lod) {\r\n\r\n\t\treturn (lod >= 0 && lod < this.grids.length) ? this.grids[lod] : undefined;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all octants.\r\n\t */\r\n\r\n\tclear() {\r\n\r\n\t\tlet i, l;\r\n\r\n\t\tfor(i = 0, l = this.grids.length; i < l; ++i) {\r\n\r\n\t\t\tthis.grids[i].clear();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the given point lies inside this octree's boundaries.\r\n\t *\r\n\t * @param {Vector3} point - A point.\r\n\t * @return {Boolean} Whether the given point lies inside this octree.\r\n\t */\r\n\r\n\tcontainsPoint(point) {\r\n\r\n\t\treturn this.bounds.containsPoint(point);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Fetches all octants of the specified LOD.\r\n\t *\r\n\t * @param {Number} level - The LOD.\r\n\t * @return {Iterable} A collection that contains the octants of the specified LOD.\r\n\t */\r\n\r\n\tfindOctantsByLevel(level) {\r\n\r\n\t\treturn this.octants(level);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates key coordinates based on a given position and LOD.\r\n\t *\r\n\t * @param {Vector3} position - A position.\r\n\t * @param {Number} lod - The target LOD.\r\n\t * @param {Vector3} [target] - A vector to store the result in. If none is provided, a new one will be created.\r\n\t * @return {Vector3} The key coordinates.\r\n\t */\r\n\r\n\tcalculateKeyCoordinates(position, lod, target = new Vector3()) {\r\n\r\n\t\tconst cellSize = this.cellSize << lod;\r\n\r\n\t\t// Translate to the origin (zero-based unsigned coordinates).\r\n\t\tv.subVectors(position, this.min);\r\n\r\n\t\ttarget.set(\r\n\t\t\tMath.trunc(v.x / cellSize),\r\n\t\t\tMath.trunc(v.y / cellSize),\r\n\t\t\tMath.trunc(v.z / cellSize)\r\n\t\t);\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the octant of a specific LOD that contains the given point.\r\n\t *\r\n\t * @param {Vector3} point - A point.\r\n\t * @param {Number} [lod=0] - A LOD value.\r\n\t * @return {WorldOctant} The octant that contains the point or undefined if it doesn't exist.\r\n\t */\r\n\r\n\tgetOctantByPoint(point, lod = 0) {\r\n\r\n\t\tconst keyDesign = this.keyDesign;\r\n\t\tconst grid = this.getGrid(lod);\r\n\r\n\t\tlet result;\r\n\r\n\t\tif(grid !== undefined) {\r\n\r\n\t\t\tif(this.containsPoint(point)) {\r\n\r\n\t\t\t\tthis.calculateKeyCoordinates(point, lod, v);\r\n\t\t\t\tresult = grid.get(keyDesign.packKey(v));\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error(\"Position out of range\", point);\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error(\"Invalid LOD\", lod);\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a specific octant by a given key.\r\n\t *\r\n\t * Children and empty parent nodes will be removed as well.\r\n\t *\r\n\t * @param {Number} key - The key of the octant that should be removed.\r\n\t * @param {Number} [lod=0] - The LOD of the octant.\r\n\t */\r\n\r\n\tremoveOctant(key, lod = 0) {\r\n\r\n\t\tconst keyDesign = this.keyDesign;\r\n\t\tconst grid = this.getGrid(lod);\r\n\r\n\t\tlet keyX, keyY, keyZ;\r\n\r\n\t\tif(grid !== undefined) {\r\n\r\n\t\t\tif(grid.has(key)) {\r\n\r\n\t\t\t\t// Note: v will be modified by removeChildren and prune.\r\n\t\t\t\tkeyDesign.unpackKey(key, v);\r\n\t\t\t\tkeyX = v.x; keyY = v.y; keyZ = v.z;\r\n\r\n\t\t\t\t// Recursively delete all children in the lower LOD grids.\r\n\t\t\t\tremoveChildren(this, grid.get(key), keyX, keyY, keyZ, lod);\r\n\r\n\t\t\t\t// Remove the octant.\r\n\t\t\t\tgrid.delete(key);\r\n\r\n\t\t\t\t// Recursively delete empty parent nodes.\r\n\t\t\t\tprune(this, keyX, keyY, keyZ, lod);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error(\"No octant found\", key);\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error(\"Invalid LOD\", lod);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Applies the given SDF to the affected octants.\r\n\t *\r\n\t * @param {SignedDistanceFunction} sdf - An SDF.\r\n\t */\r\n\r\n\tapplyCSG(sdf) {\r\n\r\n\t\tWorldOctreeCSG.applyCSG(this, sdf);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Finds the octants that intersect with the given ray. The intersecting\r\n\t * octants are sorted by distance, closest first. Empty octants will not be\r\n\t * included in the result.\r\n\t *\r\n\t * @param {Ray} ray - A ray.\r\n\t * @param {Array} [intersects] - An optional target list to be filled with the intersecting octants.\r\n\t * @return {WorldOctant[]} The intersecting octants.\r\n\t */\r\n\r\n\traycast(ray, intersects = []) {\r\n\r\n\t\treturn WorldOctreeRaycaster.intersectWorldOctree(this, ray, intersects);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new world octant iterator.\r\n\t *\r\n\t * The octants returned by this iterator are augmented with explicit\r\n\t * positional information. See {@link WorldOctantWrapper} for more details.\r\n\t *\r\n\t * @param {Number} [lod=0] - The LOD grid to consider.\r\n\t * @return {WorldOctantIterator} An iterator.\r\n\t */\r\n\r\n\toctants(lod = 0) {\r\n\r\n\t\treturn new WorldOctantIterator(this, lod);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates an offset index from octant key coordinates.\r\n\t *\r\n\t * The index identifies the octant's positional offset relative to its parent:\r\n\t *\r\n\t * ```text\r\n\t *  0: [0, 0, 0]\r\n\t *  1: [0, 0, 1]\r\n\t *  2: [0, 1, 0]\r\n\t *  3: [0, 1, 1]\r\n\t *  4: [1, 0, 0]\r\n\t *  5: [1, 0, 1]\r\n\t *  6: [1, 1, 0]\r\n\t *  7: [1, 1, 1]\r\n\t * ```\r\n\t *\r\n\t * Note: This binary pattern is defined by the external sparse-octree module.\r\n\t *\r\n\t * For more information on fast bitwise modulo with power of two divisors see:\r\n\t *  https://graphics.stanford.edu/~seander/bithacks.html#ModulusDivisionEasy\r\n\t *\r\n\t * @param {Number} x - The X-coordinate of the octant key.\r\n\t * @param {Number} y - The Y-coordinate of the octant key.\r\n\t * @param {Number} z - The Z-coordinate of the octant key.\r\n\t * @return {Number} The index of the relative position offset. Range: [0, 7].\r\n\t */\r\n\r\n\tstatic calculateOffsetIndex(x, y, z) {\r\n\r\n\t\t// Bitwise modulo: n % (1 << s) = n & ((1 << s) - 1) for positive integers.\r\n\t\tconst offsetX = x & 1;\r\n\t\tconst offsetY = y & 1;\r\n\t\tconst offsetZ = z & 1;\r\n\r\n\t\t// Use a reversed packing order for correct indexing (X * 4 + Y * 2 + Z).\r\n\t\treturn (offsetX << 2) + (offsetY << 1) + offsetZ;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/octree/world/WorldOctree.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 413,
    "kind": "variable",
    "name": "v",
    "memberof": "src/octree/world/WorldOctree.js",
    "static": true,
    "longname": "src/octree/world/WorldOctree.js~v",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctree.js",
    "importStyle": null,
    "description": "A vector.",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 414,
    "kind": "function",
    "name": "removeChildren",
    "memberof": "src/octree/world/WorldOctree.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/octree/world/WorldOctree.js~removeChildren",
    "access": "public",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctree.js",
    "importStyle": null,
    "description": "Recursively deletes octant children.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "WorldOctree"
        ],
        "spread": false,
        "optional": false,
        "name": "world",
        "description": "A world octree."
      },
      {
        "nullable": null,
        "types": [
          "WorldOctant"
        ],
        "spread": false,
        "optional": false,
        "name": "octant",
        "description": "The current octant."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "keyX",
        "description": "The X-coordinate of the current octant key."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "keyY",
        "description": "The Y-coordinate of the current octant key."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "keyZ",
        "description": "The Z-coordinate of the current octant key."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "lod",
        "description": "The current LOD value."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 415,
    "kind": "function",
    "name": "prune",
    "memberof": "src/octree/world/WorldOctree.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/octree/world/WorldOctree.js~prune",
    "access": "public",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctree.js",
    "importStyle": null,
    "description": "Recursively removes empty parent nodes.",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "WorldOctree"
        ],
        "spread": false,
        "optional": false,
        "name": "world",
        "description": "A world octree."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "keyX",
        "description": "The X-coordinate of the deleted octant's key."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "keyY",
        "description": "The Y-coordinate of the deleted octant's key."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "keyZ",
        "description": "The Z-coordinate of the deleted octant's key."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "lod",
        "description": "The current LOD value."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 416,
    "kind": "class",
    "name": "WorldOctree",
    "memberof": "src/octree/world/WorldOctree.js",
    "static": true,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/octree/world/WorldOctree.js",
    "importStyle": "{WorldOctree}",
    "description": "An octree that subdivides space for fast spatial searches.\n\nThe purpose of this linear octree is to efficiently organise volume data. It\nallows direct access to different LOD layers, octant neighbours and parents.\n\nThe world octree is axis-aligned and cannot be rotated.",
    "lineNumber": 133,
    "interface": false
  },
  {
    "__docId__": 417,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#constructor",
    "access": "public",
    "description": "Constructs a new world octree.\n\nEach octant can be uniquely identified by a 3D coordinate and a LOD value.\nThe individual values for X, Y and Z are combined into a 53-bit key.",
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "20",
        "defaultRaw": 20,
        "name": "cellSize",
        "description": "The size of the smallest octants in LOD zero. Must be an integer i such that 0 < i < 2 ** (33 - levels)."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "8",
        "defaultRaw": 8,
        "name": "levels",
        "description": "The amount of detail levels. Must be an integer i such that 0 < i < 33."
      },
      {
        "nullable": null,
        "types": [
          "KeyDesign"
        ],
        "spread": false,
        "optional": true,
        "name": "keyDesign",
        "description": "The bit allotments for the octant coordinates."
      }
    ]
  },
  {
    "__docId__": 418,
    "kind": "member",
    "name": "cellSize",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#cellSize",
    "access": "private",
    "description": "The LOD zero cell size.",
    "lineNumber": 157,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 419,
    "kind": "member",
    "name": "keyDesign",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#keyDesign",
    "access": "private",
    "description": "The octant key design.",
    "lineNumber": 166,
    "type": {
      "nullable": null,
      "types": [
        "KeyDesign"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 420,
    "kind": "member",
    "name": "grids",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#grids",
    "access": "private",
    "description": "The octant LOD grids.",
    "lineNumber": 175,
    "type": {
      "nullable": null,
      "types": [
        "Map[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 421,
    "kind": "member",
    "name": "bounds",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#bounds",
    "access": "private",
    "description": "An empty octant wrapper that merely holds the bounds of this world.",
    "lineNumber": 190,
    "type": {
      "nullable": null,
      "types": [
        "WorldOctantWrapper"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 422,
    "kind": "get",
    "name": "min",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#min",
    "access": "public",
    "description": "The lower bounds of this world.",
    "lineNumber": 203,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 423,
    "kind": "get",
    "name": "max",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#max",
    "access": "public",
    "description": "The upper bounds of this world.",
    "lineNumber": 215,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 424,
    "kind": "get",
    "name": "levels",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#levels",
    "access": "public",
    "description": "The amount of detail levels. This value can not be changed.",
    "lineNumber": 227,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 425,
    "kind": "get",
    "name": "lodZero",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#lodZero",
    "access": "public",
    "description": "The LOD zero octant grid.",
    "lineNumber": 239,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 426,
    "kind": "method",
    "name": "getKeyDesign",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#getKeyDesign",
    "access": "public",
    "description": "Returns the key design.",
    "lineNumber": 251,
    "return": {
      "nullable": null,
      "types": [
        "KeyDesign"
      ],
      "spread": false,
      "description": "The key design."
    },
    "params": []
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "getCellSize",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#getCellSize",
    "access": "public",
    "description": "Returns the size of the cells in the specified LOD grid.",
    "lineNumber": 264,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "lod",
        "description": "The LOD. Must be an integer; fractions will be truncated."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The cell size."
    }
  },
  {
    "__docId__": 428,
    "kind": "method",
    "name": "getCenter",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#getCenter",
    "access": "public",
    "description": "Computes the center of this world.",
    "lineNumber": 277,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": true,
        "name": "target",
        "description": "A target vector. If none is provided, a new one will be created."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": "A vector that describes the center of this world."
    }
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "setCenter",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#setCenter",
    "access": "public",
    "description": "Sets the center of this world.\n\nKeeping the center at (0, 0, 0) is recommended because a large offset can\nlead to floating point coordinate imprecisions.",
    "lineNumber": 292,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "center",
        "description": "The new center."
      }
    ],
    "return": null
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "getDimensions",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#getDimensions",
    "access": "public",
    "description": "Computes the size of this world.",
    "lineNumber": 306,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": true,
        "name": "target",
        "description": "A target vector. If none is provided, a new one will be created."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": "A vector that describes the size of this world."
    }
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "getDepth",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#getDepth",
    "access": "public",
    "description": "The world octree depth is constant and corresponds to the amount of detail\nlevels.",
    "lineNumber": 319,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The octree depth."
    },
    "params": []
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "getGrid",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#getGrid",
    "access": "public",
    "description": "Returns a specific LOD grid.",
    "lineNumber": 332,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "lod",
        "description": "The LOD of the grid."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": "The requested LOD grid or undefined if the given LOD is out of bounds."
    }
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "clear",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#clear",
    "access": "public",
    "description": "Removes all octants.",
    "lineNumber": 342,
    "params": [],
    "return": null
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "containsPoint",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#containsPoint",
    "access": "public",
    "description": "Checks if the given point lies inside this octree's boundaries.",
    "lineNumber": 361,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "point",
        "description": "A point."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the given point lies inside this octree."
    }
  },
  {
    "__docId__": 435,
    "kind": "method",
    "name": "findOctantsByLevel",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#findOctantsByLevel",
    "access": "public",
    "description": "Fetches all octants of the specified LOD.",
    "lineNumber": 374,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "level",
        "description": "The LOD."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Iterable"
      ],
      "spread": false,
      "description": "A collection that contains the octants of the specified LOD."
    }
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "calculateKeyCoordinates",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#calculateKeyCoordinates",
    "access": "public",
    "description": "Calculates key coordinates based on a given position and LOD.",
    "lineNumber": 389,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "A position."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "lod",
        "description": "The target LOD."
      },
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": true,
        "name": "target",
        "description": "A vector to store the result in. If none is provided, a new one will be created."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": "The key coordinates."
    }
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "getOctantByPoint",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#getOctantByPoint",
    "access": "public",
    "description": "Retrieves the octant of a specific LOD that contains the given point.",
    "lineNumber": 414,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "point",
        "description": "A point."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "lod",
        "description": "A LOD value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WorldOctant"
      ],
      "spread": false,
      "description": "The octant that contains the point or undefined if it doesn't exist."
    }
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "removeOctant",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#removeOctant",
    "access": "public",
    "description": "Removes a specific octant by a given key.\n\nChildren and empty parent nodes will be removed as well.",
    "lineNumber": 453,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key of the octant that should be removed."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "lod",
        "description": "The LOD of the octant."
      }
    ],
    "return": null
  },
  {
    "__docId__": 439,
    "kind": "method",
    "name": "applyCSG",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#applyCSG",
    "access": "public",
    "description": "Applies the given SDF to the affected octants.",
    "lineNumber": 497,
    "params": [
      {
        "nullable": null,
        "types": [
          "SignedDistanceFunction"
        ],
        "spread": false,
        "optional": false,
        "name": "sdf",
        "description": "An SDF."
      }
    ],
    "return": null
  },
  {
    "__docId__": 440,
    "kind": "method",
    "name": "raycast",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#raycast",
    "access": "public",
    "description": "Finds the octants that intersect with the given ray. The intersecting\noctants are sorted by distance, closest first. Empty octants will not be\nincluded in the result.",
    "lineNumber": 513,
    "params": [
      {
        "nullable": null,
        "types": [
          "Ray"
        ],
        "spread": false,
        "optional": false,
        "name": "ray",
        "description": "A ray."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "intersects",
        "description": "An optional target list to be filled with the intersecting octants."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WorldOctant[]"
      ],
      "spread": false,
      "description": "The intersecting octants."
    }
  },
  {
    "__docId__": 441,
    "kind": "method",
    "name": "octants",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree#octants",
    "access": "public",
    "description": "Returns a new world octant iterator.\n\nThe octants returned by this iterator are augmented with explicit\npositional information. See {@link WorldOctantWrapper} for more details.",
    "lineNumber": 529,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "lod",
        "description": "The LOD grid to consider."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WorldOctantIterator"
      ],
      "spread": false,
      "description": "An iterator."
    }
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "calculateOffsetIndex",
    "memberof": "src/octree/world/WorldOctree.js~WorldOctree",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/octree/world/WorldOctree.js~WorldOctree.calculateOffsetIndex",
    "access": "public",
    "description": "Calculates an offset index from octant key coordinates.\n\nThe index identifies the octant's positional offset relative to its parent:\n\n```text\n 0: [0, 0, 0]\n 1: [0, 0, 1]\n 2: [0, 1, 0]\n 3: [0, 1, 1]\n 4: [1, 0, 0]\n 5: [1, 0, 1]\n 6: [1, 1, 0]\n 7: [1, 1, 1]\n```\n\nNote: This binary pattern is defined by the external sparse-octree module.\n\nFor more information on fast bitwise modulo with power of two divisors see:\n https://graphics.stanford.edu/~seander/bithacks.html#ModulusDivisionEasy",
    "lineNumber": 562,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The X-coordinate of the octant key."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The Y-coordinate of the octant key."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "The Z-coordinate of the octant key."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The index of the relative position offset. Range: [0, 7]."
    }
  },
  {
    "__docId__": 443,
    "kind": "file",
    "name": "src/octree/world/WorldOctreeCSG.js",
    "content": "import { Box3, Vector3 } from \"math-ds\";\r\nimport { pattern } from \"sparse-octree\";\r\nimport { OperationType } from \"../../volume/csg/OperationType.js\";\r\nimport { IntermediateWorldOctant } from \"./IntermediateWorldOctant.js\";\r\nimport { WorldOctant } from \"./WorldOctant.js\";\r\n\r\n/**\r\n * A point.\r\n *\r\n * @type {Vector3}\r\n * @private\r\n */\r\n\r\nconst p = new Vector3();\r\n\r\n/**\r\n * A vector.\r\n *\r\n * @type {Vector3}\r\n * @private\r\n */\r\n\r\nconst v = new Vector3();\r\n\r\n/**\r\n * A box.\r\n *\r\n * @type {Box3}\r\n * @private\r\n */\r\n\r\nconst b0 = new Box3();\r\n\r\n/**\r\n * A box.\r\n *\r\n * @type {Box3}\r\n * @private\r\n */\r\n\r\nconst b1 = new Box3();\r\n\r\n/**\r\n * A box.\r\n *\r\n * @type {Box3}\r\n * @private\r\n */\r\n\r\nconst b2 = new Box3();\r\n\r\n/**\r\n * A list of key coordinate ranges used for octant culling during the recursive\r\n * octree traversal.\r\n *\r\n * @type {Box3[]}\r\n * @private\r\n */\r\n\r\nconst ranges = [];\r\n\r\n/**\r\n * Recursively applies the given SDF to existing octants in the affected region.\r\n *\r\n * This is a depth-first approach.\r\n *\r\n * @private\r\n * @param {WorldOctree} world - The world octree.\r\n * @param {SignedDistanceFunction} sdf - An SDF with a primary Difference CSG type.\r\n * @param {WorldOctant} octant - The current octant.\r\n * @param {Number} keyX - The X-coordinate of the current octant's key.\r\n * @param {Number} keyY - The Y-coordinate of the current octant's key.\r\n * @param {Number} keyZ - The Z-coordinate of the current octant's key.\r\n * @param {Number} lod - The current LOD.\r\n */\r\n\r\nfunction applyDifference(world, sdf, octant, keyX, keyY, keyZ, lod) {\r\n\r\n\tlet grid, keyDesign, children;\r\n\tlet range, offset, i;\r\n\r\n\toctant.csg.add(sdf);\r\n\r\n\tif(lod > 0) {\r\n\r\n\t\t// Look at the next lower LOD.\r\n\t\t--lod;\r\n\r\n\t\tgrid = world.getGrid(lod);\r\n\t\tkeyDesign = world.getKeyDesign();\r\n\t\tchildren = octant.children;\r\n\t\trange = ranges[lod];\r\n\r\n\t\t// Translate the key coordinates to the next lower LOD.\r\n\t\tkeyX <<= 1; keyY <<= 1; keyZ <<= 1;\r\n\r\n\t\tfor(i = 0; i < 8; ++i) {\r\n\r\n\t\t\t// Check if the child exists.\r\n\t\t\tif((children & (1 << i)) !== 0) {\r\n\r\n\t\t\t\toffset = pattern[i];\r\n\r\n\t\t\t\tp.set(\r\n\t\t\t\t\tkeyX + offset[0],\r\n\t\t\t\t\tkeyY + offset[1],\r\n\t\t\t\t\tkeyZ + offset[2]\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Check if the child is affected.\r\n\t\t\t\tif(range.containsPoint(p)) {\r\n\r\n\t\t\t\t\t// Apply the difference operation to the child.\r\n\t\t\t\t\tapplyDifference(world, sdf, grid.get(keyDesign.packKey(p)), p.x, p.y, p.z, lod);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A world octree CSG operation manager.\r\n */\r\n\r\nexport class WorldOctreeCSG {\r\n\r\n\t/**\r\n\t * Modifies all octants in the specified region with the given SDF.\r\n\t *\r\n\t * Octants that don't exist will be created across all LOD grids.\r\n\t *\r\n\t * @private\r\n\t * @param {WorldOctree} world - A world octree.\r\n\t * @param {Box3} region - The affected region.\r\n\t * @param {SignedDistanceFunction} sdf - An SDF with a primary Union CSG type.\r\n\t */\r\n\r\n\tstatic applyUnion(world, region, sdf) {\r\n\r\n\t\tconst keyDesign = world.getKeyDesign();\r\n\t\tconst lodZero = world.lodZero;\r\n\r\n\t\tconst a = b1.min;\r\n\t\tconst b = b1.max;\r\n\t\tconst c = b2.min;\r\n\t\tconst d = b2.max;\r\n\t\tconst range = b2;\r\n\r\n\t\tlet key, offset;\r\n\t\tlet grid, octant;\r\n\t\tlet lod, i;\r\n\r\n\t\t// Process LOD N to 1.\r\n\t\tfor(lod = world.getDepth(); lod > 0; --lod) {\r\n\r\n\t\t\tgrid = world.getGrid(lod);\r\n\r\n\t\t\t// Calculate a key coordinate range for this LOD and the next lower LOD.\r\n\t\t\tworld.calculateKeyCoordinates(region.min, lod, a);\r\n\t\t\tworld.calculateKeyCoordinates(region.max, lod, b);\r\n\t\t\tworld.calculateKeyCoordinates(region.min, lod - 1, c);\r\n\t\t\tworld.calculateKeyCoordinates(region.max, lod - 1, d);\r\n\r\n\t\t\tfor(key of keyDesign.keyRange(a, b)) {\r\n\r\n\t\t\t\tif(!grid.has(key)) {\r\n\r\n\t\t\t\t\toctant = new IntermediateWorldOctant();\r\n\t\t\t\t\toctant.csg.add(sdf);\r\n\t\t\t\t\tgrid.set(key, octant);\r\n\r\n\t\t\t\t\t// Translate the key coordinates to the next lower LOD.\r\n\t\t\t\t\tkeyDesign.unpackKey(key, v);\r\n\t\t\t\t\tv.x <<= 1; v.y <<= 1; v.z <<= 1;\r\n\r\n\t\t\t\t\t// Determine the existence of the child octants.\r\n\t\t\t\t\tfor(i = 0; i < 8; ++i) {\r\n\r\n\t\t\t\t\t\toffset = pattern[i];\r\n\r\n\t\t\t\t\t\tp.set(\r\n\t\t\t\t\t\t\tv.x + offset[0],\r\n\t\t\t\t\t\t\tv.y + offset[1],\r\n\t\t\t\t\t\t\tv.z + offset[2]\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tif(range.containsPoint(p)) {\r\n\r\n\t\t\t\t\t\t\t// The child exists! store the information in bit i.\r\n\t\t\t\t\t\t\toctant.children |= (1 << i);\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Finally, process LOD zero and add the SDF to the leaf octants.\r\n\t\tworld.calculateKeyCoordinates(region.min, 0, a);\r\n\t\tworld.calculateKeyCoordinates(region.max, 0, b);\r\n\r\n\t\tfor(key of keyDesign.keyRange(a, b)) {\r\n\r\n\t\t\tif(!lodZero.has(key)) {\r\n\r\n\t\t\t\toctant = new WorldOctant();\r\n\t\t\t\tlodZero.set(key, octant);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\toctant = lodZero.get(key);\r\n\r\n\t\t\t}\r\n\r\n\t\t\toctant.csg.add(sdf);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Modifies existing octants in the specified region with the given SDF.\r\n\t *\r\n\t * Calculating an entry LOD depending on the longest side of the affected\r\n\t * region could improve performance, but by skipping higher LOD grid some\r\n\t * intermediate octants won't be affected by the SDF.\r\n\t *\r\n\t * ```js\r\n\t * const min = region.min;\r\n\t * const max = region.max;\r\n\t *\r\n\t * const s = Math.max(\r\n\t * \tMath.max(Math.max(Math.abs(min.x), Math.abs(min.y)), Math.abs(min.z)),\r\n\t * \tMath.max(Math.max(Math.abs(max.x), Math.abs(max.y)), Math.abs(max.z))\r\n\t * );\r\n\t *\r\n\t * const quotientCeiled = Math.ceil(s / world.getCellSize());\r\n\t * const doublingsCeiled = Math.ceil(Math.log2(quotientCeiled));\r\n\t * const lod = Math.min(doublingsCeiled, world.getDepth());\r\n\t * ```\r\n\t *\r\n\t * @private\r\n\t * @param {WorldOctree} world - A world octree.\r\n\t * @param {Box3} region - The affected region.\r\n\t * @param {SignedDistanceFunction} sdf - An SDF with a primary Difference CSG type.\r\n\t */\r\n\r\n\tstatic applyDifference(world, region, sdf) {\r\n\r\n\t\tconst lod = world.getDepth();\r\n\t\tconst keyDesign = world.getKeyDesign();\r\n\t\tconst grid = world.getGrid(lod);\r\n\r\n\t\t// Consider all octants of the entry LOD grid that lie in the given region.\r\n\t\tconst a = world.calculateKeyCoordinates(region.min, lod, b1.min);\r\n\t\tconst b = world.calculateKeyCoordinates(region.max, lod, b1.max);\r\n\r\n\t\tlet i, l;\r\n\t\tlet range;\r\n\t\tlet key;\r\n\r\n\t\t// Precompute key coordinate ranges for the lower LOD grids.\r\n\t\tfor(i = 0, l = lod - 1; i < l; ++i) {\r\n\r\n\t\t\tif(i < ranges.length) {\r\n\r\n\t\t\t\t// Reuse a cached box.\r\n\t\t\t\trange = ranges[i];\r\n\r\n\t\t\t\tworld.calculateKeyCoordinates(region.min, i, range.min);\r\n\t\t\t\tworld.calculateKeyCoordinates(region.max, i, range.max);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Create a new box for this LOD and cache it.\r\n\t\t\t\tranges.push(new Box3(\r\n\t\t\t\t\tworld.calculateKeyCoordinates(region.min, i),\r\n\t\t\t\t\tworld.calculateKeyCoordinates(region.max, i)\r\n\t\t\t\t));\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Delve into the octant structures.\r\n\t\tfor(key of keyDesign.keyRange(a, b)) {\r\n\r\n\t\t\tif(grid.has(key)) {\r\n\r\n\t\t\t\tkeyDesign.unpackKey(key, v);\r\n\r\n\t\t\t\t// Recursively modify affected LOD zero cells.\r\n\t\t\t\tapplyDifference(world, sdf, grid.get(key), v.x, v.y, v.z, lod);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Modifies all existing octants.\r\n\t *\r\n\t * Warning: This CSG operation is highly destructive and expensive when used\r\n\t * as a primary operation. It should rather be used in CSG composites where it\r\n\t * can only affect local data.\r\n\t *\r\n\t * @private\r\n\t * @param {WorldOctree} world - A world octree.\r\n\t * @param {SignedDistanceFunction} sdf - An SDF with a primary Intersection CSG type.\r\n\t */\r\n\r\n\tstatic applyIntersection(world, sdf) {\r\n\r\n\t\tlet lod, octant;\r\n\r\n\t\tfor(lod = world.getDepth(); lod >= 0; --lod) {\r\n\r\n\t\t\tfor(octant of world.getGrid(lod).values()) {\r\n\r\n\t\t\t\toctant.csg.add(sdf);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Applies the given SDF to the affected octants.\r\n\t *\r\n\t * @param {WorldOctree} world - A world octree.\r\n\t * @param {SignedDistanceFunction} sdf - An SDF.\r\n\t */\r\n\r\n\tstatic applyCSG(world, sdf) {\r\n\r\n\t\t// Calculate the area of effect.\r\n\t\tconst region = b0.copy(sdf.getBoundingBox(true));\r\n\r\n\t\t// Limit the affected region to the world boundaries.\r\n\t\tregion.min.max(world.min);\r\n\t\tregion.max.min(world.max);\r\n\r\n\t\tswitch(sdf.operation) {\r\n\r\n\t\t\tcase OperationType.UNION:\r\n\t\t\t\tthis.applyUnion(world, region, sdf);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase OperationType.DIFFERENCE:\r\n\t\t\t\tthis.applyDifference(world, region, sdf);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase OperationType.INTERSECTION:\r\n\t\t\t\tthis.applyIntersection(world, sdf);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.error(\"No CSG operation type specified\", sdf);\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/octree/world/WorldOctreeCSG.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 444,
    "kind": "variable",
    "name": "p",
    "memberof": "src/octree/world/WorldOctreeCSG.js",
    "static": true,
    "longname": "src/octree/world/WorldOctreeCSG.js~p",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctreeCSG.js",
    "importStyle": null,
    "description": "A point.",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 445,
    "kind": "variable",
    "name": "v",
    "memberof": "src/octree/world/WorldOctreeCSG.js",
    "static": true,
    "longname": "src/octree/world/WorldOctreeCSG.js~v",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctreeCSG.js",
    "importStyle": null,
    "description": "A vector.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 446,
    "kind": "variable",
    "name": "b0",
    "memberof": "src/octree/world/WorldOctreeCSG.js",
    "static": true,
    "longname": "src/octree/world/WorldOctreeCSG.js~b0",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctreeCSG.js",
    "importStyle": null,
    "description": "A box.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Box3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 447,
    "kind": "variable",
    "name": "b1",
    "memberof": "src/octree/world/WorldOctreeCSG.js",
    "static": true,
    "longname": "src/octree/world/WorldOctreeCSG.js~b1",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctreeCSG.js",
    "importStyle": null,
    "description": "A box.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Box3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 448,
    "kind": "variable",
    "name": "b2",
    "memberof": "src/octree/world/WorldOctreeCSG.js",
    "static": true,
    "longname": "src/octree/world/WorldOctreeCSG.js~b2",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctreeCSG.js",
    "importStyle": null,
    "description": "A box.",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "Box3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 449,
    "kind": "variable",
    "name": "ranges",
    "memberof": "src/octree/world/WorldOctreeCSG.js",
    "static": true,
    "longname": "src/octree/world/WorldOctreeCSG.js~ranges",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctreeCSG.js",
    "importStyle": null,
    "description": "A list of key coordinate ranges used for octant culling during the recursive\noctree traversal.",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "Box3[]"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 450,
    "kind": "function",
    "name": "applyDifference",
    "memberof": "src/octree/world/WorldOctreeCSG.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/octree/world/WorldOctreeCSG.js~applyDifference",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctreeCSG.js",
    "importStyle": null,
    "description": "Recursively applies the given SDF to existing octants in the affected region.\n\nThis is a depth-first approach.",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "WorldOctree"
        ],
        "spread": false,
        "optional": false,
        "name": "world",
        "description": "The world octree."
      },
      {
        "nullable": null,
        "types": [
          "SignedDistanceFunction"
        ],
        "spread": false,
        "optional": false,
        "name": "sdf",
        "description": "An SDF with a primary Difference CSG type."
      },
      {
        "nullable": null,
        "types": [
          "WorldOctant"
        ],
        "spread": false,
        "optional": false,
        "name": "octant",
        "description": "The current octant."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "keyX",
        "description": "The X-coordinate of the current octant's key."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "keyY",
        "description": "The Y-coordinate of the current octant's key."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "keyZ",
        "description": "The Z-coordinate of the current octant's key."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "lod",
        "description": "The current LOD."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 451,
    "kind": "class",
    "name": "WorldOctreeCSG",
    "memberof": "src/octree/world/WorldOctreeCSG.js",
    "static": true,
    "longname": "src/octree/world/WorldOctreeCSG.js~WorldOctreeCSG",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/octree/world/WorldOctreeCSG.js",
    "importStyle": "{WorldOctreeCSG}",
    "description": "A world octree CSG operation manager.",
    "lineNumber": 130,
    "interface": false
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "applyUnion",
    "memberof": "src/octree/world/WorldOctreeCSG.js~WorldOctreeCSG",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/octree/world/WorldOctreeCSG.js~WorldOctreeCSG.applyUnion",
    "access": "private",
    "description": "Modifies all octants in the specified region with the given SDF.\n\nOctants that don't exist will be created across all LOD grids.",
    "lineNumber": 143,
    "params": [
      {
        "nullable": null,
        "types": [
          "WorldOctree"
        ],
        "spread": false,
        "optional": false,
        "name": "world",
        "description": "A world octree."
      },
      {
        "nullable": null,
        "types": [
          "Box3"
        ],
        "spread": false,
        "optional": false,
        "name": "region",
        "description": "The affected region."
      },
      {
        "nullable": null,
        "types": [
          "SignedDistanceFunction"
        ],
        "spread": false,
        "optional": false,
        "name": "sdf",
        "description": "An SDF with a primary Union CSG type."
      }
    ],
    "return": null
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "applyDifference",
    "memberof": "src/octree/world/WorldOctreeCSG.js~WorldOctreeCSG",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/octree/world/WorldOctreeCSG.js~WorldOctreeCSG.applyDifference",
    "access": "private",
    "description": "Modifies existing octants in the specified region with the given SDF.\n\nCalculating an entry LOD depending on the longest side of the affected\nregion could improve performance, but by skipping higher LOD grid some\nintermediate octants won't be affected by the SDF.\n\n```js\nconst min = region.min;\nconst max = region.max;\n\nconst s = Math.max(\n\tMath.max(Math.max(Math.abs(min.x), Math.abs(min.y)), Math.abs(min.z)),\n\tMath.max(Math.max(Math.abs(max.x), Math.abs(max.y)), Math.abs(max.z))\n);\n\nconst quotientCeiled = Math.ceil(s / world.getCellSize());\nconst doublingsCeiled = Math.ceil(Math.log2(quotientCeiled));\nconst lod = Math.min(doublingsCeiled, world.getDepth());\n```",
    "lineNumber": 257,
    "params": [
      {
        "nullable": null,
        "types": [
          "WorldOctree"
        ],
        "spread": false,
        "optional": false,
        "name": "world",
        "description": "A world octree."
      },
      {
        "nullable": null,
        "types": [
          "Box3"
        ],
        "spread": false,
        "optional": false,
        "name": "region",
        "description": "The affected region."
      },
      {
        "nullable": null,
        "types": [
          "SignedDistanceFunction"
        ],
        "spread": false,
        "optional": false,
        "name": "sdf",
        "description": "An SDF with a primary Difference CSG type."
      }
    ],
    "return": null
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "applyIntersection",
    "memberof": "src/octree/world/WorldOctreeCSG.js~WorldOctreeCSG",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/octree/world/WorldOctreeCSG.js~WorldOctreeCSG.applyIntersection",
    "access": "private",
    "description": "Modifies all existing octants.\n\nWarning: This CSG operation is highly destructive and expensive when used\nas a primary operation. It should rather be used in CSG composites where it\ncan only affect local data.",
    "lineNumber": 322,
    "params": [
      {
        "nullable": null,
        "types": [
          "WorldOctree"
        ],
        "spread": false,
        "optional": false,
        "name": "world",
        "description": "A world octree."
      },
      {
        "nullable": null,
        "types": [
          "SignedDistanceFunction"
        ],
        "spread": false,
        "optional": false,
        "name": "sdf",
        "description": "An SDF with a primary Intersection CSG type."
      }
    ],
    "return": null
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "applyCSG",
    "memberof": "src/octree/world/WorldOctreeCSG.js~WorldOctreeCSG",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/octree/world/WorldOctreeCSG.js~WorldOctreeCSG.applyCSG",
    "access": "public",
    "description": "Applies the given SDF to the affected octants.",
    "lineNumber": 345,
    "params": [
      {
        "nullable": null,
        "types": [
          "WorldOctree"
        ],
        "spread": false,
        "optional": false,
        "name": "world",
        "description": "A world octree."
      },
      {
        "nullable": null,
        "types": [
          "SignedDistanceFunction"
        ],
        "spread": false,
        "optional": false,
        "name": "sdf",
        "description": "An SDF."
      }
    ],
    "return": null
  },
  {
    "__docId__": 456,
    "kind": "file",
    "name": "src/octree/world/WorldOctreeRaycaster.js",
    "content": "import { Box3, Line3, Ray, Vector3 } from \"math-ds\";\r\nimport { pattern } from \"sparse-octree\";\r\nimport { WorldOctantWrapper } from \"./WorldOctantWrapper.js\";\r\n\r\n/**\r\n * A vector.\r\n *\r\n * @type {Vector3}\r\n * @private\r\n */\r\n\r\nconst v = new Vector3();\r\n\r\n/**\r\n * A line.\r\n *\r\n * @type {Line3}\r\n * @private\r\n */\r\n\r\nconst l = new Line3();\r\n\r\n/**\r\n * A box.\r\n *\r\n * @type {Box3}\r\n * @private\r\n */\r\n\r\nconst b = new Box3();\r\n\r\n/**\r\n * A box.\r\n *\r\n * @type {Box3}\r\n * @private\r\n */\r\n\r\nconst d = new Box3();\r\n\r\n/**\r\n * A ray.\r\n *\r\n * @type {Ray}\r\n * @private\r\n */\r\n\r\nconst r = new Ray();\r\n\r\n/**\r\n * A lookup-table containing octant ids. Used to determine the exit plane from\r\n * an octant.\r\n *\r\n * @type {Uint8Array[]}\r\n * @private\r\n */\r\n\r\nconst octantTable = [\r\n\r\n\tnew Uint8Array([4, 2, 1]),\r\n\tnew Uint8Array([5, 3, 8]),\r\n\tnew Uint8Array([6, 8, 3]),\r\n\tnew Uint8Array([7, 8, 8]),\r\n\tnew Uint8Array([8, 6, 5]),\r\n\tnew Uint8Array([8, 7, 8]),\r\n\tnew Uint8Array([8, 8, 7]),\r\n\tnew Uint8Array([8, 8, 8])\r\n\r\n];\r\n\r\n/**\r\n * A byte that stores raycasting flags.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\n\r\nlet flags = 0;\r\n\r\n/**\r\n * Finds the entry plane of the first octant that a ray travels through.\r\n *\r\n * Determining the first octant requires knowing which of the t0s is the\r\n * largest. The tms of the other axes must also be compared against that\r\n * largest t0.\r\n *\r\n * @private\r\n * @param {Number} tx0 - Ray projection parameter.\r\n * @param {Number} ty0 - Ray projection parameter.\r\n * @param {Number} tz0 - Ray projection parameter.\r\n * @param {Number} txm - Ray projection parameter mean.\r\n * @param {Number} tym - Ray projection parameter mean.\r\n * @param {Number} tzm - Ray projection parameter mean.\r\n * @return {Number} The index of the first octant that the ray travels through.\r\n */\r\n\r\nfunction findEntryOctant(tx0, ty0, tz0, txm, tym, tzm) {\r\n\r\n\tlet entry = 0;\r\n\r\n\t// Find the entry plane.\r\n\tif(tx0 > ty0 && tx0 > tz0) {\r\n\r\n\t\t// YZ-plane.\r\n\t\tif(tym < tx0) {\r\n\r\n\t\t\tentry |= 2;\r\n\r\n\t\t}\r\n\r\n\t\tif(tzm < tx0) {\r\n\r\n\t\t\tentry |= 1;\r\n\r\n\t\t}\r\n\r\n\t} else if(ty0 > tz0) {\r\n\r\n\t\t// XZ-plane.\r\n\t\tif(txm < ty0) {\r\n\r\n\t\t\tentry |= 4;\r\n\r\n\t\t}\r\n\r\n\t\tif(tzm < ty0) {\r\n\r\n\t\t\tentry |= 1;\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\t// XY-plane.\r\n\t\tif(txm < tz0) {\r\n\r\n\t\t\tentry |= 4;\r\n\r\n\t\t}\r\n\r\n\t\tif(tym < tz0) {\r\n\r\n\t\t\tentry |= 2;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn entry;\r\n\r\n}\r\n\r\n/**\r\n * Finds the next octant that intersects with the ray based on the exit plane of\r\n * the current one.\r\n *\r\n * @private\r\n * @param {Number} currentOctant - The index of the current octant.\r\n * @param {Number} tx1 - Ray projection parameter.\r\n * @param {Number} ty1 - Ray projection parameter.\r\n * @param {Number} tz1 - Ray projection parameter.\r\n * @return {Number} The index of the next octant that the ray travels through.\r\n */\r\n\r\nfunction findNextOctant(currentOctant, tx1, ty1, tz1) {\r\n\r\n\tlet min;\r\n\tlet exit = 0;\r\n\r\n\t// Find the exit plane.\r\n\tif(tx1 < ty1) {\r\n\r\n\t\tmin = tx1;\r\n\t\texit = 0; // YZ-plane.\r\n\r\n\t} else {\r\n\r\n\t\tmin = ty1;\r\n\t\texit = 1; // XZ-plane.\r\n\r\n\t}\r\n\r\n\tif(tz1 < min) {\r\n\r\n\t\texit = 2; // XY-plane.\r\n\r\n\t}\r\n\r\n\treturn octantTable[currentOctant][exit];\r\n\r\n}\r\n\r\n/**\r\n * Recursively traverses the given octant to find (pseudo) leaf octants that\r\n * intersect with the given ray.\r\n *\r\n * @private\r\n * @param {WorldOctree} world - The world octree.\r\n * @param {WorldOctant} octant - The current octant.\r\n * @param {Number} keyX - The X-coordinate of the current octant key.\r\n * @param {Number} keyY - The Y-coordinate of the current octant key.\r\n * @param {Number} keyZ - The Z-coordinate of the current octant key.\r\n * @param {Number} lod - The current LOD.\r\n * @param {Number} tx0 - Ray projection parameter. Initial tx0 = (minX - rayOriginX) / rayDirectionX.\r\n * @param {Number} ty0 - Ray projection parameter. Initial ty0 = (minY - rayOriginY) / rayDirectionY.\r\n * @param {Number} tz0 - Ray projection parameter. Initial tz0 = (minZ - rayOriginZ) / rayDirectionZ.\r\n * @param {Number} tx1 - Ray projection parameter. Initial tx1 = (maxX - rayOriginX) / rayDirectionX.\r\n * @param {Number} ty1 - Ray projection parameter. Initial ty1 = (maxY - rayOriginY) / rayDirectionY.\r\n * @param {Number} tz1 - Ray projection parameter. Initial tz1 = (maxZ - rayOriginZ) / rayDirectionZ.\r\n * @param {WorldOctant[]} intersects - An array to be filled with the intersecting octants.\r\n */\r\n\r\nfunction raycastOctant(world, octant, keyX, keyY, keyZ, lod, tx0, ty0, tz0, tx1, ty1, tz1, intersects) {\r\n\r\n\tlet keyDesign, cellSize;\r\n\tlet octantWrapper, grid;\r\n\tlet children, offset;\r\n\r\n\tlet currentOctant;\r\n\tlet txm, tym, tzm;\r\n\r\n\tlet i;\r\n\r\n\tif(tx1 >= 0.0 && ty1 >= 0.0 && tz1 >= 0.0) {\r\n\r\n\t\tkeyDesign = world.getKeyDesign();\r\n\r\n\t\tif(lod === 0 || octant.isosurface !== null) {\r\n\r\n\t\t\tcellSize = world.getCellSize(lod);\r\n\t\t\toctantWrapper = new WorldOctantWrapper(octant);\r\n\t\t\toctantWrapper.id.set(lod, keyDesign.packKey(v.set(keyX, keyY, keyZ)));\r\n\t\t\toctantWrapper.min.copy(v).multiplyScalar(cellSize).add(world.min);\r\n\t\t\toctantWrapper.max.copy(octantWrapper.min).addScalar(cellSize);\r\n\r\n\t\t\tintersects.push(octantWrapper);\r\n\r\n\t\t} else if(octant.children > 0) {\r\n\r\n\t\t\t// Look at the next lower LOD.\r\n\t\t\tgrid = world.getGrid(--lod);\r\n\t\t\tchildren = octant.children;\r\n\r\n\t\t\t// Translate the key coordinates to the next lower LOD.\r\n\t\t\tkeyX <<= 1; keyY <<= 1; keyZ <<= 1;\r\n\r\n\t\t\t// Compute means.\r\n\t\t\ttxm = 0.5 * (tx0 + tx1);\r\n\t\t\ttym = 0.5 * (ty0 + ty1);\r\n\t\t\ttzm = 0.5 * (tz0 + tz1);\r\n\r\n\t\t\tcurrentOctant = findEntryOctant(tx0, ty0, tz0, txm, tym, tzm);\r\n\r\n\t\t\tdo {\r\n\r\n\t\t\t\ti = flags ^ currentOctant;\r\n\r\n\t\t\t\tswitch(currentOctant) {\r\n\r\n\t\t\t\t\tcase 0: {\r\n\r\n\t\t\t\t\t\tif((children & (1 << i)) !== 0) {\r\n\r\n\t\t\t\t\t\t\toffset = pattern[i];\r\n\t\t\t\t\t\t\tv.set(keyX + offset[0], keyY + offset[1], keyZ + offset[2]);\r\n\t\t\t\t\t\t\traycastOctant(world, grid.get(keyDesign.packKey(v)), v.x, v.y, v.z, lod, tx0, ty0, tz0, txm, tym, tzm, intersects);\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcurrentOctant = findNextOctant(currentOctant, txm, tym, tzm);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase 1: {\r\n\r\n\t\t\t\t\t\tif((children & (1 << i)) !== 0) {\r\n\r\n\t\t\t\t\t\t\toffset = pattern[i];\r\n\t\t\t\t\t\t\tv.set(keyX + offset[0], keyY + offset[1], keyZ + offset[2]);\r\n\t\t\t\t\t\t\traycastOctant(world, grid.get(keyDesign.packKey(v)), v.x, v.y, v.z, lod, tx0, ty0, tzm, txm, tym, tz1, intersects);\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcurrentOctant = findNextOctant(currentOctant, txm, tym, tz1);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase 2: {\r\n\r\n\t\t\t\t\t\tif((children & (1 << i)) !== 0) {\r\n\r\n\t\t\t\t\t\t\toffset = pattern[i];\r\n\t\t\t\t\t\t\tv.set(keyX + offset[0], keyY + offset[1], keyZ + offset[2]);\r\n\t\t\t\t\t\t\traycastOctant(world, grid.get(keyDesign.packKey(v)), v.x, v.y, v.z, lod, tx0, tym, tz0, txm, ty1, tzm, intersects);\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcurrentOctant = findNextOctant(currentOctant, txm, ty1, tzm);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase 3: {\r\n\r\n\t\t\t\t\t\tif((children & (1 << i)) !== 0) {\r\n\r\n\t\t\t\t\t\t\toffset = pattern[i];\r\n\t\t\t\t\t\t\tv.set(keyX + offset[0], keyY + offset[1], keyZ + offset[2]);\r\n\t\t\t\t\t\t\traycastOctant(world, grid.get(keyDesign.packKey(v)), v.x, v.y, v.z, lod, tx0, tym, tzm, txm, ty1, tz1, intersects);\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcurrentOctant = findNextOctant(currentOctant, txm, ty1, tz1);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase 4: {\r\n\r\n\t\t\t\t\t\tif((children & (1 << i)) !== 0) {\r\n\r\n\t\t\t\t\t\t\toffset = pattern[i];\r\n\t\t\t\t\t\t\tv.set(keyX + offset[0], keyY + offset[1], keyZ + offset[2]);\r\n\t\t\t\t\t\t\traycastOctant(world, grid.get(keyDesign.packKey(v)), v.x, v.y, v.z, lod, txm, ty0, tz0, tx1, tym, tzm, intersects);\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcurrentOctant = findNextOctant(currentOctant, tx1, tym, tzm);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase 5: {\r\n\r\n\t\t\t\t\t\tif((children & (1 << i)) !== 0) {\r\n\r\n\t\t\t\t\t\t\toffset = pattern[i];\r\n\t\t\t\t\t\t\tv.set(keyX + offset[0], keyY + offset[1], keyZ + offset[2]);\r\n\t\t\t\t\t\t\traycastOctant(world, grid.get(keyDesign.packKey(v)), v.x, v.y, v.z, lod, txm, ty0, tzm, tx1, tym, tz1, intersects);\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcurrentOctant = findNextOctant(currentOctant, tx1, tym, tz1);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase 6: {\r\n\r\n\t\t\t\t\t\tif((children & (1 << i)) !== 0) {\r\n\r\n\t\t\t\t\t\t\toffset = pattern[i];\r\n\t\t\t\t\t\t\tv.set(keyX + offset[0], keyY + offset[1], keyZ + offset[2]);\r\n\t\t\t\t\t\t\traycastOctant(world, grid.get(keyDesign.packKey(v)), v.x, v.y, v.z, lod, txm, tym, tz0, tx1, ty1, tzm, intersects);\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcurrentOctant = findNextOctant(currentOctant, tx1, ty1, tzm);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase 7: {\r\n\r\n\t\t\t\t\t\tif((children & (1 << i)) !== 0) {\r\n\r\n\t\t\t\t\t\t\toffset = pattern[i];\r\n\t\t\t\t\t\t\tv.set(keyX + offset[0], keyY + offset[1], keyZ + offset[2]);\r\n\t\t\t\t\t\t\traycastOctant(world, grid.get(keyDesign.packKey(v)), v.x, v.y, v.z, lod, txm, tym, tzm, tx1, ty1, tz1, intersects);\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Far top right octant. No other octants can be reached from here.\r\n\t\t\t\t\t\tcurrentOctant = 8;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} while(currentOctant < 8);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Finds (pseudo) leaf octants in the given subtree that intersect with the\r\n * given ray.\r\n *\r\n * @private\r\n * @param {WorldOctree} world - The world octree.\r\n * @param {WorldOctantWrapper} subtree - A world octant, enriched with positional information.\r\n * @param {Vector3} keyCoordinates - The key coordinates of the octant.\r\n * @param {Ray} ray - A ray.\r\n * @param {WorldOctant[]} intersects - The intersecting octants. Sorted by distance, closest first\r\n */\r\n\r\nfunction intersectSubtree(world, subtree, keyCoordinates, ray, intersects) {\r\n\r\n\t// Translate the octant extents to the scene origin.\r\n\tconst min = b.min.set(0, 0, 0);\r\n\tconst max = b.max.subVectors(subtree.max, subtree.min);\r\n\r\n\tconst dimensions = subtree.getDimensions(d.min);\r\n\tconst halfDimensions = d.max.copy(dimensions).multiplyScalar(0.5);\r\n\r\n\tconst origin = r.origin.copy(ray.origin);\r\n\tconst direction = r.direction.copy(ray.direction);\r\n\r\n\tlet invDirX, invDirY, invDirZ;\r\n\tlet tx0, tx1, ty0, ty1, tz0, tz1;\r\n\r\n\t// Translate the ray to the center of the octant.\r\n\torigin.sub(subtree.getCenter(v)).add(halfDimensions);\r\n\r\n\t// Reset all flags.\r\n\tflags = 0;\r\n\r\n\t// Handle rays with negative directions.\r\n\tif(direction.x < 0.0) {\r\n\r\n\t\torigin.x = dimensions.x - origin.x;\r\n\t\tdirection.x = -direction.x;\r\n\t\tflags |= 4;\r\n\r\n\t}\r\n\r\n\tif(direction.y < 0.0) {\r\n\r\n\t\torigin.y = dimensions.y - origin.y;\r\n\t\tdirection.y = -direction.y;\r\n\t\tflags |= 2;\r\n\r\n\t}\r\n\r\n\tif(direction.z < 0.0) {\r\n\r\n\t\torigin.z = dimensions.z - origin.z;\r\n\t\tdirection.z = -direction.z;\r\n\t\tflags |= 1;\r\n\r\n\t}\r\n\r\n\t// Improve IEEE double stability.\r\n\tinvDirX = 1.0 / direction.x;\r\n\tinvDirY = 1.0 / direction.y;\r\n\tinvDirZ = 1.0 / direction.z;\r\n\r\n\t// Project the ray to the octant's boundaries.\r\n\ttx0 = (min.x - origin.x) * invDirX;\r\n\ttx1 = (max.x - origin.x) * invDirX;\r\n\tty0 = (min.y - origin.y) * invDirY;\r\n\tty1 = (max.y - origin.y) * invDirY;\r\n\ttz0 = (min.z - origin.z) * invDirZ;\r\n\ttz1 = (max.z - origin.z) * invDirZ;\r\n\r\n\t// Find the intersecting children.\r\n\traycastOctant(\r\n\t\tworld, subtree.octant,\r\n\t\tkeyCoordinates.x, keyCoordinates.y, keyCoordinates.z, world.getDepth(),\r\n\t\ttx0, ty0, tz0, tx1, ty1, tz1,\r\n\t\tintersects\r\n\t);\r\n\r\n}\r\n\r\n/**\r\n * A world octree raycaster.\r\n *\r\n * This raycaster is a specialised hybrid that uses a voxel traversal algorithm\r\n * to iterate over the octants of the highest LOD grid and an octree traversal\r\n * algorithm to raycast the identified subtrees.\r\n *\r\n * The voxel traversal implementation is a 3D supercover variant of the Digital\r\n * Differential Analyzer (DDA) line algorithm and is similar to the Bresenham\r\n * algorithm. The octree traversal algorithm relies on octant child existence\r\n * information to skip empty space and to avoid hashmap lookup misses.\r\n *\r\n * References:\r\n *\r\n *  \"Voxel Traversal along a 3D Line\"\r\n *  by D. Cohen (1994)\r\n *\r\n *  \"An Efficient Parametric Algorithm for Octree Traversal\"\r\n *  by J. Revelles et al. (2000)\r\n */\r\n\r\nexport class WorldOctreeRaycaster {\r\n\r\n\t/**\r\n\t * Finds (pseudo) leaf octants that intersect with the given ray.\r\n\t *\r\n\t * @param {WorldOctree} world - A world octree.\r\n\t * @param {Ray} ray - A ray.\r\n\t * @param {Array} [intersects] - An optional target list to be filled with the intersecting octants.\r\n\t * @return {WorldOctant[]} The intersecting octants. Sorted by distance, closest first.\r\n\t */\r\n\r\n\tstatic intersectWorldOctree(world, ray, intersects = []) {\r\n\r\n\t\tconst lod = world.getDepth();\r\n\t\tconst grid = world.getGrid(lod);\r\n\t\tconst cellSize = world.getCellSize(lod);\r\n\t\tconst keyDesign = world.getKeyDesign();\r\n\t\tconst octantWrapper = new WorldOctantWrapper();\r\n\r\n\t\tconst keyCoordinates0 = l.start;\r\n\t\tconst keyCoordinates1 = l.end;\r\n\r\n\t\t// Find the point at which the ray enters the world grid.\r\n\t\tconst a = !world.containsPoint(r.copy(ray).origin) ?\r\n\t\t\tr.intersectBox(world, r.origin) :\r\n\t\t\tr.origin;\r\n\r\n\t\tlet key, octant;\r\n\t\tlet t, b, n;\r\n\r\n\t\tlet dx, dy, dz;\r\n\t\tlet ax, ay, az, bx, by, bz;\r\n\t\tlet sx, sy, sz, exy, exz, ezy;\r\n\r\n\t\toctantWrapper.id.lod = lod;\r\n\r\n\t\t// Check if the ray hits the world octree.\r\n\t\tif(a !== null) {\r\n\r\n\t\t\t// Phase 1: Initialisation.\r\n\r\n\t\t\t// Find the ending point.\r\n\t\t\tt = cellSize << 1;\r\n\t\t\tb = r.at(t, v);\r\n\r\n\t\t\t// Calculate the starting and ending cell coordinates.\r\n\t\t\tworld.calculateKeyCoordinates(a, lod, keyCoordinates0);\r\n\t\t\tworld.calculateKeyCoordinates(b, lod, keyCoordinates1);\r\n\r\n\t\t\t// Calculate the key coordinate vector from start to end.\r\n\t\t\tdx = keyCoordinates1.x - keyCoordinates0.x;\r\n\t\t\tdy = keyCoordinates1.y - keyCoordinates0.y;\r\n\t\t\tdz = keyCoordinates1.z - keyCoordinates0.z;\r\n\r\n\t\t\t// Prepare step sizes and project the line onto the XY-, XZ- and ZY-plane.\r\n\t\t\tsx = Math.sign(dx); sy = Math.sign(dy); sz = Math.sign(dz);\r\n\t\t\tax = Math.abs(dx); ay = Math.abs(dy); az = Math.abs(dz);\r\n\t\t\tbx = 2 * ax; by = 2 * ay; bz = 2 * az;\r\n\t\t\texy = ay - ax; exz = az - ax; ezy = ay - az;\r\n\r\n\t\t\t// Phase 2: Incremental Traversal.\r\n\t\t\tfor(n = ax + ay + az; n > 0; --n) {\r\n\r\n\t\t\t\tkey = keyDesign.packKey(keyCoordinates0);\r\n\r\n\t\t\t\t// Check if this cell is populated.\r\n\t\t\t\tif(grid.has(key)) {\r\n\r\n\t\t\t\t\toctant = grid.get(key);\r\n\r\n\t\t\t\t\t// Setup a pseudo octree.\r\n\t\t\t\t\toctantWrapper.id.key = key;\r\n\t\t\t\t\toctantWrapper.octant = octant;\r\n\t\t\t\t\toctantWrapper.min.copy(keyCoordinates0);\r\n\t\t\t\t\toctantWrapper.min.multiplyScalar(cellSize);\r\n\t\t\t\t\toctantWrapper.min.add(world.min);\r\n\t\t\t\t\toctantWrapper.max.copy(octantWrapper.min).addScalar(cellSize);\r\n\r\n\t\t\t\t\tif(octant.isosurface === null) {\r\n\r\n\t\t\t\t\t\t// Raycast the subtree and collect intersecting children.\r\n\t\t\t\t\t\tintersectSubtree(world, octantWrapper, keyCoordinates0, ray, intersects);\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// The octant contains a mesh. No need to look deeper.\r\n\t\t\t\t\t\tintersects.push(octantWrapper.clone());\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(exy < 0) {\r\n\r\n\t\t\t\t\tif(exz < 0) {\r\n\r\n\t\t\t\t\t\tkeyCoordinates0.x += sx;\r\n\t\t\t\t\t\texy += by; exz += bz;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tkeyCoordinates0.z += sz;\r\n\t\t\t\t\t\texz -= bx; ezy += by;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if(ezy < 0) {\r\n\r\n\t\t\t\t\tkeyCoordinates0.z += sz;\r\n\t\t\t\t\texz -= bx; ezy += by;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tkeyCoordinates0.y += sy;\r\n\t\t\t\t\texy -= bx; ezy -= bz;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn intersects;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/octree/world/WorldOctreeRaycaster.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 457,
    "kind": "variable",
    "name": "v",
    "memberof": "src/octree/world/WorldOctreeRaycaster.js",
    "static": true,
    "longname": "src/octree/world/WorldOctreeRaycaster.js~v",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctreeRaycaster.js",
    "importStyle": null,
    "description": "A vector.",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 458,
    "kind": "variable",
    "name": "l",
    "memberof": "src/octree/world/WorldOctreeRaycaster.js",
    "static": true,
    "longname": "src/octree/world/WorldOctreeRaycaster.js~l",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctreeRaycaster.js",
    "importStyle": null,
    "description": "A line.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Line3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 459,
    "kind": "variable",
    "name": "b",
    "memberof": "src/octree/world/WorldOctreeRaycaster.js",
    "static": true,
    "longname": "src/octree/world/WorldOctreeRaycaster.js~b",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctreeRaycaster.js",
    "importStyle": null,
    "description": "A box.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Box3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 460,
    "kind": "variable",
    "name": "d",
    "memberof": "src/octree/world/WorldOctreeRaycaster.js",
    "static": true,
    "longname": "src/octree/world/WorldOctreeRaycaster.js~d",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctreeRaycaster.js",
    "importStyle": null,
    "description": "A box.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Box3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 461,
    "kind": "variable",
    "name": "r",
    "memberof": "src/octree/world/WorldOctreeRaycaster.js",
    "static": true,
    "longname": "src/octree/world/WorldOctreeRaycaster.js~r",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctreeRaycaster.js",
    "importStyle": null,
    "description": "A ray.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Ray"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 462,
    "kind": "variable",
    "name": "octantTable",
    "memberof": "src/octree/world/WorldOctreeRaycaster.js",
    "static": true,
    "longname": "src/octree/world/WorldOctreeRaycaster.js~octantTable",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctreeRaycaster.js",
    "importStyle": null,
    "description": "A lookup-table containing octant ids. Used to determine the exit plane from\nan octant.",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "Uint8Array[]"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 463,
    "kind": "variable",
    "name": "flags",
    "memberof": "src/octree/world/WorldOctreeRaycaster.js",
    "static": true,
    "longname": "src/octree/world/WorldOctreeRaycaster.js~flags",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctreeRaycaster.js",
    "importStyle": null,
    "description": "A byte that stores raycasting flags.",
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 464,
    "kind": "function",
    "name": "findEntryOctant",
    "memberof": "src/octree/world/WorldOctreeRaycaster.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/octree/world/WorldOctreeRaycaster.js~findEntryOctant",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctreeRaycaster.js",
    "importStyle": null,
    "description": "Finds the entry plane of the first octant that a ray travels through.\n\nDetermining the first octant requires knowing which of the t0s is the\nlargest. The tms of the other axes must also be compared against that\nlargest t0.",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "tx0",
        "description": "Ray projection parameter."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ty0",
        "description": "Ray projection parameter."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "tz0",
        "description": "Ray projection parameter."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "txm",
        "description": "Ray projection parameter mean."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "tym",
        "description": "Ray projection parameter mean."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "tzm",
        "description": "Ray projection parameter mean."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The index of the first octant that the ray travels through."
    },
    "ignore": true
  },
  {
    "__docId__": 465,
    "kind": "function",
    "name": "findNextOctant",
    "memberof": "src/octree/world/WorldOctreeRaycaster.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/octree/world/WorldOctreeRaycaster.js~findNextOctant",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctreeRaycaster.js",
    "importStyle": null,
    "description": "Finds the next octant that intersects with the ray based on the exit plane of\nthe current one.",
    "lineNumber": 165,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "currentOctant",
        "description": "The index of the current octant."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "tx1",
        "description": "Ray projection parameter."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ty1",
        "description": "Ray projection parameter."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "tz1",
        "description": "Ray projection parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The index of the next octant that the ray travels through."
    },
    "ignore": true
  },
  {
    "__docId__": 466,
    "kind": "function",
    "name": "raycastOctant",
    "memberof": "src/octree/world/WorldOctreeRaycaster.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/octree/world/WorldOctreeRaycaster.js~raycastOctant",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctreeRaycaster.js",
    "importStyle": null,
    "description": "Recursively traverses the given octant to find (pseudo) leaf octants that\nintersect with the given ray.",
    "lineNumber": 213,
    "params": [
      {
        "nullable": null,
        "types": [
          "WorldOctree"
        ],
        "spread": false,
        "optional": false,
        "name": "world",
        "description": "The world octree."
      },
      {
        "nullable": null,
        "types": [
          "WorldOctant"
        ],
        "spread": false,
        "optional": false,
        "name": "octant",
        "description": "The current octant."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "keyX",
        "description": "The X-coordinate of the current octant key."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "keyY",
        "description": "The Y-coordinate of the current octant key."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "keyZ",
        "description": "The Z-coordinate of the current octant key."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "lod",
        "description": "The current LOD."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "tx0",
        "description": "Ray projection parameter. Initial tx0 = (minX - rayOriginX) / rayDirectionX."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ty0",
        "description": "Ray projection parameter. Initial ty0 = (minY - rayOriginY) / rayDirectionY."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "tz0",
        "description": "Ray projection parameter. Initial tz0 = (minZ - rayOriginZ) / rayDirectionZ."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "tx1",
        "description": "Ray projection parameter. Initial tx1 = (maxX - rayOriginX) / rayDirectionX."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "ty1",
        "description": "Ray projection parameter. Initial ty1 = (maxY - rayOriginY) / rayDirectionY."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "tz1",
        "description": "Ray projection parameter. Initial tz1 = (maxZ - rayOriginZ) / rayDirectionZ."
      },
      {
        "nullable": null,
        "types": [
          "WorldOctant[]"
        ],
        "spread": false,
        "optional": false,
        "name": "intersects",
        "description": "An array to be filled with the intersecting octants."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 467,
    "kind": "function",
    "name": "intersectSubtree",
    "memberof": "src/octree/world/WorldOctreeRaycaster.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/octree/world/WorldOctreeRaycaster.js~intersectSubtree",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/octree/world/WorldOctreeRaycaster.js",
    "importStyle": null,
    "description": "Finds (pseudo) leaf octants in the given subtree that intersect with the\ngiven ray.",
    "lineNumber": 403,
    "params": [
      {
        "nullable": null,
        "types": [
          "WorldOctree"
        ],
        "spread": false,
        "optional": false,
        "name": "world",
        "description": "The world octree."
      },
      {
        "nullable": null,
        "types": [
          "WorldOctantWrapper"
        ],
        "spread": false,
        "optional": false,
        "name": "subtree",
        "description": "A world octant, enriched with positional information."
      },
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "keyCoordinates",
        "description": "The key coordinates of the octant."
      },
      {
        "nullable": null,
        "types": [
          "Ray"
        ],
        "spread": false,
        "optional": false,
        "name": "ray",
        "description": "A ray."
      },
      {
        "nullable": null,
        "types": [
          "WorldOctant[]"
        ],
        "spread": false,
        "optional": false,
        "name": "intersects",
        "description": "The intersecting octants. Sorted by distance, closest first"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 468,
    "kind": "class",
    "name": "WorldOctreeRaycaster",
    "memberof": "src/octree/world/WorldOctreeRaycaster.js",
    "static": true,
    "longname": "src/octree/world/WorldOctreeRaycaster.js~WorldOctreeRaycaster",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/octree/world/WorldOctreeRaycaster.js",
    "importStyle": "{WorldOctreeRaycaster}",
    "description": "A world octree raycaster.\n\nThis raycaster is a specialised hybrid that uses a voxel traversal algorithm\nto iterate over the octants of the highest LOD grid and an octree traversal\nalgorithm to raycast the identified subtrees.\n\nThe voxel traversal implementation is a 3D supercover variant of the Digital\nDifferential Analyzer (DDA) line algorithm and is similar to the Bresenham\nalgorithm. The octree traversal algorithm relies on octant child existence\ninformation to skip empty space and to avoid hashmap lookup misses.\n\nReferences:\n\n \"Voxel Traversal along a 3D Line\"\n by D. Cohen (1994)\n\n \"An Efficient Parametric Algorithm for Octree Traversal\"\n by J. Revelles et al. (2000)",
    "lineNumber": 493,
    "interface": false
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "intersectWorldOctree",
    "memberof": "src/octree/world/WorldOctreeRaycaster.js~WorldOctreeRaycaster",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/octree/world/WorldOctreeRaycaster.js~WorldOctreeRaycaster.intersectWorldOctree",
    "access": "public",
    "description": "Finds (pseudo) leaf octants that intersect with the given ray.",
    "lineNumber": 504,
    "params": [
      {
        "nullable": null,
        "types": [
          "WorldOctree"
        ],
        "spread": false,
        "optional": false,
        "name": "world",
        "description": "A world octree."
      },
      {
        "nullable": null,
        "types": [
          "Ray"
        ],
        "spread": false,
        "optional": false,
        "name": "ray",
        "description": "A ray."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "intersects",
        "description": "An optional target list to be filled with the intersecting octants."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "WorldOctant[]"
      ],
      "spread": false,
      "description": "The intersecting octants. Sorted by distance, closest first."
    }
  },
  {
    "__docId__": 470,
    "kind": "file",
    "name": "src/utils/BinaryUtils.js",
    "content": "/**\r\n * A collection of binary number utilities.\r\n */\r\n\r\nexport class BinaryUtils {\r\n\r\n\t/**\r\n\t * Interpretes the given string as a binary number.\r\n\t *\r\n\t * @param {String} s - A string that represents a binary number.\r\n\t * @return {Number} The parsed number.\r\n\t */\r\n\r\n\tstatic parseBin(s) {\r\n\r\n\t\treturn parseInt(s, 2);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a binary string representation of the given number.\r\n\t *\r\n\t * @param {Number} n - A number.\r\n\t * @param {Number} [minBits=64] - The minimum length of the string.\r\n\t * @return {String} The binary representation.\r\n\t */\r\n\r\n\tstatic createBinaryString(n, minBits = 64) {\r\n\r\n\t\tconst sign = (n < 0) ? \"-\" : \"\";\r\n\r\n\t\tlet result = Math.abs(n).toString(2);\r\n\r\n\t\twhile(result.length < minBits) {\r\n\r\n\t\t\tresult = \"0\" + result;\r\n\r\n\t\t}\r\n\r\n\t\treturn sign + result;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/utils/BinaryUtils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 471,
    "kind": "class",
    "name": "BinaryUtils",
    "memberof": "src/utils/BinaryUtils.js",
    "static": true,
    "longname": "src/utils/BinaryUtils.js~BinaryUtils",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/utils/BinaryUtils.js",
    "importStyle": "{BinaryUtils}",
    "description": "A collection of binary number utilities.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "parseBin",
    "memberof": "src/utils/BinaryUtils.js~BinaryUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/BinaryUtils.js~BinaryUtils.parseBin",
    "access": "public",
    "description": "Interpretes the given string as a binary number.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "A string that represents a binary number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The parsed number."
    }
  },
  {
    "__docId__": 473,
    "kind": "method",
    "name": "createBinaryString",
    "memberof": "src/utils/BinaryUtils.js~BinaryUtils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/BinaryUtils.js~BinaryUtils.createBinaryString",
    "access": "public",
    "description": "Creates a binary string representation of the given number.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "A number."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "64",
        "defaultRaw": 64,
        "name": "minBits",
        "description": "The minimum length of the string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "The binary representation."
    }
  },
  {
    "__docId__": 474,
    "kind": "file",
    "name": "src/utils/index.js",
    "content": "/**\r\n * Utility components.\r\n *\r\n * @module rabbit-hole/utils\r\n */\r\n\r\nexport { BinaryUtils } from \"./BinaryUtils.js\";\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/utils/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 475,
    "kind": "file",
    "name": "src/volume/csg/ConstructiveSolidGeometry.js",
    "content": "import { pattern } from \"sparse-octree\";\r\nimport { Box3, Vector3 } from \"math-ds\";\r\nimport { Material } from \"../Material.js\";\r\nimport { EdgeData } from \"../EdgeData.js\";\r\nimport { HermiteData } from \"../HermiteData.js\";\r\nimport { Edge } from \"../Edge.js\";\r\nimport { OperationType } from \"./OperationType.js\";\r\nimport { Union } from \"./Union.js\";\r\nimport { Difference } from \"./Difference.js\";\r\nimport { Intersection } from \"./Intersection.js\";\r\n\r\n/**\r\n * The world size of the current data cell.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\n\r\nlet cellSize = 0;\r\n\r\n/**\r\n * The lower bounds of the current data cell.\r\n *\r\n * @type {Vector3}\r\n * @private\r\n */\r\n\r\nconst cellPosition = new Vector3();\r\n\r\n/**\r\n * Finds out which grid points lie inside the area of the given operation.\r\n *\r\n * @private\r\n * @param {Operation} operation - A CSG operation.\r\n * @return {Box3} The index bounds.\r\n */\r\n\r\nfunction computeIndexBounds(operation) {\r\n\r\n\tconst s = cellSize;\r\n\tconst n = HermiteData.resolution;\r\n\r\n\tconst min = new Vector3(0, 0, 0);\r\n\tconst max = new Vector3(n, n, n);\r\n\r\n\tconst cellBounds = new Box3(cellPosition, cellPosition.clone().addScalar(cellSize));\r\n\tconst operationBounds = operation.getBoundingBox();\r\n\r\n\tif(operation.type !== OperationType.INTERSECTION) {\r\n\r\n\t\tif(operationBounds.intersectsBox(cellBounds)) {\r\n\r\n\t\t\tmin.copy(operationBounds.min).max(cellBounds.min).sub(cellBounds.min);\r\n\r\n\t\t\tmin.x = Math.ceil(min.x * n / s);\r\n\t\t\tmin.y = Math.ceil(min.y * n / s);\r\n\t\t\tmin.z = Math.ceil(min.z * n / s);\r\n\r\n\t\t\tmax.copy(operationBounds.max).min(cellBounds.max).sub(cellBounds.min);\r\n\r\n\t\t\tmax.x = Math.floor(max.x * n / s);\r\n\t\t\tmax.y = Math.floor(max.y * n / s);\r\n\t\t\tmax.z = Math.floor(max.z * n / s);\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// The chunk is unaffected by this operation.\r\n\t\t\tmin.set(n, n, n);\r\n\t\t\tmax.set(0, 0, 0);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn new Box3(min, max);\r\n\r\n}\r\n\r\n/**\r\n * Combines material indices.\r\n *\r\n * @private\r\n * @param {Operation} operation - A CSG operation.\r\n * @param {HermiteData} data0 - A target data set.\r\n * @param {HermiteData} data1 - A predominant data set.\r\n * @param {Box3} bounds - Grid iteration limits.\r\n */\r\n\r\nfunction combineMaterialIndices(operation, data0, data1, bounds) {\r\n\r\n\tconst n = HermiteData.resolution;\r\n\tconst m = n + 1;\r\n\tconst mm = m * m;\r\n\r\n\tconst X = bounds.max.x;\r\n\tconst Y = bounds.max.y;\r\n\tconst Z = bounds.max.z;\r\n\r\n\tlet x, y, z;\r\n\r\n\tfor(z = bounds.min.z; z <= Z; ++z) {\r\n\r\n\t\tfor(y = bounds.min.y; y <= Y; ++y) {\r\n\r\n\t\t\tfor(x = bounds.min.x; x <= X; ++x) {\r\n\r\n\t\t\t\toperation.updateMaterialIndex((z * mm + y * m + x), data0, data1);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Generates material indices.\r\n *\r\n * @private\r\n * @param {DensityFunction} operation - A CSG operation.\r\n * @param {HermiteData} data - A target data set.\r\n * @param {Box3} bounds - Grid iteration limits.\r\n */\r\n\r\nfunction generateMaterialIndices(operation, data, bounds) {\r\n\r\n\tconst s = cellSize;\r\n\tconst n = HermiteData.resolution;\r\n\tconst m = n + 1;\r\n\tconst mm = m * m;\r\n\r\n\tconst materialIndices = data.materialIndices;\r\n\r\n\tconst base = cellPosition;\r\n\tconst offset = new Vector3();\r\n\tconst position = new Vector3();\r\n\r\n\tconst X = bounds.max.x;\r\n\tconst Y = bounds.max.y;\r\n\tconst Z = bounds.max.z;\r\n\r\n\tlet materialIndex;\r\n\tlet materials = 0;\r\n\r\n\tlet x, y, z;\r\n\r\n\tfor(z = bounds.min.z; z <= Z; ++z) {\r\n\r\n\t\toffset.z = z * s / n;\r\n\r\n\t\tfor(y = bounds.min.y; y <= Y; ++y) {\r\n\r\n\t\t\toffset.y = y * s / n;\r\n\r\n\t\t\tfor(x = bounds.min.x; x <= X; ++x) {\r\n\r\n\t\t\t\toffset.x = x * s / n;\r\n\r\n\t\t\t\tmaterialIndex = operation.generateMaterialIndex(position.addVectors(base, offset));\r\n\r\n\t\t\t\tif(materialIndex !== Material.AIR) {\r\n\r\n\t\t\t\t\tmaterialIndices[z * mm + y * m + x] = materialIndex;\r\n\r\n\t\t\t\t\t++materials;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tdata.materials = materials;\r\n\r\n}\r\n\r\n/**\r\n * Combines edges.\r\n *\r\n * @private\r\n * @param {Operation} operation - A CSG operation.\r\n * @param {HermiteData} data0 - A target data set.\r\n * @param {HermiteData} data1 - A predominant data set.\r\n * @return {Object} The generated edge data.\r\n */\r\n\r\nfunction combineEdges(operation, data0, data1) {\r\n\r\n\tconst n = HermiteData.resolution;\r\n\tconst m = n + 1;\r\n\tconst mm = m * m;\r\n\r\n\tconst indexOffsets = new Uint32Array([1, m, mm]);\r\n\tconst materialIndices = data0.materialIndices;\r\n\r\n\tconst edge1 = new Edge();\r\n\tconst edge0 = new Edge();\r\n\r\n\tconst edgeData1 = data1.edgeData;\r\n\tconst edgeData0 = data0.edgeData;\r\n\r\n\tconst lengths = new Uint32Array(3);\r\n\tconst edgeCount = EdgeData.calculate1DEdgeCount(n);\r\n\r\n\tconst edgeData = new EdgeData(\r\n\t\tn,\r\n\t\tMath.min(edgeCount, edgeData0.indices[0].length + edgeData1.indices[0].length),\r\n\t\tMath.min(edgeCount, edgeData0.indices[1].length + edgeData1.indices[1].length),\r\n\t\tMath.min(edgeCount, edgeData0.indices[2].length + edgeData1.indices[2].length)\r\n\t);\r\n\r\n\tlet edges1, zeroCrossings1, normals1;\r\n\tlet edges0, zeroCrossings0, normals0;\r\n\tlet edges, zeroCrossings, normals;\r\n\tlet indexOffset;\r\n\r\n\tlet indexA1, indexB1;\r\n\tlet indexA0, indexB0;\r\n\r\n\tlet m1, m2;\r\n\tlet edge;\r\n\r\n\tlet c, d, i, j, il, jl;\r\n\r\n\t// Process the edges along the X-axis, then Y and finally Z.\r\n\tfor(c = 0, d = 0; d < 3; c = 0, ++d) {\r\n\r\n\t\tedges1 = edgeData1.indices[d];\r\n\t\tedges0 = edgeData0.indices[d];\r\n\t\tedges = edgeData.indices[d];\r\n\r\n\t\tzeroCrossings1 = edgeData1.zeroCrossings[d];\r\n\t\tzeroCrossings0 = edgeData0.zeroCrossings[d];\r\n\t\tzeroCrossings = edgeData.zeroCrossings[d];\r\n\r\n\t\tnormals1 = edgeData1.normals[d];\r\n\t\tnormals0 = edgeData0.normals[d];\r\n\t\tnormals = edgeData.normals[d];\r\n\r\n\t\tindexOffset = indexOffsets[d];\r\n\r\n\t\til = edges1.length;\r\n\t\tjl = edges0.length;\r\n\r\n\t\t// Process all generated edges.\r\n\t\tfor(i = 0, j = 0; i < il; ++i) {\r\n\r\n\t\t\tindexA1 = edges1[i];\r\n\t\t\tindexB1 = indexA1 + indexOffset;\r\n\r\n\t\t\tm1 = materialIndices[indexA1];\r\n\t\t\tm2 = materialIndices[indexB1];\r\n\r\n\t\t\tif(m1 !== m2 && (m1 === Material.AIR || m2 === Material.AIR)) {\r\n\r\n\t\t\t\tedge1.t = zeroCrossings1[i];\r\n\t\t\t\tedge1.n.x = normals1[i * 3];\r\n\t\t\t\tedge1.n.y = normals1[i * 3 + 1];\r\n\t\t\t\tedge1.n.z = normals1[i * 3 + 2];\r\n\r\n\t\t\t\tif(operation.type === OperationType.DIFFERENCE) {\r\n\r\n\t\t\t\t\tedge1.n.negate();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tedge = edge1;\r\n\r\n\t\t\t\t// Process existing edges up to the generated edge.\r\n\t\t\t\twhile(j < jl && edges0[j] <= indexA1) {\r\n\r\n\t\t\t\t\tindexA0 = edges0[j];\r\n\t\t\t\t\tindexB0 = indexA0 + indexOffset;\r\n\r\n\t\t\t\t\tedge0.t = zeroCrossings0[j];\r\n\t\t\t\t\tedge0.n.x = normals0[j * 3];\r\n\t\t\t\t\tedge0.n.y = normals0[j * 3 + 1];\r\n\t\t\t\t\tedge0.n.z = normals0[j * 3 + 2];\r\n\r\n\t\t\t\t\tm1 = materialIndices[indexA0];\r\n\r\n\t\t\t\t\tif(indexA0 < indexA1) {\r\n\r\n\t\t\t\t\t\tm2 = materialIndices[indexB0];\r\n\r\n\t\t\t\t\t\tif(m1 !== m2 && (m1 === Material.AIR || m2 === Material.AIR)) {\r\n\r\n\t\t\t\t\t\t\t// The edge exhibits a material change and there is no conflict.\r\n\t\t\t\t\t\t\tedges[c] = indexA0;\r\n\t\t\t\t\t\t\tzeroCrossings[c] = edge0.t;\r\n\t\t\t\t\t\t\tnormals[c * 3] = edge0.n.x;\r\n\t\t\t\t\t\t\tnormals[c * 3 + 1] = edge0.n.y;\r\n\t\t\t\t\t\t\tnormals[c * 3 + 2] = edge0.n.z;\r\n\r\n\t\t\t\t\t\t\t++c;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// Resolve the conflict.\r\n\t\t\t\t\t\tedge = operation.selectEdge(edge0, edge1, (m1 === Material.SOLID));\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t++j;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tedges[c] = indexA1;\r\n\t\t\t\tzeroCrossings[c] = edge.t;\r\n\t\t\t\tnormals[c * 3] = edge.n.x;\r\n\t\t\t\tnormals[c * 3 + 1] = edge.n.y;\r\n\t\t\t\tnormals[c * 3 + 2] = edge.n.z;\r\n\r\n\t\t\t\t++c;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Collect remaining edges.\r\n\t\twhile(j < jl) {\r\n\r\n\t\t\tindexA0 = edges0[j];\r\n\t\t\tindexB0 = indexA0 + indexOffset;\r\n\r\n\t\t\tm1 = materialIndices[indexA0];\r\n\t\t\tm2 = materialIndices[indexB0];\r\n\r\n\t\t\tif(m1 !== m2 && (m1 === Material.AIR || m2 === Material.AIR)) {\r\n\r\n\t\t\t\tedges[c] = indexA0;\r\n\t\t\t\tzeroCrossings[c] = zeroCrossings0[j];\r\n\t\t\t\tnormals[c * 3] = normals0[j * 3];\r\n\t\t\t\tnormals[c * 3 + 1] = normals0[j * 3 + 1];\r\n\t\t\t\tnormals[c * 3 + 2] = normals0[j * 3 + 2];\r\n\r\n\t\t\t\t++c;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t++j;\r\n\r\n\t\t}\r\n\r\n\t\tlengths[d] = c;\r\n\r\n\t}\r\n\r\n\treturn { edgeData, lengths };\r\n\r\n}\r\n\r\n/**\r\n * Generates edge data.\r\n *\r\n * @private\r\n * @param {DensityFunction} operation - A CSG operation.\r\n * @param {HermiteData} data - A target data set.\r\n * @param {Box3} bounds - Grid iteration limits.\r\n * @return {Object} The generated edge data.\r\n */\r\n\r\nfunction generateEdges(operation, data, bounds) {\r\n\r\n\tconst s = cellSize;\r\n\tconst n = HermiteData.resolution;\r\n\tconst m = n + 1;\r\n\tconst mm = m * m;\r\n\r\n\tconst indexOffsets = new Uint32Array([1, m, mm]);\r\n\tconst materialIndices = data.materialIndices;\r\n\r\n\tconst base = cellPosition;\r\n\tconst offsetA = new Vector3();\r\n\tconst offsetB = new Vector3();\r\n\tconst edge = new Edge();\r\n\r\n\tconst lengths = new Uint32Array(3);\r\n\tconst edgeData = new EdgeData(n, EdgeData.calculate1DEdgeCount(n));\r\n\r\n\tlet edges, zeroCrossings, normals, indexOffset;\r\n\tlet indexA, indexB;\r\n\r\n\tlet minX, minY, minZ;\r\n\tlet maxX, maxY, maxZ;\r\n\r\n\tlet c, d, a, axis;\r\n\tlet x, y, z;\r\n\r\n\t// Process the edges along the X-axis, then Y and finally Z.\r\n\tfor(a = 4, c = 0, d = 0; d < 3; a >>= 1, c = 0, ++d) {\r\n\r\n\t\t// X: [1, 0, 0] Y: [0, 1, 0] Z: [0, 0, 1].\r\n\t\taxis = pattern[a];\r\n\r\n\t\tedges = edgeData.indices[d];\r\n\t\tzeroCrossings = edgeData.zeroCrossings[d];\r\n\t\tnormals = edgeData.normals[d];\r\n\t\tindexOffset = indexOffsets[d];\r\n\r\n\t\tminX = bounds.min.x; maxX = bounds.max.x;\r\n\t\tminY = bounds.min.y; maxY = bounds.max.y;\r\n\t\tminZ = bounds.min.z; maxZ = bounds.max.z;\r\n\r\n\t\t/* Include edges that straddle the bounding box and avoid processing grid\r\n\t\tpoints at chunk borders. */\r\n\t\tswitch(d) {\r\n\r\n\t\t\tcase 0:\r\n\t\t\t\tminX = Math.max(minX - 1, 0);\r\n\t\t\t\tmaxX = Math.min(maxX, n - 1);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 1:\r\n\t\t\t\tminY = Math.max(minY - 1, 0);\r\n\t\t\t\tmaxY = Math.min(maxY, n - 1);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 2:\r\n\t\t\t\tminZ = Math.max(minZ - 1, 0);\r\n\t\t\t\tmaxZ = Math.min(maxZ, n - 1);\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\tfor(z = minZ; z <= maxZ; ++z) {\r\n\r\n\t\t\tfor(y = minY; y <= maxY; ++y) {\r\n\r\n\t\t\t\tfor(x = minX; x <= maxX; ++x) {\r\n\r\n\t\t\t\t\tindexA = z * mm + y * m + x;\r\n\t\t\t\t\tindexB = indexA + indexOffset;\r\n\r\n\t\t\t\t\t// Check if the edge exhibits a material change.\r\n\t\t\t\t\tif(materialIndices[indexA] !== materialIndices[indexB]) {\r\n\r\n\t\t\t\t\t\toffsetA.set(\r\n\t\t\t\t\t\t\tx * s / n,\r\n\t\t\t\t\t\t\ty * s / n,\r\n\t\t\t\t\t\t\tz * s / n\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\toffsetB.set(\r\n\t\t\t\t\t\t\t(x + axis[0]) * s / n,\r\n\t\t\t\t\t\t\t(y + axis[1]) * s / n,\r\n\t\t\t\t\t\t\t(z + axis[2]) * s / n\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tedge.a.addVectors(base, offsetA);\r\n\t\t\t\t\t\tedge.b.addVectors(base, offsetB);\r\n\r\n\t\t\t\t\t\t// Create and store the edge data.\r\n\t\t\t\t\t\toperation.generateEdge(edge);\r\n\r\n\t\t\t\t\t\tedges[c] = indexA;\r\n\t\t\t\t\t\tzeroCrossings[c] = edge.t;\r\n\t\t\t\t\t\tnormals[c * 3] = edge.n.x;\r\n\t\t\t\t\t\tnormals[c * 3 + 1] = edge.n.y;\r\n\t\t\t\t\t\tnormals[c * 3 + 2] = edge.n.z;\r\n\r\n\t\t\t\t\t\t++c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tlengths[d] = c;\r\n\r\n\t}\r\n\r\n\treturn { edgeData, lengths };\r\n\r\n}\r\n\r\n/**\r\n * Either generates or combines volume data based on the operation type.\r\n *\r\n * @private\r\n * @param {Operation} operation - A CSG operation.\r\n * @param {HermiteData} data0 - A target data set. May be empty or full.\r\n * @param {HermiteData} [data1] - A predominant data set. Cannot be null.\r\n */\r\n\r\nfunction update(operation, data0, data1) {\r\n\r\n\tconst bounds = computeIndexBounds(operation);\r\n\r\n\tlet result, edgeData, lengths, d;\r\n\tlet done = false;\r\n\r\n\t// Grid points.\r\n\tif(operation.type === OperationType.DENSITY_FUNCTION) {\r\n\r\n\t\tgenerateMaterialIndices(operation, data0, bounds);\r\n\r\n\t} else if(data0.empty) {\r\n\r\n\t\tif(operation.type === OperationType.UNION) {\r\n\r\n\t\t\tdata0.set(data1);\r\n\t\t\tdone = true;\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tif(!(data0.full && operation.type === OperationType.UNION)) {\r\n\r\n\t\t\tcombineMaterialIndices(operation, data0, data1, bounds);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Edges.\r\n\tif(!done && !data0.empty && !data0.full) {\r\n\r\n\t\tresult = (operation.type === OperationType.DENSITY_FUNCTION) ?\r\n\t\t\tgenerateEdges(operation, data0, bounds) :\r\n\t\t\tcombineEdges(operation, data0, data1);\r\n\r\n\t\tedgeData = result.edgeData;\r\n\t\tlengths = result.lengths;\r\n\r\n\t\t// Cut off empty data.\r\n\t\tfor(d = 0; d < 3; ++d) {\r\n\r\n\t\t\tedgeData.indices[d] = edgeData.indices[d].slice(0, lengths[d]);\r\n\t\t\tedgeData.zeroCrossings[d] = edgeData.zeroCrossings[d].slice(0, lengths[d]);\r\n\t\t\tedgeData.normals[d] = edgeData.normals[d].slice(0, lengths[d] * 3);\r\n\r\n\t\t}\r\n\r\n\t\tdata0.edgeData = edgeData;\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Executes the given operation to generate data.\r\n *\r\n * @private\r\n * @param {Operation} operation - An operation.\r\n * @return {HermiteData} The generated data or null if the data is empty.\r\n */\r\n\r\nfunction execute(operation) {\r\n\r\n\tconst children = operation.children;\r\n\r\n\tlet result, data;\r\n\tlet i, l;\r\n\r\n\tif(operation.type === OperationType.DENSITY_FUNCTION) {\r\n\r\n\t\t// Create a data target.\r\n\t\tresult = new HermiteData();\r\n\r\n\t\t// Use the density function to generate data.\r\n\t\tupdate(operation, result);\r\n\r\n\t}\r\n\r\n\t// Union, Difference or Intersection.\r\n\tfor(i = 0, l = children.length; i < l; ++i) {\r\n\r\n\t\t// Generate the full result of the child operation recursively.\r\n\t\tdata = execute(children[i]);\r\n\r\n\t\tif(result === undefined) {\r\n\r\n\t\t\tresult = data;\r\n\r\n\t\t} else if(data !== null) {\r\n\r\n\t\t\tif(result === null) {\r\n\r\n\t\t\t\tif(operation.type === OperationType.UNION) {\r\n\r\n\t\t\t\t\t// Build upon the first non-empty data.\r\n\t\t\t\t\tresult = data;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Combine the two data sets.\r\n\t\t\t\tupdate(operation, result, data);\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if(operation.type === OperationType.INTERSECTION) {\r\n\r\n\t\t\t// An intersection with nothing results in nothing.\r\n\t\t\tresult = null;\r\n\r\n\t\t}\r\n\r\n\t\tif(result === null && operation.type !== OperationType.UNION) {\r\n\r\n\t\t\t// Further subtractions and intersections would have no effect.\r\n\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn (result !== null && result.empty) ? null : result;\r\n\r\n}\r\n\r\n/**\r\n * Constructive Solid Geometry combines Signed Distance Functions by using\r\n * Boolean operators to generate and transform volume data.\r\n */\r\n\r\nexport class ConstructiveSolidGeometry {\r\n\r\n\t/**\r\n\t * Transforms the given Hermite data in two steps:\r\n\t *\r\n\t *  1. Generate data by executing the given SDF\r\n\t *  2. Combine the generated data with the given data\r\n\t *\r\n\t * @param {Number[]} min - The lower bounds of the volume data cell.\r\n\t * @param {Number} size - The size of the volume data cell.\r\n\t * @param {HermiteData} data - The volume data that should be modified.\r\n\t * @param {SignedDistanceFunction} sdf - An SDF.\r\n\t * @return {HermiteData} The modified, uncompressed data or null if the result is empty.\r\n\t */\r\n\r\n\tstatic run(min, size, data, sdf) {\r\n\r\n\t\tcellPosition.fromArray(min);\r\n\t\tcellSize = size;\r\n\r\n\t\tif(data === null) {\r\n\r\n\t\t\tif(sdf.operation === OperationType.UNION) {\r\n\r\n\t\t\t\t// Prepare an empty target.\r\n\t\t\t\tdata = new HermiteData(false);\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdata.decompress();\r\n\r\n\t\t}\r\n\r\n\t\t// Step 1.\r\n\t\tlet operation = sdf.toCSG();\r\n\r\n\t\tconst generatedData = (data !== null) ? execute(operation) : null;\r\n\r\n\t\tif(generatedData !== null) {\r\n\r\n\t\t\t// Wrap the operation in a super operation.\r\n\t\t\tswitch(sdf.operation) {\r\n\r\n\t\t\t\tcase OperationType.UNION:\r\n\t\t\t\t\toperation = new Union(operation);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase OperationType.DIFFERENCE:\r\n\t\t\t\t\toperation = new Difference(operation);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase OperationType.INTERSECTION:\r\n\t\t\t\t\toperation = new Intersection(operation);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Step 2.\r\n\t\t\tupdate(operation, data, generatedData);\r\n\r\n\t\t\t// Provoke an isosurface extraction.\r\n\t\t\tdata.contoured = false;\r\n\r\n\t\t}\r\n\r\n\t\treturn (data !== null && data.empty) ? null : data;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/csg/ConstructiveSolidGeometry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 476,
    "kind": "variable",
    "name": "cellSize",
    "memberof": "src/volume/csg/ConstructiveSolidGeometry.js",
    "static": true,
    "longname": "src/volume/csg/ConstructiveSolidGeometry.js~cellSize",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/csg/ConstructiveSolidGeometry.js",
    "importStyle": null,
    "description": "The world size of the current data cell.",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 477,
    "kind": "variable",
    "name": "cellPosition",
    "memberof": "src/volume/csg/ConstructiveSolidGeometry.js",
    "static": true,
    "longname": "src/volume/csg/ConstructiveSolidGeometry.js~cellPosition",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/csg/ConstructiveSolidGeometry.js",
    "importStyle": null,
    "description": "The lower bounds of the current data cell.",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 478,
    "kind": "function",
    "name": "computeIndexBounds",
    "memberof": "src/volume/csg/ConstructiveSolidGeometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/volume/csg/ConstructiveSolidGeometry.js~computeIndexBounds",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/csg/ConstructiveSolidGeometry.js",
    "importStyle": null,
    "description": "Finds out which grid points lie inside the area of the given operation.",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "Operation"
        ],
        "spread": false,
        "optional": false,
        "name": "operation",
        "description": "A CSG operation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Box3"
      ],
      "spread": false,
      "description": "The index bounds."
    },
    "ignore": true
  },
  {
    "__docId__": 479,
    "kind": "function",
    "name": "combineMaterialIndices",
    "memberof": "src/volume/csg/ConstructiveSolidGeometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/volume/csg/ConstructiveSolidGeometry.js~combineMaterialIndices",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/csg/ConstructiveSolidGeometry.js",
    "importStyle": null,
    "description": "Combines material indices.",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "Operation"
        ],
        "spread": false,
        "optional": false,
        "name": "operation",
        "description": "A CSG operation."
      },
      {
        "nullable": null,
        "types": [
          "HermiteData"
        ],
        "spread": false,
        "optional": false,
        "name": "data0",
        "description": "A target data set."
      },
      {
        "nullable": null,
        "types": [
          "HermiteData"
        ],
        "spread": false,
        "optional": false,
        "name": "data1",
        "description": "A predominant data set."
      },
      {
        "nullable": null,
        "types": [
          "Box3"
        ],
        "spread": false,
        "optional": false,
        "name": "bounds",
        "description": "Grid iteration limits."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 480,
    "kind": "function",
    "name": "generateMaterialIndices",
    "memberof": "src/volume/csg/ConstructiveSolidGeometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/volume/csg/ConstructiveSolidGeometry.js~generateMaterialIndices",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/csg/ConstructiveSolidGeometry.js",
    "importStyle": null,
    "description": "Generates material indices.",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "DensityFunction"
        ],
        "spread": false,
        "optional": false,
        "name": "operation",
        "description": "A CSG operation."
      },
      {
        "nullable": null,
        "types": [
          "HermiteData"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "A target data set."
      },
      {
        "nullable": null,
        "types": [
          "Box3"
        ],
        "spread": false,
        "optional": false,
        "name": "bounds",
        "description": "Grid iteration limits."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 481,
    "kind": "function",
    "name": "combineEdges",
    "memberof": "src/volume/csg/ConstructiveSolidGeometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/volume/csg/ConstructiveSolidGeometry.js~combineEdges",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/csg/ConstructiveSolidGeometry.js",
    "importStyle": null,
    "description": "Combines edges.",
    "lineNumber": 190,
    "params": [
      {
        "nullable": null,
        "types": [
          "Operation"
        ],
        "spread": false,
        "optional": false,
        "name": "operation",
        "description": "A CSG operation."
      },
      {
        "nullable": null,
        "types": [
          "HermiteData"
        ],
        "spread": false,
        "optional": false,
        "name": "data0",
        "description": "A target data set."
      },
      {
        "nullable": null,
        "types": [
          "HermiteData"
        ],
        "spread": false,
        "optional": false,
        "name": "data1",
        "description": "A predominant data set."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The generated edge data."
    },
    "ignore": true
  },
  {
    "__docId__": 482,
    "kind": "function",
    "name": "generateEdges",
    "memberof": "src/volume/csg/ConstructiveSolidGeometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/volume/csg/ConstructiveSolidGeometry.js~generateEdges",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/csg/ConstructiveSolidGeometry.js",
    "importStyle": null,
    "description": "Generates edge data.",
    "lineNumber": 368,
    "params": [
      {
        "nullable": null,
        "types": [
          "DensityFunction"
        ],
        "spread": false,
        "optional": false,
        "name": "operation",
        "description": "A CSG operation."
      },
      {
        "nullable": null,
        "types": [
          "HermiteData"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "A target data set."
      },
      {
        "nullable": null,
        "types": [
          "Box3"
        ],
        "spread": false,
        "optional": false,
        "name": "bounds",
        "description": "Grid iteration limits."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The generated edge data."
    },
    "ignore": true
  },
  {
    "__docId__": 483,
    "kind": "function",
    "name": "update",
    "memberof": "src/volume/csg/ConstructiveSolidGeometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/volume/csg/ConstructiveSolidGeometry.js~update",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/csg/ConstructiveSolidGeometry.js",
    "importStyle": null,
    "description": "Either generates or combines volume data based on the operation type.",
    "lineNumber": 494,
    "params": [
      {
        "nullable": null,
        "types": [
          "Operation"
        ],
        "spread": false,
        "optional": false,
        "name": "operation",
        "description": "A CSG operation."
      },
      {
        "nullable": null,
        "types": [
          "HermiteData"
        ],
        "spread": false,
        "optional": false,
        "name": "data0",
        "description": "A target data set. May be empty or full."
      },
      {
        "nullable": null,
        "types": [
          "HermiteData"
        ],
        "spread": false,
        "optional": true,
        "name": "data1",
        "description": "A predominant data set. Cannot be null."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 484,
    "kind": "function",
    "name": "execute",
    "memberof": "src/volume/csg/ConstructiveSolidGeometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/volume/csg/ConstructiveSolidGeometry.js~execute",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/csg/ConstructiveSolidGeometry.js",
    "importStyle": null,
    "description": "Executes the given operation to generate data.",
    "lineNumber": 558,
    "params": [
      {
        "nullable": null,
        "types": [
          "Operation"
        ],
        "spread": false,
        "optional": false,
        "name": "operation",
        "description": "An operation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HermiteData"
      ],
      "spread": false,
      "description": "The generated data or null if the data is empty."
    },
    "ignore": true
  },
  {
    "__docId__": 485,
    "kind": "class",
    "name": "ConstructiveSolidGeometry",
    "memberof": "src/volume/csg/ConstructiveSolidGeometry.js",
    "static": true,
    "longname": "src/volume/csg/ConstructiveSolidGeometry.js~ConstructiveSolidGeometry",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/volume/csg/ConstructiveSolidGeometry.js",
    "importStyle": "{ConstructiveSolidGeometry}",
    "description": "Constructive Solid Geometry combines Signed Distance Functions by using\nBoolean operators to generate and transform volume data.",
    "lineNumber": 628,
    "interface": false
  },
  {
    "__docId__": 486,
    "kind": "method",
    "name": "run",
    "memberof": "src/volume/csg/ConstructiveSolidGeometry.js~ConstructiveSolidGeometry",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/volume/csg/ConstructiveSolidGeometry.js~ConstructiveSolidGeometry.run",
    "access": "public",
    "description": "Transforms the given Hermite data in two steps:\n\n 1. Generate data by executing the given SDF\n 2. Combine the generated data with the given data",
    "lineNumber": 643,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": "The lower bounds of the volume data cell."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "The size of the volume data cell."
      },
      {
        "nullable": null,
        "types": [
          "HermiteData"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The volume data that should be modified."
      },
      {
        "nullable": null,
        "types": [
          "SignedDistanceFunction"
        ],
        "spread": false,
        "optional": false,
        "name": "sdf",
        "description": "An SDF."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HermiteData"
      ],
      "spread": false,
      "description": "The modified, uncompressed data or null if the result is empty."
    }
  },
  {
    "__docId__": 487,
    "kind": "file",
    "name": "src/volume/csg/DensityFunction.js",
    "content": "import { HermiteData } from \"../HermiteData.js\";\r\nimport { Material } from \"../Material.js\";\r\nimport { Operation } from \"./Operation.js\";\r\nimport { OperationType } from \"./OperationType.js\";\r\n\r\n/**\r\n * An operation that describes a density field.\r\n */\r\n\r\nexport class DensityFunction extends Operation {\r\n\r\n\t/**\r\n\t * Constructs a new density function operation.\r\n\t *\r\n\t * @param {SignedDistanceFunction} sdf - An SDF.\r\n\t */\r\n\r\n\tconstructor(sdf) {\r\n\r\n\t\tsuper(OperationType.DENSITY_FUNCTION);\r\n\r\n\t\t/**\r\n\t\t * An SDF.\r\n\t\t *\r\n\t\t * @type {SignedDistanceFunction}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.sdf = sdf;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the bounding box of this density function.\r\n\t *\r\n\t * @return {Box3} The bounding box.\r\n\t */\r\n\r\n\tcomputeBoundingBox() {\r\n\r\n\t\treturn this.sdf.getBoundingBox(true);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the material index for the given world position.\r\n\t *\r\n\t * @param {Vector3} position - The world position of the material index.\r\n\t * @return {Number} The material index.\r\n\t */\r\n\r\n\tgenerateMaterialIndex(position) {\r\n\r\n\t\treturn (this.sdf.sample(position) <= HermiteData.isovalue) ? this.sdf.material : Material.AIR;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates surface intersection data for the specified edge.\r\n\t *\r\n\t * @param {Edge} edge - The edge that should be processed.\r\n\t */\r\n\r\n\tgenerateEdge(edge) {\r\n\r\n\t\tedge.approximateZeroCrossing(this.sdf);\r\n\t\tedge.computeSurfaceNormal(this.sdf);\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/csg/DensityFunction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 488,
    "kind": "class",
    "name": "DensityFunction",
    "memberof": "src/volume/csg/DensityFunction.js",
    "static": true,
    "longname": "src/volume/csg/DensityFunction.js~DensityFunction",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/volume/csg/DensityFunction.js",
    "importStyle": "{DensityFunction}",
    "description": "An operation that describes a density field.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/volume/csg/Operation.js~Operation"
    ]
  },
  {
    "__docId__": 489,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/volume/csg/DensityFunction.js~DensityFunction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/csg/DensityFunction.js~DensityFunction#constructor",
    "access": "public",
    "description": "Constructs a new density function operation.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "SignedDistanceFunction"
        ],
        "spread": false,
        "optional": false,
        "name": "sdf",
        "description": "An SDF."
      }
    ]
  },
  {
    "__docId__": 490,
    "kind": "member",
    "name": "sdf",
    "memberof": "src/volume/csg/DensityFunction.js~DensityFunction",
    "static": false,
    "longname": "src/volume/csg/DensityFunction.js~DensityFunction#sdf",
    "access": "private",
    "description": "An SDF.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "SignedDistanceFunction"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 491,
    "kind": "method",
    "name": "computeBoundingBox",
    "memberof": "src/volume/csg/DensityFunction.js~DensityFunction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/csg/DensityFunction.js~DensityFunction#computeBoundingBox",
    "access": "public",
    "description": "Calculates the bounding box of this density function.",
    "lineNumber": 39,
    "return": {
      "nullable": null,
      "types": [
        "Box3"
      ],
      "spread": false,
      "description": "The bounding box."
    },
    "params": []
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "generateMaterialIndex",
    "memberof": "src/volume/csg/DensityFunction.js~DensityFunction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/csg/DensityFunction.js~DensityFunction#generateMaterialIndex",
    "access": "public",
    "description": "Calculates the material index for the given world position.",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "The world position of the material index."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The material index."
    }
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "generateEdge",
    "memberof": "src/volume/csg/DensityFunction.js~DensityFunction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/csg/DensityFunction.js~DensityFunction#generateEdge",
    "access": "public",
    "description": "Generates surface intersection data for the specified edge.",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "Edge"
        ],
        "spread": false,
        "optional": false,
        "name": "edge",
        "description": "The edge that should be processed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 494,
    "kind": "file",
    "name": "src/volume/csg/Difference.js",
    "content": "import { Material } from \"../Material.js\";\r\nimport { Operation } from \"./Operation.js\";\r\nimport { OperationType } from \"./OperationType.js\";\r\n\r\n/**\r\n * A difference operation.\r\n */\r\n\r\nexport class Difference extends Operation {\r\n\r\n\t/**\r\n\t * Constructs a new difference operation.\r\n\t *\r\n\t * @param {Operation} ...children - Child operations.\r\n\t */\r\n\r\n\tconstructor(...children) {\r\n\r\n\t\tsuper(OperationType.DIFFERENCE, ...children);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the specified material index.\r\n\t *\r\n\t * @param {Number} index - The index of the material index that needs to be updated.\r\n\t * @param {HermiteData} data0 - The target volume data.\r\n\t * @param {HermiteData} data1 - Predominant volume data.\r\n\t */\r\n\r\n\tupdateMaterialIndex(index, data0, data1) {\r\n\r\n\t\tif(data1.materialIndices[index] !== Material.AIR) {\r\n\r\n\t\t\tdata0.setMaterialIndex(index, Material.AIR);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Selects the edge that is closer to the solid grid point.\r\n\t *\r\n\t * @param {Edge} edge0 - An existing edge.\r\n\t * @param {Edge} edge1 - A predominant edge.\r\n\t * @param {Boolean} s - Whether the starting point of the edge is solid.\r\n\t * @return {Edge} The selected edge.\r\n\t */\r\n\r\n\tselectEdge(edge0, edge1, s) {\r\n\r\n\t\treturn s ?\r\n\t\t\t((edge0.t < edge1.t) ? edge0 : edge1) :\r\n\t\t\t((edge0.t > edge1.t) ? edge0 : edge1);\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/csg/Difference.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 495,
    "kind": "class",
    "name": "Difference",
    "memberof": "src/volume/csg/Difference.js",
    "static": true,
    "longname": "src/volume/csg/Difference.js~Difference",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/volume/csg/Difference.js",
    "importStyle": "{Difference}",
    "description": "A difference operation.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/volume/csg/Operation.js~Operation"
    ]
  },
  {
    "__docId__": 496,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/volume/csg/Difference.js~Difference",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/csg/Difference.js~Difference#constructor",
    "access": "public",
    "description": "Constructs a new difference operation.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "Operation"
        ],
        "spread": false,
        "optional": false,
        "name": "...children",
        "description": "Child operations."
      }
    ]
  },
  {
    "__docId__": 497,
    "kind": "method",
    "name": "updateMaterialIndex",
    "memberof": "src/volume/csg/Difference.js~Difference",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/csg/Difference.js~Difference#updateMaterialIndex",
    "access": "public",
    "description": "Updates the specified material index.",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The index of the material index that needs to be updated."
      },
      {
        "nullable": null,
        "types": [
          "HermiteData"
        ],
        "spread": false,
        "optional": false,
        "name": "data0",
        "description": "The target volume data."
      },
      {
        "nullable": null,
        "types": [
          "HermiteData"
        ],
        "spread": false,
        "optional": false,
        "name": "data1",
        "description": "Predominant volume data."
      }
    ],
    "return": null
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "selectEdge",
    "memberof": "src/volume/csg/Difference.js~Difference",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/csg/Difference.js~Difference#selectEdge",
    "access": "public",
    "description": "Selects the edge that is closer to the solid grid point.",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "Edge"
        ],
        "spread": false,
        "optional": false,
        "name": "edge0",
        "description": "An existing edge."
      },
      {
        "nullable": null,
        "types": [
          "Edge"
        ],
        "spread": false,
        "optional": false,
        "name": "edge1",
        "description": "A predominant edge."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Whether the starting point of the edge is solid."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Edge"
      ],
      "spread": false,
      "description": "The selected edge."
    }
  },
  {
    "__docId__": 499,
    "kind": "file",
    "name": "src/volume/csg/index.js",
    "content": "/**\r\n * A collection of Constructive Solid Geometry components.\r\n *\r\n * @module rabbit-hole/volume/csg\r\n */\r\n\r\nexport { ConstructiveSolidGeometry } from \"./ConstructiveSolidGeometry.js\";\r\nexport { DensityFunction } from \"./DensityFunction.js\";\r\nexport { Difference } from \"./Difference.js\";\r\nexport { Intersection } from \"./Intersection.js\";\r\nexport { Operation } from \"./Operation.js\";\r\nexport { OperationType } from \"./OperationType.js\";\r\nexport { Union } from \"./Union.js\";\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/csg/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 500,
    "kind": "file",
    "name": "src/volume/csg/Intersection.js",
    "content": "import { Material } from \"../Material.js\";\r\nimport { Operation } from \"./Operation.js\";\r\nimport { OperationType } from \"./OperationType.js\";\r\n\r\n/**\r\n * An intersection operation.\r\n */\r\n\r\nexport class Intersection extends Operation {\r\n\r\n\t/**\r\n\t * Constructs a new intersection operation.\r\n\t *\r\n\t * @param {...Operation} children - Child operations.\r\n\t */\r\n\r\n\tconstructor(...children) {\r\n\r\n\t\tsuper(OperationType.INTERSECTION, ...children);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the specified material index.\r\n\t *\r\n\t * @param {Number} index - The index of the material index that needs to be updated.\r\n\t * @param {HermiteData} data0 - The target volume data.\r\n\t * @param {HermiteData} data1 - Predominant volume data.\r\n\t */\r\n\r\n\tupdateMaterialIndex(index, data0, data1) {\r\n\r\n\t\tconst materialIndex = data1.materialIndices[index];\r\n\r\n\t\tdata0.setMaterialIndex(index, (data0.materialIndices[index] !== Material.AIR && materialIndex !== Material.AIR) ? materialIndex : Material.AIR);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Selects the edge that is closer to the solid grid point.\r\n\t *\r\n\t * @param {Edge} edge0 - An existing edge.\r\n\t * @param {Edge} edge1 - A predominant edge.\r\n\t * @param {Boolean} s - Whether the starting point of the edge is solid.\r\n\t * @return {Edge} The selected edge.\r\n\t */\r\n\r\n\tselectEdge(edge0, edge1, s) {\r\n\r\n\t\treturn s ?\r\n\t\t\t((edge0.t < edge1.t) ? edge0 : edge1) :\r\n\t\t\t((edge0.t > edge1.t) ? edge0 : edge1);\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/csg/Intersection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 501,
    "kind": "class",
    "name": "Intersection",
    "memberof": "src/volume/csg/Intersection.js",
    "static": true,
    "longname": "src/volume/csg/Intersection.js~Intersection",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/volume/csg/Intersection.js",
    "importStyle": "{Intersection}",
    "description": "An intersection operation.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/volume/csg/Operation.js~Operation"
    ]
  },
  {
    "__docId__": 502,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/volume/csg/Intersection.js~Intersection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/csg/Intersection.js~Intersection#constructor",
    "access": "public",
    "description": "Constructs a new intersection operation.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Operation"
        ],
        "spread": true,
        "optional": false,
        "name": "children",
        "description": "Child operations."
      }
    ]
  },
  {
    "__docId__": 503,
    "kind": "method",
    "name": "updateMaterialIndex",
    "memberof": "src/volume/csg/Intersection.js~Intersection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/csg/Intersection.js~Intersection#updateMaterialIndex",
    "access": "public",
    "description": "Updates the specified material index.",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The index of the material index that needs to be updated."
      },
      {
        "nullable": null,
        "types": [
          "HermiteData"
        ],
        "spread": false,
        "optional": false,
        "name": "data0",
        "description": "The target volume data."
      },
      {
        "nullable": null,
        "types": [
          "HermiteData"
        ],
        "spread": false,
        "optional": false,
        "name": "data1",
        "description": "Predominant volume data."
      }
    ],
    "return": null
  },
  {
    "__docId__": 504,
    "kind": "method",
    "name": "selectEdge",
    "memberof": "src/volume/csg/Intersection.js~Intersection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/csg/Intersection.js~Intersection#selectEdge",
    "access": "public",
    "description": "Selects the edge that is closer to the solid grid point.",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "Edge"
        ],
        "spread": false,
        "optional": false,
        "name": "edge0",
        "description": "An existing edge."
      },
      {
        "nullable": null,
        "types": [
          "Edge"
        ],
        "spread": false,
        "optional": false,
        "name": "edge1",
        "description": "A predominant edge."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Whether the starting point of the edge is solid."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Edge"
      ],
      "spread": false,
      "description": "The selected edge."
    }
  },
  {
    "__docId__": 505,
    "kind": "file",
    "name": "src/volume/csg/Operation.js",
    "content": "import { Box3 } from \"math-ds\";\r\n\r\n/**\r\n * A CSG operation.\r\n */\r\n\r\nexport class Operation {\r\n\r\n\t/**\r\n\t * Constructs a new operation.\r\n\t *\r\n\t * @param {OperationType} type - The type of this operation.\r\n\t * @param {Operation} ...children - Child operations.\r\n\t */\r\n\r\n\tconstructor(type, ...children) {\r\n\r\n\t\t/**\r\n\t\t * The type of this operation.\r\n\t\t *\r\n\t\t * @type {OperationType}\r\n\t\t */\r\n\r\n\t\tthis.type = type;\r\n\r\n\t\t/**\r\n\t\t * A list of operations.\r\n\t\t *\r\n\t\t * Right-hand side operands have precedence, meaning that the result of the\r\n\t\t * first item in the list will be dominated by the result of the second one,\r\n\t\t * etc.\r\n\t\t *\r\n\t\t * @type {Operation[]}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.children = children;\r\n\r\n\t\t/**\r\n\t\t * The bounding box of this operation.\r\n\t\t *\r\n\t\t * @type {Box3}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.boundingBox = null;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the complete bounding box of this CSG operation if it doesn't\r\n\t * exist yet and returns it.\r\n\t *\r\n\t * @return {Box3} The bounding box.\r\n\t */\r\n\r\n\tgetBoundingBox() {\r\n\r\n\t\tif(this.boundingBox === null) {\r\n\r\n\t\t\tthis.boundingBox = this.computeBoundingBox();\r\n\r\n\t\t}\r\n\r\n\t\treturn this.boundingBox;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the bounding box of this CSG operation while taking all child\r\n\t * operations into account.\r\n\t *\r\n\t * @return {Box3} The bounding box.\r\n\t */\r\n\r\n\tcomputeBoundingBox() {\r\n\r\n\t\tconst children = this.children;\r\n\t\tconst boundingBox = new Box3();\r\n\r\n\t\tlet i, l;\r\n\r\n\t\tfor(i = 0, l = children.length; i < l; ++i) {\r\n\r\n\t\t\tboundingBox.union(children[i].getBoundingBox());\r\n\r\n\t\t}\r\n\r\n\t\treturn boundingBox;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/csg/Operation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 506,
    "kind": "class",
    "name": "Operation",
    "memberof": "src/volume/csg/Operation.js",
    "static": true,
    "longname": "src/volume/csg/Operation.js~Operation",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/volume/csg/Operation.js",
    "importStyle": "{Operation}",
    "description": "A CSG operation.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 507,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/volume/csg/Operation.js~Operation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/csg/Operation.js~Operation#constructor",
    "access": "public",
    "description": "Constructs a new operation.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "OperationType"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of this operation."
      },
      {
        "nullable": null,
        "types": [
          "Operation"
        ],
        "spread": false,
        "optional": false,
        "name": "...children",
        "description": "Child operations."
      }
    ]
  },
  {
    "__docId__": 508,
    "kind": "member",
    "name": "type",
    "memberof": "src/volume/csg/Operation.js~Operation",
    "static": false,
    "longname": "src/volume/csg/Operation.js~Operation#type",
    "access": "public",
    "description": "The type of this operation.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "OperationType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 509,
    "kind": "member",
    "name": "children",
    "memberof": "src/volume/csg/Operation.js~Operation",
    "static": false,
    "longname": "src/volume/csg/Operation.js~Operation#children",
    "access": "private",
    "description": "A list of operations.\n\nRight-hand side operands have precedence, meaning that the result of the\nfirst item in the list will be dominated by the result of the second one,\netc.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "Operation[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 510,
    "kind": "member",
    "name": "boundingBox",
    "memberof": "src/volume/csg/Operation.js~Operation",
    "static": false,
    "longname": "src/volume/csg/Operation.js~Operation#boundingBox",
    "access": "private",
    "description": "The bounding box of this operation.",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Box3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 511,
    "kind": "method",
    "name": "getBoundingBox",
    "memberof": "src/volume/csg/Operation.js~Operation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/csg/Operation.js~Operation#getBoundingBox",
    "access": "public",
    "description": "Calculates the complete bounding box of this CSG operation if it doesn't\nexist yet and returns it.",
    "lineNumber": 57,
    "return": {
      "nullable": null,
      "types": [
        "Box3"
      ],
      "spread": false,
      "description": "The bounding box."
    },
    "params": []
  },
  {
    "__docId__": 513,
    "kind": "method",
    "name": "computeBoundingBox",
    "memberof": "src/volume/csg/Operation.js~Operation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/csg/Operation.js~Operation#computeBoundingBox",
    "access": "public",
    "description": "Calculates the bounding box of this CSG operation while taking all child\noperations into account.",
    "lineNumber": 76,
    "return": {
      "nullable": null,
      "types": [
        "Box3"
      ],
      "spread": false,
      "description": "The bounding box."
    },
    "params": []
  },
  {
    "__docId__": 514,
    "kind": "file",
    "name": "src/volume/csg/OperationType.js",
    "content": "/**\r\n * An enumeration of CSG operation types.\r\n *\r\n * @type {Object}\r\n * @property {String} UNION - Indicates a union of volume data.\r\n * @property {String} DIFFERENCE - Indicates a subtraction of volume data.\r\n * @property {String} INTERSECTION - Indicates an intersection of volume data.\r\n * @property {String} DENSITY_FUNCTION - Indicates volume data generation.\r\n */\r\n\r\nexport const OperationType = {\r\n\r\n\tUNION: \"csg.union\",\r\n\tDIFFERENCE: \"csg.difference\",\r\n\tINTERSECTION: \"csg.intersection\",\r\n\tDENSITY_FUNCTION: \"csg.densityfunction\"\r\n\r\n};\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/csg/OperationType.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 515,
    "kind": "variable",
    "name": "OperationType",
    "memberof": "src/volume/csg/OperationType.js",
    "static": true,
    "longname": "src/volume/csg/OperationType.js~OperationType",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/volume/csg/OperationType.js",
    "importStyle": "{OperationType}",
    "description": "An enumeration of CSG operation types.",
    "lineNumber": 11,
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "UNION",
        "description": "Indicates a union of volume data."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "DIFFERENCE",
        "description": "Indicates a subtraction of volume data."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "INTERSECTION",
        "description": "Indicates an intersection of volume data."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "DENSITY_FUNCTION",
        "description": "Indicates volume data generation."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 516,
    "kind": "file",
    "name": "src/volume/csg/Union.js",
    "content": "import { Material } from \"../Material.js\";\r\nimport { Operation } from \"./Operation.js\";\r\nimport { OperationType } from \"./OperationType.js\";\r\n\r\n/**\r\n * A union operation.\r\n */\r\n\r\nexport class Union extends Operation {\r\n\r\n\t/**\r\n\t * Constructs a new union operation.\r\n\t *\r\n\t * @param {...Operation} children - Child operations.\r\n\t */\r\n\r\n\tconstructor(...children) {\r\n\r\n\t\tsuper(OperationType.UNION, ...children);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the specified material index.\r\n\t *\r\n\t * @param {Number} index - The index of the material index that needs to be updated.\r\n\t * @param {HermiteData} data0 - The target volume data.\r\n\t * @param {HermiteData} data1 - Predominant volume data.\r\n\t */\r\n\r\n\tupdateMaterialIndex(index, data0, data1) {\r\n\r\n\t\tconst materialIndex = data1.materialIndices[index];\r\n\r\n\t\tif(materialIndex !== Material.AIR) {\r\n\r\n\t\t\tdata0.setMaterialIndex(index, materialIndex);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Selects the edge that is closer to the non-solid grid point.\r\n\t *\r\n\t * @param {Edge} edge0 - An existing edge.\r\n\t * @param {Edge} edge1 - A predominant edge.\r\n\t * @param {Boolean} s - Whether the starting point of the edge is solid.\r\n\t * @return {Edge} The selected edge.\r\n\t */\r\n\r\n\tselectEdge(edge0, edge1, s) {\r\n\r\n\t\treturn s ?\r\n\t\t\t((edge0.t > edge1.t) ? edge0 : edge1) :\r\n\t\t\t((edge0.t < edge1.t) ? edge0 : edge1);\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/csg/Union.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 517,
    "kind": "class",
    "name": "Union",
    "memberof": "src/volume/csg/Union.js",
    "static": true,
    "longname": "src/volume/csg/Union.js~Union",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/volume/csg/Union.js",
    "importStyle": "{Union}",
    "description": "A union operation.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/volume/csg/Operation.js~Operation"
    ]
  },
  {
    "__docId__": 518,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/volume/csg/Union.js~Union",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/csg/Union.js~Union#constructor",
    "access": "public",
    "description": "Constructs a new union operation.",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Operation"
        ],
        "spread": true,
        "optional": false,
        "name": "children",
        "description": "Child operations."
      }
    ]
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "updateMaterialIndex",
    "memberof": "src/volume/csg/Union.js~Union",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/csg/Union.js~Union#updateMaterialIndex",
    "access": "public",
    "description": "Updates the specified material index.",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The index of the material index that needs to be updated."
      },
      {
        "nullable": null,
        "types": [
          "HermiteData"
        ],
        "spread": false,
        "optional": false,
        "name": "data0",
        "description": "The target volume data."
      },
      {
        "nullable": null,
        "types": [
          "HermiteData"
        ],
        "spread": false,
        "optional": false,
        "name": "data1",
        "description": "Predominant volume data."
      }
    ],
    "return": null
  },
  {
    "__docId__": 520,
    "kind": "method",
    "name": "selectEdge",
    "memberof": "src/volume/csg/Union.js~Union",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/csg/Union.js~Union#selectEdge",
    "access": "public",
    "description": "Selects the edge that is closer to the non-solid grid point.",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "Edge"
        ],
        "spread": false,
        "optional": false,
        "name": "edge0",
        "description": "An existing edge."
      },
      {
        "nullable": null,
        "types": [
          "Edge"
        ],
        "spread": false,
        "optional": false,
        "name": "edge1",
        "description": "A predominant edge."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Whether the starting point of the edge is solid."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Edge"
      ],
      "spread": false,
      "description": "The selected edge."
    }
  },
  {
    "__docId__": 521,
    "kind": "file",
    "name": "src/volume/Edge.js",
    "content": "import { Vector3 } from \"math-ds\";\r\n\r\n/**\r\n * An isovalue bias for the Zero Crossing approximation.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\n\r\nconst ISOVALUE_BIAS = 1e-4;\r\n\r\n/**\r\n * An error threshold for the Zero Crossing approximation.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\n\r\nconst INTERVAL_THRESHOLD = 1e-6;\r\n\r\n/**\r\n * A vector.\r\n *\r\n * @type {Vector3}\r\n * @private\r\n */\r\n\r\nconst ab = new Vector3();\r\n\r\n/**\r\n * A point.\r\n *\r\n * @type {Vector3}\r\n * @private\r\n */\r\n\r\nconst p = new Vector3();\r\n\r\n/**\r\n * A vector.\r\n *\r\n * @type {Vector3}\r\n * @private\r\n */\r\n\r\nconst v = new Vector3();\r\n\r\n/**\r\n * An edge between two material grid points.\r\n */\r\n\r\nexport class Edge {\r\n\r\n\t/**\r\n\t * Constructs a new edge.\r\n\t *\r\n\t * @param {Vector3} [a] - A starting point. If none is provided, a new vector will be created.\r\n\t * @param {Vector3} [b] - An ending point. If none is provided, a new vector will be created.\r\n\t */\r\n\r\n\tconstructor(a = new Vector3(), b = new Vector3()) {\r\n\r\n\t\t/**\r\n\t\t * The starting point of the edge.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\r\n\t\tthis.a = a;\r\n\r\n\t\t/**\r\n\t\t * The ending point of the edge.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\r\n\t\tthis.b = b;\r\n\r\n\t\t/**\r\n\t\t * The index of the starting material grid point.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.index = -1;\r\n\r\n\t\t/**\r\n\t\t * The local grid coordinates of the starting point.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\r\n\t\tthis.coordinates = new Vector3();\r\n\r\n\t\t/**\r\n\t\t * The Zero Crossing interpolation value.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.t = 0.0;\r\n\r\n\t\t/**\r\n\t\t * The surface normal at the Zero Crossing position.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\r\n\t\tthis.n = new Vector3();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Approximates the smallest density along the edge.\r\n\t *\r\n\t * @param {SignedDistanceFunction} sdf - A density field.\r\n\t * @param {Number} [steps=8] - The maximum number of interpolation steps. Cannot be smaller than 2.\r\n\t */\r\n\r\n\tapproximateZeroCrossing(sdf, steps = 8) {\r\n\r\n\t\tconst s = Math.max(1, steps - 1);\r\n\r\n\t\tlet a = 0.0;\r\n\t\tlet b = 1.0;\r\n\t\tlet c = 0.0;\r\n\t\tlet i = 0;\r\n\r\n\t\tlet densityA, densityC;\r\n\r\n\t\t// Compute the vector from a to b.\r\n\t\tab.subVectors(this.b, this.a);\r\n\r\n\t\t// Use bisection to find the root of the SDF.\r\n\t\twhile(i <= s) {\r\n\r\n\t\t\tc = (a + b) / 2;\r\n\r\n\t\t\tp.addVectors(this.a, v.copy(ab).multiplyScalar(c));\r\n\t\t\tdensityC = sdf.sample(p);\r\n\r\n\t\t\tif(Math.abs(densityC) <= ISOVALUE_BIAS || (b - a) / 2 <= INTERVAL_THRESHOLD) {\r\n\r\n\t\t\t\t// Solution found.\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tp.addVectors(this.a, v.copy(ab).multiplyScalar(a));\r\n\t\t\t\tdensityA = sdf.sample(p);\r\n\r\n\t\t\t\tif(Math.sign(densityC) === Math.sign(densityA)) {\r\n\r\n\t\t\t\t\ta = c;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tb = c;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t++i;\r\n\r\n\t\t}\r\n\r\n\t\tthis.t = c;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the Zero Crossing position.\r\n\t *\r\n\t * @param {Vector3} target - A target for the Zero Crossing position. If none is provided, a new vector will be created.\r\n\t * @return {Vector3} The Zero Crossing position.\r\n\t */\r\n\r\n\tcomputeZeroCrossingPosition(target = new Vector3()) {\r\n\r\n\t\treturn target.subVectors(this.b, this.a).multiplyScalar(this.t).add(this.a);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the normal of the surface at the edge intersection.\r\n\t *\r\n\t * @param {SignedDistanceFunction} sdf - A density field.\r\n\t * @return {Vector3} The normal.\r\n\t * @todo Use analytical derivation instead of finite differences.\r\n\t */\r\n\r\n\tcomputeSurfaceNormal(sdf) {\r\n\r\n\t\tconst position = this.computeZeroCrossingPosition(ab);\r\n\t\tconst E = 1e-3;\r\n\r\n\t\tconst dx = sdf.sample(p.addVectors(position, v.set(E, 0, 0))) - sdf.sample(p.subVectors(position, v.set(E, 0, 0)));\r\n\t\tconst dy = sdf.sample(p.addVectors(position, v.set(0, E, 0))) - sdf.sample(p.subVectors(position, v.set(0, E, 0)));\r\n\t\tconst dz = sdf.sample(p.addVectors(position, v.set(0, 0, E))) - sdf.sample(p.subVectors(position, v.set(0, 0, E)));\r\n\r\n\t\tthis.n.set(dx, dy, dz).normalize();\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/Edge.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 522,
    "kind": "variable",
    "name": "ISOVALUE_BIAS",
    "memberof": "src/volume/Edge.js",
    "static": true,
    "longname": "src/volume/Edge.js~ISOVALUE_BIAS",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/Edge.js",
    "importStyle": null,
    "description": "An isovalue bias for the Zero Crossing approximation.",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 523,
    "kind": "variable",
    "name": "INTERVAL_THRESHOLD",
    "memberof": "src/volume/Edge.js",
    "static": true,
    "longname": "src/volume/Edge.js~INTERVAL_THRESHOLD",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/Edge.js",
    "importStyle": null,
    "description": "An error threshold for the Zero Crossing approximation.",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 524,
    "kind": "variable",
    "name": "ab",
    "memberof": "src/volume/Edge.js",
    "static": true,
    "longname": "src/volume/Edge.js~ab",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/Edge.js",
    "importStyle": null,
    "description": "A vector.",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 525,
    "kind": "variable",
    "name": "p",
    "memberof": "src/volume/Edge.js",
    "static": true,
    "longname": "src/volume/Edge.js~p",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/Edge.js",
    "importStyle": null,
    "description": "A point.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 526,
    "kind": "variable",
    "name": "v",
    "memberof": "src/volume/Edge.js",
    "static": true,
    "longname": "src/volume/Edge.js~v",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/Edge.js",
    "importStyle": null,
    "description": "A vector.",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 527,
    "kind": "class",
    "name": "Edge",
    "memberof": "src/volume/Edge.js",
    "static": true,
    "longname": "src/volume/Edge.js~Edge",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/volume/Edge.js",
    "importStyle": "{Edge}",
    "description": "An edge between two material grid points.",
    "lineNumber": 52,
    "interface": false
  },
  {
    "__docId__": 528,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/volume/Edge.js~Edge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/Edge.js~Edge#constructor",
    "access": "public",
    "description": "Constructs a new edge.",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": true,
        "name": "a",
        "description": "A starting point. If none is provided, a new vector will be created."
      },
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": true,
        "name": "b",
        "description": "An ending point. If none is provided, a new vector will be created."
      }
    ]
  },
  {
    "__docId__": 529,
    "kind": "member",
    "name": "a",
    "memberof": "src/volume/Edge.js~Edge",
    "static": false,
    "longname": "src/volume/Edge.js~Edge#a",
    "access": "public",
    "description": "The starting point of the edge.",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 530,
    "kind": "member",
    "name": "b",
    "memberof": "src/volume/Edge.js~Edge",
    "static": false,
    "longname": "src/volume/Edge.js~Edge#b",
    "access": "public",
    "description": "The ending point of the edge.",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 531,
    "kind": "member",
    "name": "index",
    "memberof": "src/volume/Edge.js~Edge",
    "static": false,
    "longname": "src/volume/Edge.js~Edge#index",
    "access": "public",
    "description": "The index of the starting material grid point.",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 532,
    "kind": "member",
    "name": "coordinates",
    "memberof": "src/volume/Edge.js~Edge",
    "static": false,
    "longname": "src/volume/Edge.js~Edge#coordinates",
    "access": "public",
    "description": "The local grid coordinates of the starting point.",
    "lineNumber": 93,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 533,
    "kind": "member",
    "name": "t",
    "memberof": "src/volume/Edge.js~Edge",
    "static": false,
    "longname": "src/volume/Edge.js~Edge#t",
    "access": "public",
    "description": "The Zero Crossing interpolation value.",
    "lineNumber": 101,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 534,
    "kind": "member",
    "name": "n",
    "memberof": "src/volume/Edge.js~Edge",
    "static": false,
    "longname": "src/volume/Edge.js~Edge#n",
    "access": "public",
    "description": "The surface normal at the Zero Crossing position.",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 535,
    "kind": "method",
    "name": "approximateZeroCrossing",
    "memberof": "src/volume/Edge.js~Edge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/Edge.js~Edge#approximateZeroCrossing",
    "access": "public",
    "description": "Approximates the smallest density along the edge.",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "SignedDistanceFunction"
        ],
        "spread": false,
        "optional": false,
        "name": "sdf",
        "description": "A density field."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "8",
        "defaultRaw": 8,
        "name": "steps",
        "description": "The maximum number of interpolation steps. Cannot be smaller than 2."
      }
    ],
    "return": null
  },
  {
    "__docId__": 537,
    "kind": "method",
    "name": "computeZeroCrossingPosition",
    "memberof": "src/volume/Edge.js~Edge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/Edge.js~Edge#computeZeroCrossingPosition",
    "access": "public",
    "description": "Calculates the Zero Crossing position.",
    "lineNumber": 179,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "A target for the Zero Crossing position. If none is provided, a new vector will be created."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": "The Zero Crossing position."
    }
  },
  {
    "__docId__": 538,
    "kind": "method",
    "name": "computeSurfaceNormal",
    "memberof": "src/volume/Edge.js~Edge",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/Edge.js~Edge#computeSurfaceNormal",
    "access": "public",
    "description": "Computes the normal of the surface at the edge intersection.",
    "lineNumber": 193,
    "todo": [
      "Use analytical derivation instead of finite differences."
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "SignedDistanceFunction"
        ],
        "spread": false,
        "optional": false,
        "name": "sdf",
        "description": "A density field."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": "The normal."
    }
  },
  {
    "__docId__": 539,
    "kind": "file",
    "name": "src/volume/EdgeData.js",
    "content": "import { EdgeIterator } from \"./EdgeIterator.js\";\r\n\r\n/**\r\n * Stores edge data separately for each dimension.\r\n *\r\n * With a grid resolution N, there are `3 * (N + 1)² * N` edges in total, but\r\n * the number of edges that actually contain the volume's surface is usually\r\n * much lower.\r\n *\r\n * @implements {Serializable}\r\n * @implements {Deserializable}\r\n * @implements {TransferableContainer}\r\n */\r\n\r\nexport class EdgeData {\r\n\r\n\t/**\r\n\t * Constructs new edge data.\r\n\t *\r\n\t * @param {Number} n - The material grid resolution.\r\n\t * @param {Number} [x=0] - The amount of edges along the X-axis. If <= 0, no memory will be allocated.\r\n\t * @param {Number} [y=x] - The amount of edges along the Y-axis. If omitted, this will be the same as x.\r\n\t * @param {Number} [z=x] - The amount of edges along the Z-axis. If omitted, this will be the same as x.\r\n\t */\r\n\r\n\tconstructor(n, x = 0, y = x, z = x) {\r\n\r\n\t\t/**\r\n\t\t * The material grid resolution.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.resolution = n;\r\n\r\n\t\t/**\r\n\t\t * The edges.\r\n\t\t *\r\n\t\t * Edges are stored as starting grid point indices in ascending order. The\r\n\t\t * ending point indices are implicitly defined through the dimension split:\r\n\t\t *\r\n\t\t * Given a starting point index A, the ending point index B for the X-, Y-\r\n\t\t * and Z-axis is defined as `A + 1`, `A + N` and `A + N²` respectively where\r\n\t\t * N is the grid resolution + 1.\r\n\t\t *\r\n\t\t * @type {Uint32Array[]}\r\n\t\t */\r\n\r\n\t\tthis.indices = (x <= 0) ? null : [\r\n\t\t\tnew Uint32Array(x),\r\n\t\t\tnew Uint32Array(y),\r\n\t\t\tnew Uint32Array(z)\r\n\t\t];\r\n\r\n\t\t/**\r\n\t\t * The Zero Crossing interpolation values.\r\n\t\t *\r\n\t\t * Each value describes the relative surface intersection position on the\r\n\t\t * respective edge. The values correspond to the order of the edges.\r\n\t\t *\r\n\t\t * @type {Float32Array[]}\r\n\t\t */\r\n\r\n\t\tthis.zeroCrossings = (x <= 0) ? null : [\r\n\t\t\tnew Float32Array(x),\r\n\t\t\tnew Float32Array(y),\r\n\t\t\tnew Float32Array(z)\r\n\t\t];\r\n\r\n\t\t/**\r\n\t\t * The surface intersection normals.\r\n\t\t *\r\n\t\t * The vectors are stored as [x, y, z] float triples and correspond to the\r\n\t\t * order of the edges.\r\n\t\t *\r\n\t\t * @type {Float32Array[]}\r\n\t\t */\r\n\r\n\t\tthis.normals = (x <= 0) ? null : [\r\n\t\t\tnew Float32Array(x * 3),\r\n\t\t\tnew Float32Array(y * 3),\r\n\t\t\tnew Float32Array(z * 3)\r\n\t\t];\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Serialises this data.\r\n\t *\r\n\t * @param {Boolean} [deflate=false] - Whether the data should be compressed if possible.\r\n\t * @return {Object} The serialised data.\r\n\t */\r\n\r\n\tserialize(deflate = false) {\r\n\r\n\t\treturn {\r\n\t\t\tresolution: this.resolution,\r\n\t\t\tedges: this.edges,\r\n\t\t\tzeroCrossings: this.zeroCrossings,\r\n\t\t\tnormals: this.normals\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adopts the given serialised data.\r\n\t *\r\n\t * @param {Object} object - Serialised edge data. Can be null.\r\n\t * @return {Deserializable} This object or null if the given serialised data was null.\r\n\t */\r\n\r\n\tdeserialize(object) {\r\n\r\n\t\tlet result = this;\r\n\r\n\t\tif(object !== null) {\r\n\r\n\t\t\tthis.resolution = object.resolution;\r\n\t\t\tthis.edges = object.edges;\r\n\t\t\tthis.zeroCrossings = object.zeroCrossings;\r\n\t\t\tthis.normals = object.normals;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tresult = null;\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a list of transferable items.\r\n\t *\r\n\t * @param {Array} [transferList] - An optional target list. The transferable items will be added to this list.\r\n\t * @return {Transferable[]} The transfer list.\r\n\t */\r\n\r\n\tcreateTransferList(transferList = []) {\r\n\r\n\t\tconst arrays = [\r\n\r\n\t\t\tthis.edges[0],\r\n\t\t\tthis.edges[1],\r\n\t\t\tthis.edges[2],\r\n\r\n\t\t\tthis.zeroCrossings[0],\r\n\t\t\tthis.zeroCrossings[1],\r\n\t\t\tthis.zeroCrossings[2],\r\n\r\n\t\t\tthis.normals[0],\r\n\t\t\tthis.normals[1],\r\n\t\t\tthis.normals[2]\r\n\r\n\t\t];\r\n\r\n\t\tlet array;\r\n\t\tlet i, l;\r\n\r\n\t\tfor(i = 0, l = arrays.length; i < l; ++i) {\r\n\r\n\t\t\tarray = arrays[i];\r\n\r\n\t\t\tif(array !== null) {\r\n\r\n\t\t\t\ttransferList.push(array.buffer);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn transferList;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new edge iterator.\r\n\t *\r\n\t * @param {Vector3} cellPosition - The position of the volume data cell.\r\n\t * @param {Number} cellSize - The size of the volume data cell.\r\n\t * @return {EdgeIterator} An iterator.\r\n\t */\r\n\r\n\tedges(cellPosition, cellSize) {\r\n\r\n\t\treturn new EdgeIterator(this, cellPosition, cellSize);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new edge iterator that only returns edges along the X-axis.\r\n\t *\r\n\t * @param {Vector3} cellPosition - The position of the volume data cell.\r\n\t * @param {Number} cellSize - The size of the volume data cell.\r\n\t * @return {EdgeIterator} An iterator.\r\n\t */\r\n\r\n\tedgesX(cellPosition, cellSize) {\r\n\r\n\t\treturn new EdgeIterator(this, cellPosition, cellSize, 0, 1);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new edge iterator that only returns edges along the Y-axis.\r\n\t *\r\n\t * @param {Vector3} cellPosition - The position of the volume data cell.\r\n\t * @param {Number} cellSize - The size of the volume data cell.\r\n\t * @return {EdgeIterator} An iterator.\r\n\t */\r\n\r\n\tedgesY(cellPosition, cellSize) {\r\n\r\n\t\treturn new EdgeIterator(this, cellPosition, cellSize, 1, 2);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new edge iterator that only returns edges along the Z-axis.\r\n\t *\r\n\t * @param {Vector3} cellPosition - The position of the volume data cell.\r\n\t * @param {Number} cellSize - The size of the volume data cell.\r\n\t * @return {EdgeIterator} An iterator.\r\n\t */\r\n\r\n\tedgesZ(cellPosition, cellSize) {\r\n\r\n\t\treturn new EdgeIterator(this, cellPosition, cellSize, 2, 3);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the amount of edges for one axis based on a given resolution.\r\n\t *\r\n\t * @param {Number} n - The grid resolution.\r\n\t * @return {Number} The amount of edges for a single dimension.\r\n\t */\r\n\r\n\tstatic calculate1DEdgeCount(n) {\r\n\r\n\t\treturn Math.pow((n + 1), 2) * n;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/EdgeData.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 540,
    "kind": "class",
    "name": "EdgeData",
    "memberof": "src/volume/EdgeData.js",
    "static": true,
    "longname": "src/volume/EdgeData.js~EdgeData",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/volume/EdgeData.js",
    "importStyle": "{EdgeData}",
    "description": "Stores edge data separately for each dimension.\n\nWith a grid resolution N, there are `3 * (N + 1)² * N` edges in total, but\nthe number of edges that actually contain the volume's surface is usually\nmuch lower.",
    "lineNumber": 15,
    "interface": false,
    "implements": [
      "Serializable",
      "Deserializable",
      "TransferableContainer"
    ]
  },
  {
    "__docId__": 541,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/volume/EdgeData.js~EdgeData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/EdgeData.js~EdgeData#constructor",
    "access": "public",
    "description": "Constructs new edge data.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "The material grid resolution."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "x",
        "description": "The amount of edges along the X-axis. If <= 0, no memory will be allocated."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "x",
        "defaultRaw": "x",
        "name": "y",
        "description": "The amount of edges along the Y-axis. If omitted, this will be the same as x."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "x",
        "defaultRaw": "x",
        "name": "z",
        "description": "The amount of edges along the Z-axis. If omitted, this will be the same as x."
      }
    ]
  },
  {
    "__docId__": 542,
    "kind": "member",
    "name": "resolution",
    "memberof": "src/volume/EdgeData.js~EdgeData",
    "static": false,
    "longname": "src/volume/EdgeData.js~EdgeData#resolution",
    "access": "public",
    "description": "The material grid resolution.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 543,
    "kind": "member",
    "name": "indices",
    "memberof": "src/volume/EdgeData.js~EdgeData",
    "static": false,
    "longname": "src/volume/EdgeData.js~EdgeData#indices",
    "access": "public",
    "description": "The edges.\n\nEdges are stored as starting grid point indices in ascending order. The\nending point indices are implicitly defined through the dimension split:\n\nGiven a starting point index A, the ending point index B for the X-, Y-\nand Z-axis is defined as `A + 1`, `A + N` and `A + N²` respectively where\nN is the grid resolution + 1.",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "Uint32Array[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 544,
    "kind": "member",
    "name": "zeroCrossings",
    "memberof": "src/volume/EdgeData.js~EdgeData",
    "static": false,
    "longname": "src/volume/EdgeData.js~EdgeData#zeroCrossings",
    "access": "public",
    "description": "The Zero Crossing interpolation values.\n\nEach value describes the relative surface intersection position on the\nrespective edge. The values correspond to the order of the edges.",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "Float32Array[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 545,
    "kind": "member",
    "name": "normals",
    "memberof": "src/volume/EdgeData.js~EdgeData",
    "static": false,
    "longname": "src/volume/EdgeData.js~EdgeData#normals",
    "access": "public",
    "description": "The surface intersection normals.\n\nThe vectors are stored as [x, y, z] float triples and correspond to the\norder of the edges.",
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "Float32Array[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 546,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/volume/EdgeData.js~EdgeData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/EdgeData.js~EdgeData#serialize",
    "access": "public",
    "description": "Serialises this data.",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "deflate",
        "description": "Whether the data should be compressed if possible."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The serialised data."
    }
  },
  {
    "__docId__": 547,
    "kind": "method",
    "name": "deserialize",
    "memberof": "src/volume/EdgeData.js~EdgeData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/EdgeData.js~EdgeData#deserialize",
    "access": "public",
    "description": "Adopts the given serialised data.",
    "lineNumber": 112,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "Serialised edge data. Can be null."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Deserializable"
      ],
      "spread": false,
      "description": "This object or null if the given serialised data was null."
    }
  },
  {
    "__docId__": 552,
    "kind": "method",
    "name": "createTransferList",
    "memberof": "src/volume/EdgeData.js~EdgeData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/EdgeData.js~EdgeData#createTransferList",
    "access": "public",
    "description": "Creates a list of transferable items.",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "transferList",
        "description": "An optional target list. The transferable items will be added to this list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transferable[]"
      ],
      "spread": false,
      "description": "The transfer list."
    }
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "edges",
    "memberof": "src/volume/EdgeData.js~EdgeData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/EdgeData.js~EdgeData#edges",
    "access": "public",
    "description": "Returns a new edge iterator.",
    "lineNumber": 185,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "cellPosition",
        "description": "The position of the volume data cell."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cellSize",
        "description": "The size of the volume data cell."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EdgeIterator"
      ],
      "spread": false,
      "description": "An iterator."
    }
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "edgesX",
    "memberof": "src/volume/EdgeData.js~EdgeData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/EdgeData.js~EdgeData#edgesX",
    "access": "public",
    "description": "Creates a new edge iterator that only returns edges along the X-axis.",
    "lineNumber": 199,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "cellPosition",
        "description": "The position of the volume data cell."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cellSize",
        "description": "The size of the volume data cell."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EdgeIterator"
      ],
      "spread": false,
      "description": "An iterator."
    }
  },
  {
    "__docId__": 555,
    "kind": "method",
    "name": "edgesY",
    "memberof": "src/volume/EdgeData.js~EdgeData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/EdgeData.js~EdgeData#edgesY",
    "access": "public",
    "description": "Creates a new edge iterator that only returns edges along the Y-axis.",
    "lineNumber": 213,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "cellPosition",
        "description": "The position of the volume data cell."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cellSize",
        "description": "The size of the volume data cell."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EdgeIterator"
      ],
      "spread": false,
      "description": "An iterator."
    }
  },
  {
    "__docId__": 556,
    "kind": "method",
    "name": "edgesZ",
    "memberof": "src/volume/EdgeData.js~EdgeData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/EdgeData.js~EdgeData#edgesZ",
    "access": "public",
    "description": "Creates a new edge iterator that only returns edges along the Z-axis.",
    "lineNumber": 227,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "cellPosition",
        "description": "The position of the volume data cell."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cellSize",
        "description": "The size of the volume data cell."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "EdgeIterator"
      ],
      "spread": false,
      "description": "An iterator."
    }
  },
  {
    "__docId__": 557,
    "kind": "method",
    "name": "calculate1DEdgeCount",
    "memberof": "src/volume/EdgeData.js~EdgeData",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/volume/EdgeData.js~EdgeData.calculate1DEdgeCount",
    "access": "public",
    "description": "Calculates the amount of edges for one axis based on a given resolution.",
    "lineNumber": 240,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "The grid resolution."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The amount of edges for a single dimension."
    }
  },
  {
    "__docId__": 558,
    "kind": "file",
    "name": "src/volume/EdgeIterator.js",
    "content": "import { Vector3 } from \"math-ds\";\r\nimport IteratorResult from \"iterator-result\";\r\nimport { pattern } from \"sparse-octree\";\r\nimport { Edge } from \"./Edge.js\";\r\n\r\n/**\r\n * An edge.\r\n *\r\n * @type {Edge}\r\n * @private\r\n */\r\n\r\nconst edge = new Edge();\r\n\r\n/**\r\n * A vector.\r\n *\r\n * @type {Vector3}\r\n * @private\r\n */\r\n\r\nconst offsetA = new Vector3();\r\n\r\n/**\r\n * A vector.\r\n *\r\n * @type {Vector3}\r\n * @private\r\n */\r\n\r\nconst offsetB = new Vector3();\r\n\r\n/**\r\n * An edge iterator.\r\n *\r\n * @implements {Iterator}\r\n * @implements {Iterable}\r\n */\r\n\r\nexport class EdgeIterator {\r\n\r\n\t/**\r\n\t * Constructs a new edge iterator.\r\n\t *\r\n\t * @param {EdgeData} edgeData - A set of edge data.\r\n\t * @param {Vector3} cellPosition - The position of the data cell.\r\n\t * @param {Number} cellSize - The size of the data cell.\r\n\t * @param {Number} [c=0] - The dimension index to start at.\r\n\t * @param {Number} [d=3] - The dimension limit.\r\n\t */\r\n\r\n\tconstructor(edgeData, cellPosition, cellSize, c = 0, d = 3) {\r\n\r\n\t\t/**\r\n\t\t * The edge data.\r\n\t\t *\r\n\t\t * @type {EdgeData}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.edgeData = edgeData;\r\n\r\n\t\t/**\r\n\t\t * The data cell position.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.cellPosition = cellPosition;\r\n\r\n\t\t/**\r\n\t\t * The data cell size.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.cellSize = cellSize;\r\n\r\n\t\t/**\r\n\t\t * The edges.\r\n\t\t *\r\n\t\t * @type {Uint32Array[]}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.indices = null;\r\n\r\n\t\t/**\r\n\t\t * The Zero Crossings.\r\n\t\t *\r\n\t\t * @type {Float32Array[]}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.zeroCrossings = null;\r\n\r\n\t\t/**\r\n\t\t * The intersection normals.\r\n\t\t *\r\n\t\t * @type {Float32Array[]}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.normals = null;\r\n\r\n\t\t/**\r\n\t\t * The axes of the existing edges.\r\n\t\t *\r\n\t\t * @type {Uint8Array[]}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.axes = null;\r\n\r\n\t\t/**\r\n\t\t * The amount of edges for each internal set of edges (X -> Y -> Z).\r\n\t\t *\r\n\t\t * @type {Number[]}\r\n\t\t */\r\n\r\n\t\tthis.lengths = null;\r\n\r\n\t\t/**\r\n\t\t * An iterator result.\r\n\t\t *\r\n\t\t * @type {IteratorResult}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.result = new IteratorResult();\r\n\r\n\t\t/**\r\n\t\t * The initial dimension index.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.initialC = c;\r\n\r\n\t\t/**\r\n\t\t * The current dimension index.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.c = c;\r\n\r\n\t\t/**\r\n\t\t * The initial dimension limit.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.initialD = d;\r\n\r\n\t\t/**\r\n\t\t * The dimension limit.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.d = d;\r\n\r\n\t\t/**\r\n\t\t * The current iteration index.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.i = 0;\r\n\r\n\t\t/**\r\n\t\t * The current iteration limit.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.l = 0;\r\n\r\n\t\tthis.reset();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Resets this iterator.\r\n\t *\r\n\t * @return {EdgeIterator} This iterator.\r\n\t */\r\n\r\n\treset() {\r\n\r\n\t\tconst edgeData = this.edgeData;\r\n\t\tconst indices = [];\r\n\t\tconst zeroCrossings = [];\r\n\t\tconst normals = [];\r\n\t\tconst axes = [];\r\n\t\tconst lengths = [];\r\n\r\n\t\tlet a, c, d, l;\r\n\r\n\t\tthis.i = 0;\r\n\t\tthis.c = 0;\r\n\t\tthis.d = 0;\r\n\r\n\t\t// Create a collection of edges without empty arrays.\r\n\t\tfor(c = this.initialC, a = 4 >> c, d = this.initialD; c < d; ++c, a >>= 1) {\r\n\r\n\t\t\tl = edgeData.indices[c].length;\r\n\r\n\t\t\tif(l > 0) {\r\n\r\n\t\t\t\tindices.push(edgeData.indices[c]);\r\n\t\t\t\tzeroCrossings.push(edgeData.zeroCrossings[c]);\r\n\t\t\t\tnormals.push(edgeData.normals[c]);\r\n\t\t\t\taxes.push(pattern[a]);\r\n\t\t\t\tlengths.push(l);\r\n\r\n\t\t\t\t++this.d;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.l = (lengths.length > 0) ? lengths[0] : 0;\r\n\r\n\t\tthis.indices = indices;\r\n\t\tthis.zeroCrossings = zeroCrossings;\r\n\t\tthis.normals = normals;\r\n\t\tthis.axes = axes;\r\n\t\tthis.lengths = lengths;\r\n\r\n\t\tthis.result.reset();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Iterates over the edges.\r\n\t *\r\n\t * @return {IteratorResult} The next edge.\r\n\t */\r\n\r\n\tnext() {\r\n\r\n\t\tconst s = this.cellSize;\r\n\t\tconst n = this.edgeData.resolution;\r\n\t\tconst m = n + 1;\r\n\t\tconst mm = m * m;\r\n\r\n\t\tconst result = this.result;\r\n\t\tconst base = this.cellPosition;\r\n\r\n\t\tlet axis, index;\r\n\t\tlet x, y, z;\r\n\t\tlet c, i;\r\n\r\n\t\t// Has the end been reached?\r\n\t\tif(this.i === this.l) {\r\n\r\n\t\t\t// Move on to the next set of edges (X -> Y -> Z).\r\n\t\t\tthis.l = (++this.c < this.d) ? this.lengths[this.c] : 0;\r\n\t\t\tthis.i = 0;\r\n\r\n\t\t}\r\n\r\n\t\t// Are there any edges left?\r\n\t\tif(this.i < this.l) {\r\n\r\n\t\t\tc = this.c;\r\n\t\t\ti = this.i;\r\n\r\n\t\t\taxis = this.axes[c];\r\n\r\n\t\t\t// Each edge is uniquely described by its starting grid point index.\r\n\t\t\tindex = this.indices[c][i];\r\n\t\t\tedge.index = index;\r\n\r\n\t\t\t// Calculate the local grid coordinates from the one-dimensional index.\r\n\t\t\tx = index % m;\r\n\t\t\ty = Math.trunc((index % mm) / m);\r\n\t\t\tz = Math.trunc(index / mm);\r\n\r\n\t\t\tedge.coordinates.set(x, y, z);\r\n\r\n\t\t\toffsetA.set(\r\n\t\t\t\tx * s / n,\r\n\t\t\t\ty * s / n,\r\n\t\t\t\tz * s / n\r\n\t\t\t);\r\n\r\n\t\t\toffsetB.set(\r\n\t\t\t\t(x + axis[0]) * s / n,\r\n\t\t\t\t(y + axis[1]) * s / n,\r\n\t\t\t\t(z + axis[2]) * s / n\r\n\t\t\t);\r\n\r\n\t\t\tedge.a.addVectors(base, offsetA);\r\n\t\t\tedge.b.addVectors(base, offsetB);\r\n\r\n\t\t\tedge.t = this.zeroCrossings[c][i];\r\n\t\t\tedge.n.fromArray(this.normals[c], i * 3);\r\n\r\n\t\t\tresult.value = edge;\r\n\r\n\t\t\t++this.i;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// There are no more edges left.\r\n\t\t\tresult.value = null;\r\n\t\t\tresult.done = true;\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Called when this iterator will no longer be run to completion.\r\n\t *\r\n\t * @param {Object} value - An interator result value.\r\n\t * @return {IteratorResult} - A premature completion result.\r\n\t */\r\n\r\n\treturn(value) {\r\n\r\n\t\tthis.result.value = value;\r\n\t\tthis.result.done = true;\r\n\r\n\t\treturn this.result;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns this iterator.\r\n\t *\r\n\t * @return {EdteIterator} An iterator.\r\n\t */\r\n\r\n\t[Symbol.iterator]() {\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/EdgeIterator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 559,
    "kind": "variable",
    "name": "edge",
    "memberof": "src/volume/EdgeIterator.js",
    "static": true,
    "longname": "src/volume/EdgeIterator.js~edge",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/EdgeIterator.js",
    "importStyle": null,
    "description": "An edge.",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "Edge"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 560,
    "kind": "variable",
    "name": "offsetA",
    "memberof": "src/volume/EdgeIterator.js",
    "static": true,
    "longname": "src/volume/EdgeIterator.js~offsetA",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/EdgeIterator.js",
    "importStyle": null,
    "description": "A vector.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 561,
    "kind": "variable",
    "name": "offsetB",
    "memberof": "src/volume/EdgeIterator.js",
    "static": true,
    "longname": "src/volume/EdgeIterator.js~offsetB",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/EdgeIterator.js",
    "importStyle": null,
    "description": "A vector.",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 562,
    "kind": "class",
    "name": "EdgeIterator",
    "memberof": "src/volume/EdgeIterator.js",
    "static": true,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/volume/EdgeIterator.js",
    "importStyle": "{EdgeIterator}",
    "description": "An edge iterator.",
    "lineNumber": 40,
    "interface": false,
    "implements": [
      "Iterator",
      "Iterable"
    ]
  },
  {
    "__docId__": 563,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/volume/EdgeIterator.js~EdgeIterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator#constructor",
    "access": "public",
    "description": "Constructs a new edge iterator.",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "EdgeData"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeData",
        "description": "A set of edge data."
      },
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "cellPosition",
        "description": "The position of the data cell."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cellSize",
        "description": "The size of the data cell."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "c",
        "description": "The dimension index to start at."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "3",
        "defaultRaw": 3,
        "name": "d",
        "description": "The dimension limit."
      }
    ]
  },
  {
    "__docId__": 564,
    "kind": "member",
    "name": "edgeData",
    "memberof": "src/volume/EdgeIterator.js~EdgeIterator",
    "static": false,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator#edgeData",
    "access": "private",
    "description": "The edge data.",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "EdgeData"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 565,
    "kind": "member",
    "name": "cellPosition",
    "memberof": "src/volume/EdgeIterator.js~EdgeIterator",
    "static": false,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator#cellPosition",
    "access": "private",
    "description": "The data cell position.",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 566,
    "kind": "member",
    "name": "cellSize",
    "memberof": "src/volume/EdgeIterator.js~EdgeIterator",
    "static": false,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator#cellSize",
    "access": "private",
    "description": "The data cell size.",
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 567,
    "kind": "member",
    "name": "indices",
    "memberof": "src/volume/EdgeIterator.js~EdgeIterator",
    "static": false,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator#indices",
    "access": "private",
    "description": "The edges.",
    "lineNumber": 88,
    "type": {
      "nullable": null,
      "types": [
        "Uint32Array[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 568,
    "kind": "member",
    "name": "zeroCrossings",
    "memberof": "src/volume/EdgeIterator.js~EdgeIterator",
    "static": false,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator#zeroCrossings",
    "access": "private",
    "description": "The Zero Crossings.",
    "lineNumber": 97,
    "type": {
      "nullable": null,
      "types": [
        "Float32Array[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 569,
    "kind": "member",
    "name": "normals",
    "memberof": "src/volume/EdgeIterator.js~EdgeIterator",
    "static": false,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator#normals",
    "access": "private",
    "description": "The intersection normals.",
    "lineNumber": 106,
    "type": {
      "nullable": null,
      "types": [
        "Float32Array[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 570,
    "kind": "member",
    "name": "axes",
    "memberof": "src/volume/EdgeIterator.js~EdgeIterator",
    "static": false,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator#axes",
    "access": "private",
    "description": "The axes of the existing edges.",
    "lineNumber": 115,
    "type": {
      "nullable": null,
      "types": [
        "Uint8Array[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 571,
    "kind": "member",
    "name": "lengths",
    "memberof": "src/volume/EdgeIterator.js~EdgeIterator",
    "static": false,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator#lengths",
    "access": "public",
    "description": "The amount of edges for each internal set of edges (X -> Y -> Z).",
    "lineNumber": 123,
    "type": {
      "nullable": null,
      "types": [
        "Number[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 572,
    "kind": "member",
    "name": "result",
    "memberof": "src/volume/EdgeIterator.js~EdgeIterator",
    "static": false,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator#result",
    "access": "private",
    "description": "An iterator result.",
    "lineNumber": 132,
    "type": {
      "nullable": null,
      "types": [
        "IteratorResult"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 573,
    "kind": "member",
    "name": "initialC",
    "memberof": "src/volume/EdgeIterator.js~EdgeIterator",
    "static": false,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator#initialC",
    "access": "private",
    "description": "The initial dimension index.",
    "lineNumber": 141,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 574,
    "kind": "member",
    "name": "c",
    "memberof": "src/volume/EdgeIterator.js~EdgeIterator",
    "static": false,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator#c",
    "access": "private",
    "description": "The current dimension index.",
    "lineNumber": 150,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 575,
    "kind": "member",
    "name": "initialD",
    "memberof": "src/volume/EdgeIterator.js~EdgeIterator",
    "static": false,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator#initialD",
    "access": "private",
    "description": "The initial dimension limit.",
    "lineNumber": 159,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 576,
    "kind": "member",
    "name": "d",
    "memberof": "src/volume/EdgeIterator.js~EdgeIterator",
    "static": false,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator#d",
    "access": "private",
    "description": "The dimension limit.",
    "lineNumber": 168,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 577,
    "kind": "member",
    "name": "i",
    "memberof": "src/volume/EdgeIterator.js~EdgeIterator",
    "static": false,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator#i",
    "access": "private",
    "description": "The current iteration index.",
    "lineNumber": 177,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 578,
    "kind": "member",
    "name": "l",
    "memberof": "src/volume/EdgeIterator.js~EdgeIterator",
    "static": false,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator#l",
    "access": "private",
    "description": "The current iteration limit.",
    "lineNumber": 186,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 579,
    "kind": "method",
    "name": "reset",
    "memberof": "src/volume/EdgeIterator.js~EdgeIterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator#reset",
    "access": "public",
    "description": "Resets this iterator.",
    "lineNumber": 198,
    "return": {
      "nullable": null,
      "types": [
        "EdgeIterator"
      ],
      "spread": false,
      "description": "This iterator."
    },
    "params": []
  },
  {
    "__docId__": 589,
    "kind": "method",
    "name": "next",
    "memberof": "src/volume/EdgeIterator.js~EdgeIterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator#next",
    "access": "public",
    "description": "Iterates over the edges.",
    "lineNumber": 252,
    "return": {
      "nullable": null,
      "types": [
        "IteratorResult"
      ],
      "spread": false,
      "description": "The next edge."
    },
    "params": []
  },
  {
    "__docId__": 592,
    "kind": "method",
    "name": "return",
    "memberof": "src/volume/EdgeIterator.js~EdgeIterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator#return",
    "access": "public",
    "description": "Called when this iterator will no longer be run to completion.",
    "lineNumber": 335,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "An interator result value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "IteratorResult"
      ],
      "spread": false,
      "description": "A premature completion result."
    }
  },
  {
    "__docId__": 593,
    "kind": "method",
    "name": "[Symbol.iterator]",
    "memberof": "src/volume/EdgeIterator.js~EdgeIterator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/EdgeIterator.js~EdgeIterator#[Symbol.iterator]",
    "access": "public",
    "description": "Returns this iterator.",
    "lineNumber": 350,
    "return": {
      "nullable": null,
      "types": [
        "EdteIterator"
      ],
      "spread": false,
      "description": "An iterator."
    },
    "params": []
  },
  {
    "__docId__": 594,
    "kind": "file",
    "name": "src/volume/HermiteData.js",
    "content": "import { RunLengthEncoding } from \"../codecs/RunLengthEncoding.js\";\r\nimport { EdgeData } from \"./EdgeData.js\";\r\nimport { Material } from \"./Material.js\";\r\n\r\n/**\r\n * The isovalue.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\n\r\nlet isovalue = 0.0;\r\n\r\n/**\r\n * The material grid resolution.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\n\r\nlet resolution = 0;\r\n\r\n/**\r\n * The total amount of grid point indices.\r\n *\r\n * @type {Number}\r\n * @private\r\n */\r\n\r\nlet indexCount = 0;\r\n\r\n/**\r\n * Hermite data.\r\n *\r\n * @implements {Serializable}\r\n * @implements {Deserializable}\r\n * @implements {TransferableContainer}\r\n */\r\n\r\nexport class HermiteData {\r\n\r\n\t/**\r\n\t * Constructs a new set of Hermite data.\r\n\t *\r\n\t * @param {Boolean} [initialize=true] - Whether the data should be initialised immediately.\r\n\t */\r\n\r\n\tconstructor(initialize = true) {\r\n\r\n\t\t/**\r\n\t\t * Describes how many material indices are currently solid:\r\n\t\t *\r\n\t\t * - The chunk lies outside the volume if there are no solid grid points.\r\n\t\t * - The chunk lies completely inside the volume if all points are solid.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.materials = 0;\r\n\r\n\t\t/**\r\n\t\t * The grid points.\r\n\t\t *\r\n\t\t * @type {Uint8Array}\r\n\t\t */\r\n\r\n\t\tthis.materialIndices = initialize ? new Uint8Array(indexCount) : null;\r\n\r\n\t\t/**\r\n\t\t * Run-length compression data.\r\n\t\t *\r\n\t\t * @type {Uint32Array}\r\n\t\t */\r\n\r\n\t\tthis.runLengths = null;\r\n\r\n\t\t/**\r\n\t\t * The edge data.\r\n\t\t *\r\n\t\t * @type {EdgeData}\r\n\t\t */\r\n\r\n\t\tthis.edgeData = null;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether this data container is empty.\r\n\t *\r\n\t * @type {Boolean}\r\n\t */\r\n\r\n\tget empty() {\r\n\r\n\t\treturn (this.materials === 0);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether this data container is full.\r\n\t *\r\n\t * @type {Boolean}\r\n\t */\r\n\r\n\tget full() {\r\n\r\n\t\treturn (this.materials === indexCount);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether this data is currently compressed.\r\n\t *\r\n\t * @type {Boolean}\r\n\t */\r\n\r\n\tget compressed() {\r\n\r\n\t\treturn (this.runLengths !== null);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether this data is currently gone.\r\n\t *\r\n\t * @type {Boolean}\r\n\t */\r\n\r\n\tget neutered() {\r\n\r\n\t\treturn (!this.empty && this.materialIndices === null);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adopts the given data.\r\n\t *\r\n\t * @param {HermiteData} data - The data to adopt.\r\n\t * @return {HermiteData} This data.\r\n\t */\r\n\r\n\tset(data) {\r\n\r\n\t\tthis.materials = data.materials;\r\n\t\tthis.materialIndices = data.materialIndices;\r\n\t\tthis.runLengths = data.runLengths;\r\n\t\tthis.edgeData = data.edgeData;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all data.\r\n\t *\r\n\t * @return {HermiteData} This data.\r\n\t */\r\n\r\n\tclear() {\r\n\r\n\t\tthis.materials = 0;\r\n\t\tthis.materialIndices = null;\r\n\t\tthis.runLengths = null;\r\n\t\tthis.edgeData = null;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the specified material index.\r\n\t *\r\n\t * @param {Number} index - The index of the material index that should be updated.\r\n\t * @param {Number} value - The new material index.\r\n\t */\r\n\r\n\tsetMaterialIndex(index, value) {\r\n\r\n\t\t// Keep track of how many material indices are solid.\r\n\t\tif(this.materialIndices[index] === Material.AIR) {\r\n\r\n\t\t\tif(value !== Material.AIR) {\r\n\r\n\t\t\t\t++this.materials;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if(value === Material.AIR) {\r\n\r\n\t\t\t--this.materials;\r\n\r\n\t\t}\r\n\r\n\t\tthis.materialIndices[index] = value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Compresses this data.\r\n\t *\r\n\t * @param {HermiteData} [target=this] - A target data set. The compressed data will be assigned to this set.\r\n\t * @return {HermiteData} The target data set.\r\n\t */\r\n\r\n\tcompress(target = this) {\r\n\r\n\t\tlet encoding;\r\n\r\n\t\tif(!this.compressed) {\r\n\r\n\t\t\t// Note: empty sets won't be compressed. They can be discarded.\r\n\t\t\tif(this.full) {\r\n\r\n\t\t\t\t// This deliberately destroys material variations to save space!\r\n\t\t\t\tencoding = new RunLengthEncoding(\r\n\t\t\t\t\t[this.materialIndices.length],\r\n\t\t\t\t\t[Material.SOLID]\r\n\t\t\t\t);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tencoding = RunLengthEncoding.encode(this.materialIndices);\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.materialIndices = new Uint8Array(encoding.data);\r\n\t\t\ttarget.runLengths = new Uint32Array(encoding.runLengths);\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttarget.materialIndices = this.materialIndices;\r\n\t\t\ttarget.runLengths = this.runLengths;\r\n\r\n\t\t}\r\n\r\n\t\ttarget.materials = this.materials;\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decompresses this data.\r\n\t *\r\n\t * @param {HermiteData} [target=this] - A target data set. If none is provided, the compressed data will be replaced with the decompressed data.\r\n\t * @return {HermiteData} The target data set.\r\n\t */\r\n\r\n\tdecompress(target = this) {\r\n\r\n\t\ttarget.materialIndices = !this.compressed ?\r\n\t\t\tthis.materialIndices : RunLengthEncoding.decode(\r\n\t\t\t\tthis.runLengths, this.materialIndices, new Uint8Array(indexCount)\r\n\t\t\t);\r\n\r\n\t\ttarget.runLengths = null;\r\n\t\ttarget.materials = this.materials;\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Serialises this data.\r\n\t *\r\n\t * @param {Boolean} [deflate=false] - Whether the data should be compressed if possible.\r\n\t * @return {Object} The serialised data.\r\n\t */\r\n\r\n\tserialize(deflate = false) {\r\n\r\n\t\treturn {\r\n\t\t\tmaterials: this.materials,\r\n\t\t\tmaterialIndices: this.materialIndices,\r\n\t\t\trunLengths: this.runLengths,\r\n\t\t\tedgeData: (this.edgeData !== null) ? this.edgeData.serialize() : null\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adopts the given serialised data.\r\n\t *\r\n\t * @param {Object} object - Serialised Hermite data. Can be null.\r\n\t * @return {Deserializable} This object or null if the given serialised data was null.\r\n\t */\r\n\r\n\tdeserialize(object) {\r\n\r\n\t\tlet result = this;\r\n\r\n\t\tif(object !== null) {\r\n\r\n\t\t\tthis.materials = object.materials;\r\n\t\t\tthis.materialIndices = object.materialIndices;\r\n\t\t\tthis.runLengths = object.runLengths;\r\n\r\n\t\t\tif(object.edgeData !== null) {\r\n\r\n\t\t\t\tif(this.edgeData === null) {\r\n\r\n\t\t\t\t\t// Create an empty edge data container.\r\n\t\t\t\t\tthis.edgeData = new EdgeData(resolution);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.edgeData.deserialize(object.edgeData);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.edgeData = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tresult = null;\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a list of transferable items.\r\n\t *\r\n\t * @param {Array} [transferList] - An optional target list. The transferable items will be added to this list.\r\n\t * @return {Transferable[]} The transfer list.\r\n\t */\r\n\r\n\tcreateTransferList(transferList = []) {\r\n\r\n\t\tif(this.edgeData !== null) {\r\n\r\n\t\t\tthis.edgeData.createTransferList(transferList);\r\n\r\n\t\t}\r\n\r\n\t\tif(this.materialIndices !== null) {\r\n\r\n\t\t\ttransferList.push(this.materialIndices.buffer);\r\n\r\n\t\t}\r\n\r\n\t\tif(this.runLengths !== null) {\r\n\r\n\t\t\ttransferList.push(this.runLengths.buffer);\r\n\r\n\t\t}\r\n\r\n\t\treturn transferList;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The global isovalue.\r\n\t *\r\n\t * A constant distance value that denotes the boundaries of SDFs.\r\n\t *\r\n\t * @type {Number}\r\n\t */\r\n\r\n\tstatic get isovalue() {\r\n\r\n\t\treturn isovalue;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Warning: changing the isovalue is not recommended.\r\n\t *\r\n\t * @type {Number}\r\n\t */\r\n\r\n\tstatic set isovalue(value) {\r\n\r\n\t\tisovalue = value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The material grid resolution.\r\n\t *\r\n\t * The effective resolution of a chunk of Hermite data is the distance between\r\n\t * two adjacent grid points with respect to the size of the containing world\r\n\t * octant.\r\n\t *\r\n\t * @type {Number}\r\n\t */\r\n\r\n\tstatic get resolution() {\r\n\r\n\t\treturn resolution;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Warning: this value should only be set once.\r\n\t *\r\n\t * The upper limit is 256.\r\n\t *\r\n\t * @type {Number}\r\n\t */\r\n\r\n\tstatic set resolution(value) {\r\n\r\n\t\t// Round up to the next power of two.\r\n\t\tvalue = Math.pow(2, Math.max(0, Math.ceil(Math.log2(value))));\r\n\r\n\t\tresolution = Math.max(1, Math.min(256, value));\r\n\t\tindexCount = Math.pow((resolution + 1), 3);\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/HermiteData.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 595,
    "kind": "variable",
    "name": "isovalue",
    "memberof": "src/volume/HermiteData.js",
    "static": true,
    "longname": "src/volume/HermiteData.js~isovalue",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/HermiteData.js",
    "importStyle": null,
    "description": "The isovalue.",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 596,
    "kind": "variable",
    "name": "resolution",
    "memberof": "src/volume/HermiteData.js",
    "static": true,
    "longname": "src/volume/HermiteData.js~resolution",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/HermiteData.js",
    "importStyle": null,
    "description": "The material grid resolution.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 597,
    "kind": "variable",
    "name": "indexCount",
    "memberof": "src/volume/HermiteData.js",
    "static": true,
    "longname": "src/volume/HermiteData.js~indexCount",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/HermiteData.js",
    "importStyle": null,
    "description": "The total amount of grid point indices.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 598,
    "kind": "class",
    "name": "HermiteData",
    "memberof": "src/volume/HermiteData.js",
    "static": true,
    "longname": "src/volume/HermiteData.js~HermiteData",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/volume/HermiteData.js",
    "importStyle": "{HermiteData}",
    "description": "Hermite data.",
    "lineNumber": 40,
    "interface": false,
    "implements": [
      "Serializable",
      "Deserializable",
      "TransferableContainer"
    ]
  },
  {
    "__docId__": 599,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/HermiteData.js~HermiteData#constructor",
    "access": "public",
    "description": "Constructs a new set of Hermite data.",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "initialize",
        "description": "Whether the data should be initialised immediately."
      }
    ]
  },
  {
    "__docId__": 600,
    "kind": "member",
    "name": "materials",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "static": false,
    "longname": "src/volume/HermiteData.js~HermiteData#materials",
    "access": "public",
    "description": "Describes how many material indices are currently solid:\n\n- The chunk lies outside the volume if there are no solid grid points.\n- The chunk lies completely inside the volume if all points are solid.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 601,
    "kind": "member",
    "name": "materialIndices",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "static": false,
    "longname": "src/volume/HermiteData.js~HermiteData#materialIndices",
    "access": "public",
    "description": "The grid points.",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "Uint8Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 602,
    "kind": "member",
    "name": "runLengths",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "static": false,
    "longname": "src/volume/HermiteData.js~HermiteData#runLengths",
    "access": "public",
    "description": "Run-length compression data.",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "Uint32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 603,
    "kind": "member",
    "name": "edgeData",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "static": false,
    "longname": "src/volume/HermiteData.js~HermiteData#edgeData",
    "access": "public",
    "description": "The edge data.",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "EdgeData"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 604,
    "kind": "get",
    "name": "empty",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/HermiteData.js~HermiteData#empty",
    "access": "public",
    "description": "Indicates whether this data container is empty.",
    "lineNumber": 93,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 605,
    "kind": "get",
    "name": "full",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/HermiteData.js~HermiteData#full",
    "access": "public",
    "description": "Indicates whether this data container is full.",
    "lineNumber": 105,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 606,
    "kind": "get",
    "name": "compressed",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/HermiteData.js~HermiteData#compressed",
    "access": "public",
    "description": "Indicates whether this data is currently compressed.",
    "lineNumber": 117,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 607,
    "kind": "get",
    "name": "neutered",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/HermiteData.js~HermiteData#neutered",
    "access": "public",
    "description": "Indicates whether this data is currently gone.",
    "lineNumber": 129,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 608,
    "kind": "method",
    "name": "set",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/HermiteData.js~HermiteData#set",
    "access": "public",
    "description": "Adopts the given data.",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "HermiteData"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data to adopt."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HermiteData"
      ],
      "spread": false,
      "description": "This data."
    }
  },
  {
    "__docId__": 613,
    "kind": "method",
    "name": "clear",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/HermiteData.js~HermiteData#clear",
    "access": "public",
    "description": "Removes all data.",
    "lineNumber": 159,
    "return": {
      "nullable": null,
      "types": [
        "HermiteData"
      ],
      "spread": false,
      "description": "This data."
    },
    "params": []
  },
  {
    "__docId__": 618,
    "kind": "method",
    "name": "setMaterialIndex",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/HermiteData.js~HermiteData#setMaterialIndex",
    "access": "public",
    "description": "Sets the specified material index.",
    "lineNumber": 177,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The index of the material index that should be updated."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The new material index."
      }
    ],
    "return": null
  },
  {
    "__docId__": 619,
    "kind": "method",
    "name": "compress",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/HermiteData.js~HermiteData#compress",
    "access": "public",
    "description": "Compresses this data.",
    "lineNumber": 205,
    "params": [
      {
        "nullable": null,
        "types": [
          "HermiteData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this",
        "defaultRaw": "this",
        "name": "target",
        "description": "A target data set. The compressed data will be assigned to this set."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HermiteData"
      ],
      "spread": false,
      "description": "The target data set."
    }
  },
  {
    "__docId__": 620,
    "kind": "method",
    "name": "decompress",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/HermiteData.js~HermiteData#decompress",
    "access": "public",
    "description": "Decompresses this data.",
    "lineNumber": 249,
    "params": [
      {
        "nullable": null,
        "types": [
          "HermiteData"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this",
        "defaultRaw": "this",
        "name": "target",
        "description": "A target data set. If none is provided, the compressed data will be replaced with the decompressed data."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HermiteData"
      ],
      "spread": false,
      "description": "The target data set."
    }
  },
  {
    "__docId__": 621,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/HermiteData.js~HermiteData#serialize",
    "access": "public",
    "description": "Serialises this data.",
    "lineNumber": 270,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "deflate",
        "description": "Whether the data should be compressed if possible."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The serialised data."
    }
  },
  {
    "__docId__": 622,
    "kind": "method",
    "name": "deserialize",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/HermiteData.js~HermiteData#deserialize",
    "access": "public",
    "description": "Adopts the given serialised data.",
    "lineNumber": 288,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "Serialised Hermite data. Can be null."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Deserializable"
      ],
      "spread": false,
      "description": "This object or null if the given serialised data was null."
    }
  },
  {
    "__docId__": 628,
    "kind": "method",
    "name": "createTransferList",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/HermiteData.js~HermiteData#createTransferList",
    "access": "public",
    "description": "Creates a list of transferable items.",
    "lineNumber": 332,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "transferList",
        "description": "An optional target list. The transferable items will be added to this list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transferable[]"
      ],
      "spread": false,
      "description": "The transfer list."
    }
  },
  {
    "__docId__": 629,
    "kind": "get",
    "name": "isovalue",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/volume/HermiteData.js~HermiteData.isovalue",
    "access": "public",
    "description": "The global isovalue.\n\nA constant distance value that denotes the boundaries of SDFs.",
    "lineNumber": 364,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 630,
    "kind": "set",
    "name": "isovalue",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/volume/HermiteData.js~HermiteData.isovalue",
    "access": "public",
    "description": "Warning: changing the isovalue is not recommended.",
    "lineNumber": 376,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 631,
    "kind": "get",
    "name": "resolution",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/volume/HermiteData.js~HermiteData.resolution",
    "access": "public",
    "description": "The material grid resolution.\n\nThe effective resolution of a chunk of Hermite data is the distance between\ntwo adjacent grid points with respect to the size of the containing world\noctant.",
    "lineNumber": 392,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 632,
    "kind": "set",
    "name": "resolution",
    "memberof": "src/volume/HermiteData.js~HermiteData",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/volume/HermiteData.js~HermiteData.resolution",
    "access": "public",
    "description": "Warning: this value should only be set once.\n\nThe upper limit is 256.",
    "lineNumber": 406,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 633,
    "kind": "file",
    "name": "src/volume/index.js",
    "content": "/**\r\n * Volume management components.\r\n *\r\n * @module rabbit-hole/volume\r\n */\r\n\r\nexport { Edge } from \"./Edge.js\";\r\nexport { EdgeData } from \"./EdgeData.js\";\r\nexport { EdgeIterator } from \"./EdgeIterator.js\";\r\nexport { HermiteData } from \"./HermiteData.js\";\r\nexport { Material } from \"./Material.js\";\r\nexport { Voxel } from \"./Voxel.js\";\r\n\r\nexport {\r\n\tConstructiveSolidGeometry,\r\n\tDensityFunction,\r\n\tDifference,\r\n\tIntersection,\r\n\tOperation,\r\n\tOperationType,\r\n\tUnion\r\n} from \"./csg\";\r\n\r\nexport {\r\n\tFractalNoise,\r\n\tHeightfield,\r\n\tSDFReviver,\r\n\tSDFType,\r\n\tSignedDistanceFunction,\r\n\tSuperPrimitive,\r\n\tSuperPrimitivePreset\r\n} from \"./sdf\";\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 634,
    "kind": "file",
    "name": "src/volume/Material.js",
    "content": "/**\r\n * An enumeration of material constants.\r\n *\r\n * @type {Object}\r\n * @property {Number} AIR - Indicates empty space.\r\n * @property {Number} SOLID - Indicates solid material.\r\n */\r\n\r\nexport const Material = {\r\n\r\n\tAIR: 0,\r\n\tSOLID: 1\r\n\r\n};\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/Material.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 635,
    "kind": "variable",
    "name": "Material",
    "memberof": "src/volume/Material.js",
    "static": true,
    "longname": "src/volume/Material.js~Material",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/volume/Material.js",
    "importStyle": "{Material}",
    "description": "An enumeration of material constants.",
    "lineNumber": 9,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "AIR",
        "description": "Indicates empty space."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "SOLID",
        "description": "Indicates solid material."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 636,
    "kind": "file",
    "name": "src/volume/sdf/FractalNoise.js",
    "content": "import { Box3, Vector2, Vector3, Vector4 } from \"math-ds\";\r\nimport { SignedDistanceFunction } from \"./SignedDistanceFunction.js\";\r\nimport { SDFType } from \"./SDFType.js\";\r\n\r\n/**\r\n * Fades a given value.\r\n *\r\n * @param {Number} t - A value.\r\n * @return {Number} The faded value.\r\n */\r\n\r\nfunction fade(t) {\r\n\r\n\treturn t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\r\n\r\n}\r\n\r\n/**\r\n * Computes a gradient for a given integer.\r\n *\r\n * @param {Number} p - An arbitrary integer.\r\n * @return {Number} The gradient, 1 or -1.\r\n */\r\n\r\nfunction gradient(p) {\r\n\r\n\t/* const v = gradients[p % 256];\r\n\r\n\treturn (v > 0.5) ? 1.0 : -1.0; */\r\n\r\n\treturn 0;\r\n\r\n}\r\n\r\n/**\r\n * Computes a noise value for a given number.\r\n *\r\n * @param {Number} p - An arbitrary number.\r\n * @return {Number} The noise value.\r\n */\r\n\r\nfunction noise(p) {\r\n\r\n\tconst p0 = Math.trunc(p);\r\n\tconst p1 = p0 + 1;\r\n\r\n\tconst t = p - p0;\r\n\tconst fadeT = fade(t);\r\n\r\n\tconst g0 = gradient(p0);\r\n\tconst g1 = fade(p1);\r\n\r\n\treturn (1.0 - fadeT) * g0 * (p - p0) + fadeT * g1 * (p - p1);\r\n\r\n}\r\n\r\n/**\r\n * Fractal noise based on Perlin's technique.\r\n *\r\n * Reference:\r\n *  https://gpfault.net/posts/perlin-noise.txt.html\r\n */\r\n\r\nexport class FractalNoise extends SignedDistanceFunction {\r\n\r\n\t/**\r\n\t * Constructs a new perlin noise density field.\r\n\t *\r\n\t * @param {Object} parameters - The parameters.\r\n\t * @param {Number} [material] - A material index.\r\n\t */\r\n\r\n\tconstructor(parameters = {}, material) {\r\n\r\n\t\tsuper(SDFType.PERLIN_NOISE, material);\r\n\r\n\t\t/**\r\n\t\t * The upper bounds of this density field.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\r\n\t\tthis.min = new Vector3(...parameters.min);\r\n\r\n\t\t/**\r\n\t\t * The upper bounds of this density field.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\r\n\t\tthis.max = new Vector3(...parameters.max);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the bounding box of this density field.\r\n\t *\r\n\t * @return {Box3} The bounding box.\r\n\t */\r\n\r\n\tcomputeBoundingBox() {\r\n\r\n\t\tthis.bbox = new Box3(this.min, this.max);\r\n\r\n\t\treturn this.bbox;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Samples the volume's density at the given point in space.\r\n\t *\r\n\t * @param {Vector3} position - A position.\r\n\t * @return {Number} The euclidean distance to the surface.\r\n\t */\r\n\r\n\tsample(position) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Serialises this SDF.\r\n\t *\r\n\t * @param {Boolean} [toJSON=false] - Whether the serialised data will be stringified.\r\n\t * @return {Object} A serialised description of this SDF.\r\n\t */\r\n\r\n\tserialize(toJSON = false) {\r\n\r\n\t\tconst result = super.serialize();\r\n\r\n\t\tresult.parameters = {\r\n\t\t\tmin: this.min.toArray(),\r\n\t\t\tmax: this.max.toArray()\r\n\t\t};\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/sdf/FractalNoise.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 637,
    "kind": "function",
    "name": "fade",
    "memberof": "src/volume/sdf/FractalNoise.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/volume/sdf/FractalNoise.js~fade",
    "access": "public",
    "export": false,
    "importPath": "rabbit-hole/src/volume/sdf/FractalNoise.js",
    "importStyle": null,
    "description": "Fades a given value.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "A value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The faded value."
    },
    "ignore": true
  },
  {
    "__docId__": 638,
    "kind": "function",
    "name": "gradient",
    "memberof": "src/volume/sdf/FractalNoise.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/volume/sdf/FractalNoise.js~gradient",
    "access": "public",
    "export": false,
    "importPath": "rabbit-hole/src/volume/sdf/FractalNoise.js",
    "importStyle": null,
    "description": "Computes a gradient for a given integer.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "An arbitrary integer."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The gradient, 1 or -1."
    },
    "ignore": true
  },
  {
    "__docId__": 639,
    "kind": "function",
    "name": "noise",
    "memberof": "src/volume/sdf/FractalNoise.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/volume/sdf/FractalNoise.js~noise",
    "access": "public",
    "export": false,
    "importPath": "rabbit-hole/src/volume/sdf/FractalNoise.js",
    "importStyle": null,
    "description": "Computes a noise value for a given number.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "An arbitrary number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The noise value."
    },
    "ignore": true
  },
  {
    "__docId__": 640,
    "kind": "class",
    "name": "FractalNoise",
    "memberof": "src/volume/sdf/FractalNoise.js",
    "static": true,
    "longname": "src/volume/sdf/FractalNoise.js~FractalNoise",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/volume/sdf/FractalNoise.js",
    "importStyle": "{FractalNoise}",
    "description": "Fractal noise based on Perlin's technique.\n\nReference:\n https://gpfault.net/posts/perlin-noise.txt.html",
    "lineNumber": 64,
    "interface": false,
    "extends": [
      "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction"
    ]
  },
  {
    "__docId__": 641,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/volume/sdf/FractalNoise.js~FractalNoise",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/FractalNoise.js~FractalNoise#constructor",
    "access": "public",
    "description": "Constructs a new perlin noise density field.",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": "The parameters."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "material",
        "description": "A material index."
      }
    ]
  },
  {
    "__docId__": 642,
    "kind": "member",
    "name": "min",
    "memberof": "src/volume/sdf/FractalNoise.js~FractalNoise",
    "static": false,
    "longname": "src/volume/sdf/FractalNoise.js~FractalNoise#min",
    "access": "public",
    "description": "The upper bounds of this density field.",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 643,
    "kind": "member",
    "name": "max",
    "memberof": "src/volume/sdf/FractalNoise.js~FractalNoise",
    "static": false,
    "longname": "src/volume/sdf/FractalNoise.js~FractalNoise#max",
    "access": "public",
    "description": "The upper bounds of this density field.",
    "lineNumber": 91,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 644,
    "kind": "method",
    "name": "computeBoundingBox",
    "memberof": "src/volume/sdf/FractalNoise.js~FractalNoise",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/FractalNoise.js~FractalNoise#computeBoundingBox",
    "access": "public",
    "description": "Calculates the bounding box of this density field.",
    "lineNumber": 101,
    "return": {
      "nullable": null,
      "types": [
        "Box3"
      ],
      "spread": false,
      "description": "The bounding box."
    },
    "params": []
  },
  {
    "__docId__": 645,
    "kind": "member",
    "name": "bbox",
    "memberof": "src/volume/sdf/FractalNoise.js~FractalNoise",
    "static": false,
    "longname": "src/volume/sdf/FractalNoise.js~FractalNoise#bbox",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 646,
    "kind": "method",
    "name": "sample",
    "memberof": "src/volume/sdf/FractalNoise.js~FractalNoise",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/FractalNoise.js~FractalNoise#sample",
    "access": "public",
    "description": "Samples the volume's density at the given point in space.",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "A position."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The euclidean distance to the surface."
    }
  },
  {
    "__docId__": 647,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/volume/sdf/FractalNoise.js~FractalNoise",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/FractalNoise.js~FractalNoise#serialize",
    "access": "public",
    "description": "Serialises this SDF.",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "toJSON",
        "description": "Whether the serialised data will be stringified."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A serialised description of this SDF."
    }
  },
  {
    "__docId__": 648,
    "kind": "file",
    "name": "src/volume/sdf/Heightfield.js",
    "content": "import { Box3 } from \"math-ds\";\r\nimport { SignedDistanceFunction } from \"./SignedDistanceFunction.js\";\r\nimport { SDFType } from \"./SDFType.js\";\r\n\r\n/**\r\n * Reads the image data of the given image.\r\n *\r\n * @private\r\n * @param {Image} image - The image.\r\n * @return {ImageData} The image data.\r\n */\r\n\r\nfunction readImageData(image) {\r\n\r\n\tconst canvas = document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"canvas\");\r\n\tconst context = canvas.getContext(\"2d\");\r\n\r\n\tcanvas.width = image.width;\r\n\tcanvas.height = image.height;\r\n\tcontext.drawImage(image, 0, 0);\r\n\r\n\treturn context.getImageData(0, 0, image.width, image.height);\r\n\r\n}\r\n\r\n/**\r\n * A Signed Distance Function that describes a heightfield.\r\n */\r\n\r\nexport class Heightfield extends SignedDistanceFunction {\r\n\r\n\t/**\r\n\t * Constructs a new heightfield SDF.\r\n\t *\r\n\t * @param {Object} parameters - The parameters.\r\n\t * @param {Array} [parameters.width=1] - The width of the heightfield.\r\n\t * @param {Array} [parameters.height=1] - The height of the heightfield.\r\n\t * @param {Boolean} [parameters.smooth=true] - Whether the height data should be smoothed.\r\n\t * @param {Uint8ClampedArray} [parameters.data=null] - The heightmap image data.\r\n\t * @param {Image} [parameters.image] - The heightmap image.\r\n\t * @param {Number} [material] - A material index.\r\n\t */\r\n\r\n\tconstructor(parameters = {}, material) {\r\n\r\n\t\tsuper(SDFType.HEIGHTFIELD, material);\r\n\r\n\t\t/**\r\n\t\t * The width.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.width = (parameters.width !== undefined) ? parameters.width : 1;\r\n\r\n\t\t/**\r\n\t\t * The height.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.height = (parameters.height !== undefined) ? parameters.height : 1;\r\n\r\n\t\t/**\r\n\t\t * Indicates whether the height data should be smoothed.\r\n\t\t *\r\n\t\t * @type {Boolean}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.smooth = (parameters.smooth !== undefined) ? parameters.smooth : true;\r\n\r\n\t\t/**\r\n\t\t * The height data.\r\n\t\t *\r\n\t\t * @type {Uint8ClampedArray}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.data = (parameters.data !== undefined) ? parameters.data : null;\r\n\r\n\t\t/**\r\n\t\t * The heightmap.\r\n\t\t *\r\n\t\t * @type {Image}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.heightmap = null;\r\n\r\n\t\tif(parameters.image !== undefined) {\r\n\r\n\t\t\tthis.fromImage(parameters.image);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reads the image data of a given heightmap and converts it into a greyscale\r\n\t * data array.\r\n\t *\r\n\t * @param {Image} image - The heightmap image.\r\n\t * @return {Heightfield} This heightfield.\r\n\t */\r\n\r\n\tfromImage(image) {\r\n\r\n\t\tconst imageData = (typeof document === \"undefined\") ? null : readImageData(image);\r\n\r\n\t\tlet result = null;\r\n\t\tlet data;\r\n\r\n\t\tlet i, j, l;\r\n\r\n\t\tif(imageData !== null) {\r\n\r\n\t\t\tdata = imageData.data;\r\n\r\n\t\t\t// Reduce image data to greyscale format.\r\n\t\t\tresult = new Uint8ClampedArray(data.length / 4);\r\n\r\n\t\t\tfor(i = 0, j = 0, l = result.length; i < l; ++i, j += 4) {\r\n\r\n\t\t\t\tresult[i] = data[j];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.heightmap = image;\r\n\t\t\tthis.width = imageData.width;\r\n\t\t\tthis.height = imageData.height;\r\n\t\t\tthis.data = result;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Retrives the height value for the given coordinates.\r\n\t *\r\n\t * @param {Number} x - The x coordinate.\r\n\t * @param {Number} z - The z coordinate.\r\n\t * @return {Number} The height.\r\n\t */\r\n\r\n\tgetHeight(x, z) {\r\n\r\n\t\tconst w = this.width, h = this.height;\r\n\t\tconst data = this.data;\r\n\r\n\t\tlet height;\r\n\r\n\t\tx = Math.round(x * w);\r\n\t\tz = Math.round(z * h);\r\n\r\n\t\tif(this.smooth) {\r\n\r\n\t\t\tx = Math.max(Math.min(x, w - 1), 1);\r\n\t\t\tz = Math.max(Math.min(z, h - 1), 1);\r\n\r\n\t\t\tconst p = x + 1, q = x - 1;\r\n\t\t\tconst a = z * w, b = a + w, c = a - w;\r\n\r\n\t\t\theight = (\r\n\r\n\t\t\t\tdata[c + q] + data[c + x] + data[c + p] +\r\n\t\t\t\tdata[a + q] + data[a + x] + data[a + p] +\r\n\t\t\t\tdata[b + q] + data[b + x] + data[b + p]\r\n\r\n\t\t\t) / 9;\r\n\r\n\t\t} else {\r\n\r\n\t\t\theight = data[z * w + x];\r\n\r\n\t\t}\r\n\r\n\t\treturn height;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the bounding box of this SDF.\r\n\t *\r\n\t * @return {Box3} The bounding box.\r\n\t */\r\n\r\n\tcomputeBoundingBox() {\r\n\r\n\t\tconst boundingBox = new Box3();\r\n\r\n\t\tconst w = Math.min(this.width / this.height, 1.0);\r\n\t\tconst h = Math.min(this.height / this.width, 1.0);\r\n\r\n\t\tboundingBox.min.set(0, 0, 0);\r\n\t\tboundingBox.max.set(w, 1, h);\r\n\t\tboundingBox.applyMatrix4(this.getTransformation());\r\n\r\n\t\treturn boundingBox;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Samples the volume's density at the given point in space.\r\n\t *\r\n\t * @param {Vector3} position - A position.\r\n\t * @return {Number} The euclidean distance to the surface.\r\n\t */\r\n\r\n\tsample(position) {\r\n\r\n\t\tconst boundingBox = this.boundingBox;\r\n\r\n\t\tlet d;\r\n\r\n\t\tif(boundingBox.containsPoint(position)) {\r\n\r\n\t\t\tposition.applyMatrix4(this.inverseTransformation);\r\n\r\n\t\t\td = position.y - this.getHeight(position.x, position.z) / 255;\r\n\r\n\t\t} else {\r\n\r\n\t\t\td = boundingBox.distanceToPoint(position);\r\n\r\n\t\t}\r\n\r\n\t\treturn d;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Serialises this SDF.\r\n\t *\r\n\t * @param {Boolean} [deflate=false] - Whether the data should be compressed if possible.\r\n\t * @return {Object} The serialised data.\r\n\t */\r\n\r\n\tserialize(deflate = false) {\r\n\r\n\t\tconst result = super.serialize();\r\n\r\n\t\tresult.parameters = {\r\n\t\t\twidth: this.width,\r\n\t\t\theight: this.height,\r\n\t\t\tsmooth: this.smooth,\r\n\t\t\tdata: deflate ? null : this.data,\r\n\t\t\tdataURL: (deflate && this.heightmap !== null) ? this.heightmap.toDataURL() : null,\r\n\t\t\timage: null\r\n\t\t};\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a list of transferable items.\r\n\t *\r\n\t * @param {Array} [transferList] - An optional target list. The transferable items will be added to this list.\r\n\t * @return {Transferable[]} The transfer list.\r\n\t */\r\n\r\n\tcreateTransferList(transferList = []) {\r\n\r\n\t\ttransferList.push(this.data.buffer);\r\n\r\n\t\treturn transferList;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/sdf/Heightfield.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 649,
    "kind": "function",
    "name": "readImageData",
    "memberof": "src/volume/sdf/Heightfield.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/volume/sdf/Heightfield.js~readImageData",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/sdf/Heightfield.js",
    "importStyle": null,
    "description": "Reads the image data of the given image.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "Image"
        ],
        "spread": false,
        "optional": false,
        "name": "image",
        "description": "The image."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ImageData"
      ],
      "spread": false,
      "description": "The image data."
    },
    "ignore": true
  },
  {
    "__docId__": 650,
    "kind": "class",
    "name": "Heightfield",
    "memberof": "src/volume/sdf/Heightfield.js",
    "static": true,
    "longname": "src/volume/sdf/Heightfield.js~Heightfield",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/volume/sdf/Heightfield.js",
    "importStyle": "{Heightfield}",
    "description": "A Signed Distance Function that describes a heightfield.",
    "lineNumber": 30,
    "interface": false,
    "extends": [
      "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction"
    ]
  },
  {
    "__docId__": 651,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/volume/sdf/Heightfield.js~Heightfield",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/Heightfield.js~Heightfield#constructor",
    "access": "public",
    "description": "Constructs a new heightfield SDF.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": "The parameters."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "parameters.width",
        "description": "The width of the heightfield."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "parameters.height",
        "description": "The height of the heightfield."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "parameters.smooth",
        "description": "Whether the height data should be smoothed."
      },
      {
        "nullable": null,
        "types": [
          "Uint8ClampedArray"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "parameters.data",
        "description": "The heightmap image data."
      },
      {
        "nullable": null,
        "types": [
          "Image"
        ],
        "spread": false,
        "optional": true,
        "name": "parameters.image",
        "description": "The heightmap image."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "material",
        "description": "A material index."
      }
    ]
  },
  {
    "__docId__": 652,
    "kind": "member",
    "name": "width",
    "memberof": "src/volume/sdf/Heightfield.js~Heightfield",
    "static": false,
    "longname": "src/volume/sdf/Heightfield.js~Heightfield#width",
    "access": "private",
    "description": "The width.",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 653,
    "kind": "member",
    "name": "height",
    "memberof": "src/volume/sdf/Heightfield.js~Heightfield",
    "static": false,
    "longname": "src/volume/sdf/Heightfield.js~Heightfield#height",
    "access": "private",
    "description": "The height.",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 654,
    "kind": "member",
    "name": "smooth",
    "memberof": "src/volume/sdf/Heightfield.js~Heightfield",
    "static": false,
    "longname": "src/volume/sdf/Heightfield.js~Heightfield#smooth",
    "access": "private",
    "description": "Indicates whether the height data should be smoothed.",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 655,
    "kind": "member",
    "name": "data",
    "memberof": "src/volume/sdf/Heightfield.js~Heightfield",
    "static": false,
    "longname": "src/volume/sdf/Heightfield.js~Heightfield#data",
    "access": "private",
    "description": "The height data.",
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "Uint8ClampedArray"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 656,
    "kind": "member",
    "name": "heightmap",
    "memberof": "src/volume/sdf/Heightfield.js~Heightfield",
    "static": false,
    "longname": "src/volume/sdf/Heightfield.js~Heightfield#heightmap",
    "access": "private",
    "description": "The heightmap.",
    "lineNumber": 91,
    "type": {
      "nullable": null,
      "types": [
        "Image"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 657,
    "kind": "method",
    "name": "fromImage",
    "memberof": "src/volume/sdf/Heightfield.js~Heightfield",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/Heightfield.js~Heightfield#fromImage",
    "access": "public",
    "description": "Reads the image data of a given heightmap and converts it into a greyscale\ndata array.",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "Image"
        ],
        "spread": false,
        "optional": false,
        "name": "image",
        "description": "The heightmap image."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Heightfield"
      ],
      "spread": false,
      "description": "This heightfield."
    }
  },
  {
    "__docId__": 662,
    "kind": "method",
    "name": "getHeight",
    "memberof": "src/volume/sdf/Heightfield.js~Heightfield",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/Heightfield.js~Heightfield#getHeight",
    "access": "public",
    "description": "Retrives the height value for the given coordinates.",
    "lineNumber": 150,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x coordinate."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "The z coordinate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The height."
    }
  },
  {
    "__docId__": 663,
    "kind": "method",
    "name": "computeBoundingBox",
    "memberof": "src/volume/sdf/Heightfield.js~Heightfield",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/Heightfield.js~Heightfield#computeBoundingBox",
    "access": "public",
    "description": "Calculates the bounding box of this SDF.",
    "lineNumber": 192,
    "return": {
      "nullable": null,
      "types": [
        "Box3"
      ],
      "spread": false,
      "description": "The bounding box."
    },
    "params": []
  },
  {
    "__docId__": 664,
    "kind": "method",
    "name": "sample",
    "memberof": "src/volume/sdf/Heightfield.js~Heightfield",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/Heightfield.js~Heightfield#sample",
    "access": "public",
    "description": "Samples the volume's density at the given point in space.",
    "lineNumber": 214,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "A position."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The euclidean distance to the surface."
    }
  },
  {
    "__docId__": 665,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/volume/sdf/Heightfield.js~Heightfield",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/Heightfield.js~Heightfield#serialize",
    "access": "public",
    "description": "Serialises this SDF.",
    "lineNumber": 243,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "deflate",
        "description": "Whether the data should be compressed if possible."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The serialised data."
    }
  },
  {
    "__docId__": 666,
    "kind": "method",
    "name": "createTransferList",
    "memberof": "src/volume/sdf/Heightfield.js~Heightfield",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/Heightfield.js~Heightfield#createTransferList",
    "access": "public",
    "description": "Creates a list of transferable items.",
    "lineNumber": 267,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "transferList",
        "description": "An optional target list. The transferable items will be added to this list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transferable[]"
      ],
      "spread": false,
      "description": "The transfer list."
    }
  },
  {
    "__docId__": 667,
    "kind": "file",
    "name": "src/volume/sdf/index.js",
    "content": "/**\r\n * A collection of Signed Distance Function components.\r\n *\r\n * @module rabbit-hole/volume/sdf\r\n */\r\n\r\nexport { SignedDistanceFunction } from \"./SignedDistanceFunction.js\";\r\nexport { SDFReviver } from \"./SDFReviver.js\";\r\nexport { SDFType } from \"./SDFType.js\";\r\n\r\nexport { FractalNoise } from \"./FractalNoise.js\";\r\nexport { Heightfield } from \"./Heightfield.js\";\r\nexport { SuperPrimitive, SuperPrimitivePreset } from \"./SuperPrimitive.js\";\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/sdf/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 668,
    "kind": "file",
    "name": "src/volume/sdf/SDFReviver.js",
    "content": "import { FractalNoise } from \"./FractalNoise.js\";\r\nimport { Heightfield } from \"./Heightfield.js\";\r\nimport { SDFType } from \"./SDFType.js\";\r\nimport { SuperPrimitive } from \"./SuperPrimitive.js\";\r\n\r\n/**\r\n * An SDF reviver.\r\n */\r\n\r\nexport class SDFReviver {\r\n\r\n\t/**\r\n\t * Creates an SDF from the given serialised description.\r\n\t *\r\n\t * @param {Object} description - A serialised SDF.\r\n\t * @return {SignedDistanceFunction} A deserialized SDF.\r\n\t */\r\n\r\n\trevive(description) {\r\n\r\n\t\tlet sdf, i, l;\r\n\r\n\t\tswitch(description.type) {\r\n\r\n\t\t\tcase SDFType.FRACTAL_NOISE:\r\n\t\t\t\tsdf = new FractalNoise(description.parameters, description.material);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase SDFType.HEIGHTFIELD:\r\n\t\t\t\tsdf = new Heightfield(description.parameters, description.material);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase SDFType.SUPER_PRIMITIVE:\r\n\t\t\t\tsdf = new SuperPrimitive(description.parameters, description.material);\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\tsdf.operation = description.operation;\r\n\t\tsdf.position.fromArray(description.position);\r\n\t\tsdf.quaternion.fromArray(description.quaternion);\r\n\t\tsdf.scale.fromArray(description.scale);\r\n\t\tsdf.updateInverseTransformation();\r\n\r\n\t\tfor(i = 0, l = description.children.length; i < l; ++i) {\r\n\r\n\t\t\tsdf.children.push(this.revive(description.children[i]));\r\n\r\n\t\t}\r\n\r\n\t\treturn sdf;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/sdf/SDFReviver.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 669,
    "kind": "class",
    "name": "SDFReviver",
    "memberof": "src/volume/sdf/SDFReviver.js",
    "static": true,
    "longname": "src/volume/sdf/SDFReviver.js~SDFReviver",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/volume/sdf/SDFReviver.js",
    "importStyle": "{SDFReviver}",
    "description": "An SDF reviver.",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 670,
    "kind": "method",
    "name": "revive",
    "memberof": "src/volume/sdf/SDFReviver.js~SDFReviver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SDFReviver.js~SDFReviver#revive",
    "access": "public",
    "description": "Creates an SDF from the given serialised description.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "A serialised SDF."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SignedDistanceFunction"
      ],
      "spread": false,
      "description": "A deserialized SDF."
    }
  },
  {
    "__docId__": 671,
    "kind": "file",
    "name": "src/volume/sdf/SDFType.js",
    "content": "/**\r\n * An enumeration of SDF types.\r\n *\r\n * @type {Object}\r\n * @property {String} HEIGHTFIELD - A heightfield description.\r\n * @property {String} FRACTAL_NOISE - A fractal noise description.\r\n * @property {String} SUPER_PRIMITIVE - A super primitive description.\r\n */\r\n\r\nexport const SDFType = {\r\n\r\n\tHEIGHTFIELD: \"sdf.heightfield\",\r\n\tFRACTAL_NOISE: \"sdf.fractalnoise\",\r\n\tSUPER_PRIMITIVE: \"sdf.superprimitive\"\r\n\r\n};\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/sdf/SDFType.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 672,
    "kind": "variable",
    "name": "SDFType",
    "memberof": "src/volume/sdf/SDFType.js",
    "static": true,
    "longname": "src/volume/sdf/SDFType.js~SDFType",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/volume/sdf/SDFType.js",
    "importStyle": "{SDFType}",
    "description": "An enumeration of SDF types.",
    "lineNumber": 10,
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "HEIGHTFIELD",
        "description": "A heightfield description."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "FRACTAL_NOISE",
        "description": "A fractal noise description."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "SUPER_PRIMITIVE",
        "description": "A super primitive description."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 673,
    "kind": "file",
    "name": "src/volume/sdf/SignedDistanceFunction.js",
    "content": "import { Matrix4, Quaternion, Vector3 } from \"math-ds\";\r\nimport { OperationType } from \"../csg/OperationType.js\";\r\nimport { Union } from \"../csg/Union.js\";\r\nimport { Difference } from \"../csg/Difference.js\";\r\nimport { Intersection } from \"../csg/Intersection.js\";\r\nimport { DensityFunction } from \"../csg/DensityFunction.js\";\r\nimport { Material } from \"../Material.js\";\r\n\r\n/**\r\n * A matrix.\r\n *\r\n * @type {Matrix4}\r\n * @private\r\n */\r\n\r\nconst m = new Matrix4();\r\n\r\n/**\r\n * An abstract Signed Distance Function.\r\n *\r\n * An SDF describes the signed Euclidean distance to the surface of an object,\r\n * effectively describing its density at every point in 3D space. It yields\r\n * negative values for points that lie inside the volume and positive values\r\n * for points outside. The value is zero at the exact boundary of the object.\r\n *\r\n * @implements {Serializable}\r\n * @implements {TransferableContainer}\r\n */\r\n\r\nexport class SignedDistanceFunction {\r\n\r\n\t/**\r\n\t * Constructs a new base SDF.\r\n\t *\r\n\t * @param {SDFType} type - The type of the SDF.\r\n\t * @param {Number} [material=Material.SOLID] - A material index. Must be an integer in the range of 1 to 255.\r\n\t */\r\n\r\n\tconstructor(type, material = Material.SOLID) {\r\n\r\n\t\t/**\r\n\t\t * The type of this SDF.\r\n\t\t *\r\n\t\t * @type {SDFType}\r\n\t\t */\r\n\r\n\t\tthis.type = type;\r\n\r\n\t\t/**\r\n\t\t * The operation type.\r\n\t\t *\r\n\t\t * @type {OperationType}\r\n\t\t */\r\n\r\n\t\tthis.operation = null;\r\n\r\n\t\t/**\r\n\t\t * A material index.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.material = Math.min(255, Math.max(Material.SOLID, Math.trunc(material)));\r\n\r\n\t\t/**\r\n\t\t * The axis-aligned bounding box of this SDF.\r\n\t\t *\r\n\t\t * @type {Box3}\r\n\t\t * @protected\r\n\t\t */\r\n\r\n\t\tthis.boundingBox = null;\r\n\r\n\t\t/**\r\n\t\t * The positional translation.\r\n\t\t *\r\n\t\t * Call {@link updateInverseTransformation} after changing this field.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\r\n\t\tthis.position = new Vector3();\r\n\r\n\t\t/**\r\n\t\t * The rotation.\r\n\t\t *\r\n\t\t * Call {@link updateInverseTransformation} after changing this field.\r\n\t\t *\r\n\t\t * @type {Quaternion}\r\n\t\t */\r\n\r\n\t\tthis.quaternion = new Quaternion();\r\n\r\n\t\t/**\r\n\t\t * The scale.\r\n\t\t *\r\n\t\t * Call {@link updateInverseTransformation} after changing this field.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\r\n\t\tthis.scale = new Vector3(1, 1, 1);\r\n\r\n\t\t/**\r\n\t\t * The inverted transformation matrix.\r\n\t\t *\r\n\t\t * @type {Matrix4}\r\n\t\t */\r\n\r\n\t\tthis.inverseTransformation = new Matrix4();\r\n\r\n\t\tthis.updateInverseTransformation();\r\n\r\n\t\t/**\r\n\t\t * A list of SDFs.\r\n\t\t *\r\n\t\t * SDFs can be chained to build CSG expressions.\r\n\t\t *\r\n\t\t * @type {SignedDistanceFunction[]}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.children = [];\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Composes a transformation matrix using the translation, rotation and scale\r\n\t * of this SDF.\r\n\t *\r\n\t * The transformation matrix is not needed for most SDF calculations and is\r\n\t * therefore not stored explicitly to save space.\r\n\t *\r\n\t * @param {Matrix4} [target] - A target matrix. If none is provided, a new one will be created.\r\n\t * @return {Matrix4} The transformation matrix.\r\n\t */\r\n\r\n\tgetTransformation(target = new Matrix4()) {\r\n\r\n\t\treturn target.compose(this.position, this.quaternion, this.scale);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the AABB of this SDF if it doesn't exist yet and returns it.\r\n\t *\r\n\t * @param {Boolean} [recursive=false] - Whether the child SDFs should be taken into account.\r\n\t * @return {Box3} The bounding box.\r\n\t */\r\n\r\n\tgetBoundingBox(recursive = false) {\r\n\r\n\t\tconst children = this.children;\r\n\r\n\t\tlet boundingBox = this.boundingBox;\r\n\t\tlet i, l;\r\n\r\n\t\tif(boundingBox === null) {\r\n\r\n\t\t\tboundingBox = this.computeBoundingBox();\r\n\t\t\tthis.boundingBox = boundingBox;\r\n\r\n\t\t}\r\n\r\n\t\tif(recursive) {\r\n\r\n\t\t\tboundingBox = boundingBox.clone();\r\n\r\n\t\t\tfor(i = 0, l = children.length; i < l; ++i) {\r\n\r\n\t\t\t\tboundingBox.union(children[i].getBoundingBox(recursive));\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn boundingBox;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the material.\r\n\t *\r\n\t * @param {Material} material - The material. Must be an integer in the range of 1 to 255.\r\n\t * @return {SignedDistanceFunction} This SDF.\r\n\t */\r\n\r\n\tsetMaterial(material) {\r\n\r\n\t\tthis.material = Math.min(255, Math.max(Material.SOLID, Math.trunc(material)));\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the CSG operation type of this SDF.\r\n\t *\r\n\t * @param {OperationType} operation - The CSG operation type.\r\n\t * @return {SignedDistanceFunction} This SDF.\r\n\t */\r\n\r\n\tsetOperationType(operation) {\r\n\r\n\t\tthis.operation = operation;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the inverse transformation matrix.\r\n\t *\r\n\t * This method should be called after the position, quaternion or scale has\r\n\t * changed. The bounding box will be updated automatically.\r\n\t *\r\n\t * @return {SignedDistanceFunction} This SDF.\r\n\t */\r\n\r\n\tupdateInverseTransformation() {\r\n\r\n\t\tthis.inverseTransformation.getInverse(this.getTransformation(m));\r\n\t\tthis.boundingBox = null;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the given SDF to this one.\r\n\t *\r\n\t * @param {SignedDistanceFunction} sdf - An SDF.\r\n\t * @return {SignedDistanceFunction} This SDF.\r\n\t */\r\n\r\n\tunion(sdf) {\r\n\r\n\t\tthis.children.push(sdf.setOperationType(OperationType.UNION));\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Subtracts the given SDF from this one.\r\n\t *\r\n\t * @param {SignedDistanceFunction} sdf - An SDF.\r\n\t * @return {SignedDistanceFunction} This SDF.\r\n\t */\r\n\r\n\tsubtract(sdf) {\r\n\r\n\t\tthis.children.push(sdf.setOperationType(OperationType.DIFFERENCE));\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Intersects the given SDF with this one.\r\n\t *\r\n\t * @param {SignedDistanceFunction} sdf - An SDF.\r\n\t * @return {SignedDistanceFunction} This SDF.\r\n\t */\r\n\r\n\tintersect(sdf) {\r\n\r\n\t\tthis.children.push(sdf.setOperationType(OperationType.INTERSECTION));\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Translates this SDF into a CSG expression.\r\n\t *\r\n\t * @return {Operation} A CSG operation.\r\n\t * @example a.union(b.intersect(c)).union(d).subtract(e) => Difference(Union(a, Intersection(b, c), d), e)\r\n\t */\r\n\r\n\ttoCSG() {\r\n\r\n\t\tconst children = this.children;\r\n\r\n\t\tlet operation = new DensityFunction(this);\r\n\t\tlet operationType;\r\n\t\tlet child;\r\n\t\tlet i, l;\r\n\r\n\t\tfor(i = 0, l = children.length; i < l; ++i) {\r\n\r\n\t\t\tchild = children[i];\r\n\r\n\t\t\tif(operationType !== child.operation) {\r\n\r\n\t\t\t\toperationType = child.operation;\r\n\r\n\t\t\t\tswitch(operationType) {\r\n\r\n\t\t\t\t\tcase OperationType.UNION:\r\n\t\t\t\t\t\toperation = new Union(operation);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase OperationType.DIFFERENCE:\r\n\t\t\t\t\t\toperation = new Difference(operation);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase OperationType.INTERSECTION:\r\n\t\t\t\t\t\toperation = new Intersection(operation);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\toperation.children.push(child.toCSG());\r\n\r\n\t\t}\r\n\r\n\t\treturn operation;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Serialises this SDF.\r\n\t *\r\n\t * @param {Boolean} [deflate=false] - Whether the data should be compressed if possible.\r\n\t * @return {Object} The serialised data.\r\n\t */\r\n\r\n\tserialize(deflate = false) {\r\n\r\n\t\tconst result = {\r\n\t\t\ttype: this.type,\r\n\t\t\toperation: this.operation,\r\n\t\t\tmaterial: this.material,\r\n\t\t\tposition: this.position.toArray(),\r\n\t\t\tquaternion: this.quaternion.toArray(),\r\n\t\t\tscale: this.scale.toArray(),\r\n\t\t\tparameters: null,\r\n\t\t\tchildren: []\r\n\t\t};\r\n\r\n\t\tlet i, l;\r\n\r\n\t\tfor(i = 0, l = this.children.length; i < l; ++i) {\r\n\r\n\t\t\tresult.children.push(this.children[i].serialize(deflate));\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a list of transferable items.\r\n\t *\r\n\t * @param {Array} [transferList] - An optional target list. The transferable items will be added to this list.\r\n\t * @return {Transferable[]} The transfer list.\r\n\t */\r\n\r\n\tcreateTransferList(transferList = []) {\r\n\r\n\t\treturn transferList;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a plain object that describes this SDF.\r\n\t *\r\n\t * @return {Object} A simple description of this SDF.\r\n\t */\r\n\r\n\ttoJSON() {\r\n\r\n\t\treturn this.serialize(true);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the bounding box of this SDF.\r\n\t *\r\n\t * @protected\r\n\t * @throws {Error} An error is thrown if the method is not overridden.\r\n\t * @return {Box3} The bounding box.\r\n\t */\r\n\r\n\tcomputeBoundingBox() {\r\n\r\n\t\tthrow new Error(\"SignedDistanceFunction#computeBoundingBox method not implemented!\");\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Samples the volume's density at the given point in space.\r\n\t *\r\n\t * @throws {Error} An error is thrown if the method is not overridden.\r\n\t * @param {Vector3} position - A position.\r\n\t * @return {Number} The Euclidean distance to the surface.\r\n\t */\r\n\r\n\tsample(position) {\r\n\r\n\t\tthrow new Error(\"SignedDistanceFunction#sample method not implemented!\");\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/sdf/SignedDistanceFunction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 674,
    "kind": "variable",
    "name": "m",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js",
    "static": true,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~m",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/sdf/SignedDistanceFunction.js",
    "importStyle": null,
    "description": "A matrix.",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "Matrix4"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 675,
    "kind": "class",
    "name": "SignedDistanceFunction",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js",
    "static": true,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/volume/sdf/SignedDistanceFunction.js",
    "importStyle": "{SignedDistanceFunction}",
    "description": "An abstract Signed Distance Function.\n\nAn SDF describes the signed Euclidean distance to the surface of an object,\neffectively describing its density at every point in 3D space. It yields\nnegative values for points that lie inside the volume and positive values\nfor points outside. The value is zero at the exact boundary of the object.",
    "lineNumber": 30,
    "interface": false,
    "implements": [
      "Serializable",
      "TransferableContainer"
    ]
  },
  {
    "__docId__": 676,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#constructor",
    "access": "public",
    "description": "Constructs a new base SDF.",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "SDFType"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of the SDF."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Material.SOLID",
        "defaultRaw": "Material.SOLID",
        "name": "material",
        "description": "A material index. Must be an integer in the range of 1 to 255."
      }
    ]
  },
  {
    "__docId__": 677,
    "kind": "member",
    "name": "type",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#type",
    "access": "public",
    "description": "The type of this SDF.",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "SDFType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 678,
    "kind": "member",
    "name": "operation",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#operation",
    "access": "public",
    "description": "The operation type.",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "OperationType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 679,
    "kind": "member",
    "name": "material",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#material",
    "access": "public",
    "description": "A material index.",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 680,
    "kind": "member",
    "name": "boundingBox",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#boundingBox",
    "access": "protected",
    "description": "The axis-aligned bounding box of this SDF.",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "Box3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 681,
    "kind": "member",
    "name": "position",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#position",
    "access": "public",
    "description": "The positional translation.\n\nCall {@link updateInverseTransformation} after changing this field.",
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 682,
    "kind": "member",
    "name": "quaternion",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#quaternion",
    "access": "public",
    "description": "The rotation.\n\nCall {@link updateInverseTransformation} after changing this field.",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "Quaternion"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 683,
    "kind": "member",
    "name": "scale",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#scale",
    "access": "public",
    "description": "The scale.\n\nCall {@link updateInverseTransformation} after changing this field.",
    "lineNumber": 102,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 684,
    "kind": "member",
    "name": "inverseTransformation",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#inverseTransformation",
    "access": "public",
    "description": "The inverted transformation matrix.",
    "lineNumber": 110,
    "type": {
      "nullable": null,
      "types": [
        "Matrix4"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 685,
    "kind": "member",
    "name": "children",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#children",
    "access": "private",
    "description": "A list of SDFs.\n\nSDFs can be chained to build CSG expressions.",
    "lineNumber": 123,
    "type": {
      "nullable": null,
      "types": [
        "SignedDistanceFunction[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 686,
    "kind": "method",
    "name": "getTransformation",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#getTransformation",
    "access": "public",
    "description": "Composes a transformation matrix using the translation, rotation and scale\nof this SDF.\n\nThe transformation matrix is not needed for most SDF calculations and is\ntherefore not stored explicitly to save space.",
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "Matrix4"
        ],
        "spread": false,
        "optional": true,
        "name": "target",
        "description": "A target matrix. If none is provided, a new one will be created."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Matrix4"
      ],
      "spread": false,
      "description": "The transformation matrix."
    }
  },
  {
    "__docId__": 687,
    "kind": "method",
    "name": "getBoundingBox",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#getBoundingBox",
    "access": "public",
    "description": "Calculates the AABB of this SDF if it doesn't exist yet and returns it.",
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "recursive",
        "description": "Whether the child SDFs should be taken into account."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Box3"
      ],
      "spread": false,
      "description": "The bounding box."
    }
  },
  {
    "__docId__": 689,
    "kind": "method",
    "name": "setMaterial",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#setMaterial",
    "access": "public",
    "description": "Sets the material.",
    "lineNumber": 188,
    "params": [
      {
        "nullable": null,
        "types": [
          "Material"
        ],
        "spread": false,
        "optional": false,
        "name": "material",
        "description": "The material. Must be an integer in the range of 1 to 255."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SignedDistanceFunction"
      ],
      "spread": false,
      "description": "This SDF."
    }
  },
  {
    "__docId__": 691,
    "kind": "method",
    "name": "setOperationType",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#setOperationType",
    "access": "public",
    "description": "Sets the CSG operation type of this SDF.",
    "lineNumber": 203,
    "params": [
      {
        "nullable": null,
        "types": [
          "OperationType"
        ],
        "spread": false,
        "optional": false,
        "name": "operation",
        "description": "The CSG operation type."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SignedDistanceFunction"
      ],
      "spread": false,
      "description": "This SDF."
    }
  },
  {
    "__docId__": 693,
    "kind": "method",
    "name": "updateInverseTransformation",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#updateInverseTransformation",
    "access": "public",
    "description": "Updates the inverse transformation matrix.\n\nThis method should be called after the position, quaternion or scale has\nchanged. The bounding box will be updated automatically.",
    "lineNumber": 220,
    "return": {
      "nullable": null,
      "types": [
        "SignedDistanceFunction"
      ],
      "spread": false,
      "description": "This SDF."
    },
    "params": []
  },
  {
    "__docId__": 695,
    "kind": "method",
    "name": "union",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#union",
    "access": "public",
    "description": "Adds the given SDF to this one.",
    "lineNumber": 236,
    "params": [
      {
        "nullable": null,
        "types": [
          "SignedDistanceFunction"
        ],
        "spread": false,
        "optional": false,
        "name": "sdf",
        "description": "An SDF."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SignedDistanceFunction"
      ],
      "spread": false,
      "description": "This SDF."
    }
  },
  {
    "__docId__": 696,
    "kind": "method",
    "name": "subtract",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#subtract",
    "access": "public",
    "description": "Subtracts the given SDF from this one.",
    "lineNumber": 251,
    "params": [
      {
        "nullable": null,
        "types": [
          "SignedDistanceFunction"
        ],
        "spread": false,
        "optional": false,
        "name": "sdf",
        "description": "An SDF."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SignedDistanceFunction"
      ],
      "spread": false,
      "description": "This SDF."
    }
  },
  {
    "__docId__": 697,
    "kind": "method",
    "name": "intersect",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#intersect",
    "access": "public",
    "description": "Intersects the given SDF with this one.",
    "lineNumber": 266,
    "params": [
      {
        "nullable": null,
        "types": [
          "SignedDistanceFunction"
        ],
        "spread": false,
        "optional": false,
        "name": "sdf",
        "description": "An SDF."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SignedDistanceFunction"
      ],
      "spread": false,
      "description": "This SDF."
    }
  },
  {
    "__docId__": 698,
    "kind": "method",
    "name": "toCSG",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#toCSG",
    "access": "public",
    "description": "Translates this SDF into a CSG expression.",
    "examples": [
      "a.union(b.intersect(c)).union(d).subtract(e) => Difference(Union(a, Intersection(b, c), d), e)"
    ],
    "lineNumber": 281,
    "return": {
      "nullable": null,
      "types": [
        "Operation"
      ],
      "spread": false,
      "description": "A CSG operation."
    },
    "params": []
  },
  {
    "__docId__": 699,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#serialize",
    "access": "public",
    "description": "Serialises this SDF.",
    "lineNumber": 331,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "deflate",
        "description": "Whether the data should be compressed if possible."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The serialised data."
    }
  },
  {
    "__docId__": 700,
    "kind": "method",
    "name": "createTransferList",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#createTransferList",
    "access": "public",
    "description": "Creates a list of transferable items.",
    "lineNumber": 363,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "transferList",
        "description": "An optional target list. The transferable items will be added to this list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transferable[]"
      ],
      "spread": false,
      "description": "The transfer list."
    }
  },
  {
    "__docId__": 701,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#toJSON",
    "access": "public",
    "description": "Returns a plain object that describes this SDF.",
    "lineNumber": 375,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A simple description of this SDF."
    },
    "params": []
  },
  {
    "__docId__": 702,
    "kind": "method",
    "name": "computeBoundingBox",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#computeBoundingBox",
    "access": "protected",
    "description": "Calculates the bounding box of this SDF.",
    "lineNumber": 389,
    "return": {
      "nullable": null,
      "types": [
        "Box3"
      ],
      "spread": false,
      "description": "The bounding box."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "An error is thrown if the method is not overridden."
      }
    ],
    "params": []
  },
  {
    "__docId__": 703,
    "kind": "method",
    "name": "sample",
    "memberof": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction#sample",
    "access": "public",
    "description": "Samples the volume's density at the given point in space.",
    "lineNumber": 403,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "A position."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The Euclidean distance to the surface."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "An error is thrown if the method is not overridden."
      }
    ]
  },
  {
    "__docId__": 704,
    "kind": "file",
    "name": "src/volume/sdf/SuperPrimitive.js",
    "content": "import { Box3, Vector2, Vector3, Vector4 } from \"math-ds\";\r\nimport { SignedDistanceFunction } from \"./SignedDistanceFunction.js\";\r\nimport { SDFType } from \"./SDFType.js\";\r\n\r\n/**\r\n * The super primitive.\r\n *\r\n * A function that is able to represent a wide range of conic/rectangular-radial\r\n * primitives of genus 0 and 1: (round) box, sphere, cylinder, capped cone,\r\n * torus, capsule, pellet, pipe, etc.\r\n *\r\n * Reference:\r\n *  https://www.shadertoy.com/view/MsVGWG\r\n */\r\n\r\nexport class SuperPrimitive extends SignedDistanceFunction {\r\n\r\n\t/**\r\n\t * Constructs a new super primitive.\r\n\t *\r\n\t * See {@link SuperPrimitivePreset} for a list of default configurations.\r\n\t *\r\n\t * @param {Object} parameters - The parameters.\r\n\t * @param {Array} parameters.s - The size and genus weight [x, y, z, w].\r\n\t * @param {Array} parameters.r - The corner radii [x, y, z].\r\n\t * @param {Number} [material] - A material index.\r\n\t * @example const cube = SuperPrimitive.create(SuperPrimitivePreset.CUBE);\r\n\t */\r\n\r\n\tconstructor(parameters = {}, material) {\r\n\r\n\t\tsuper(SDFType.SUPER_PRIMITIVE, material);\r\n\r\n\t\t/**\r\n\t\t * The base size. The W-component affects the genus of the primitive.\r\n\t\t *\r\n\t\t * @type {Vector4}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.s0 = new Vector4(...parameters.s);\r\n\r\n\t\t/**\r\n\t\t * The base corner radii.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.r0 = new Vector3(...parameters.r);\r\n\r\n\t\t/**\r\n\t\t * The size, adjusted for further calculations.\r\n\t\t *\r\n\t\t * @type {Vector4}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.s = new Vector4();\r\n\r\n\t\t/**\r\n\t\t * The corner radii, adjusted for further calculations.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.r = new Vector3();\r\n\r\n\t\t/**\r\n\t\t * Precomputed corner rounding constants.\r\n\t\t *\r\n\t\t * @type {Vector2}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.ba = new Vector2();\r\n\r\n\t\t/**\r\n\t\t * The bottom radius offset.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.offset = 0;\r\n\r\n\t\t// Calculate constants ahead of time.\r\n\t\tthis.precompute();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the size and genus weight.\r\n\t *\r\n\t * @param {Number} x - X.\r\n\t * @param {Number} y - Y.\r\n\t * @param {Number} z - Z.\r\n\t * @param {Number} w - W.\r\n\t * @return {SuperPrimitive} This instance.\r\n\t */\r\n\r\n\tsetSize(x, y, z, w) {\r\n\r\n\t\tthis.s0.set(x, y, z, w);\r\n\r\n\t\treturn this.precompute();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the corner radii.\r\n\t *\r\n\t * @param {Number} x - X.\r\n\t * @param {Number} y - Y.\r\n\t * @param {Number} z - Z.\r\n\t * @return {SuperPrimitive} This instance.\r\n\t */\r\n\r\n\tsetRadii(x, y, z) {\r\n\r\n\t\tthis.r0.set(x, y, z);\r\n\r\n\t\treturn this.precompute();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Precomputes corner rounding factors.\r\n\t *\r\n\t * @private\r\n\t * @return {SuperPrimitive} This instance.\r\n\t */\r\n\r\n\tprecompute() {\r\n\r\n\t\tconst s = this.s.copy(this.s0);\r\n\t\tconst r = this.r.copy(this.r0);\r\n\t\tconst ba = this.ba;\r\n\r\n\t\ts.x -= r.x;\r\n\t\ts.y -= r.x;\r\n\r\n\t\tr.x -= s.w;\r\n\t\ts.w -= r.y;\r\n\r\n\t\ts.z -= r.y;\r\n\r\n\t\tthis.offset = -2.0 * s.z;\r\n\r\n\t\tba.set(r.z, this.offset);\r\n\t\tconst divisor = ba.dot(ba);\r\n\r\n\t\tif(divisor === 0.0) {\r\n\r\n\t\t\t// Y must not be 0 to prevent bad values for Z = 0 in the last term (*).\r\n\t\t\tba.set(0.0, -1.0);\r\n\r\n\t\t} else {\r\n\r\n\t\t\tba.divideScalar(divisor);\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the bounding box of this SDF.\r\n\t *\r\n\t * @return {Box3} The bounding box.\r\n\t */\r\n\r\n\tcomputeBoundingBox() {\r\n\r\n\t\tconst s = this.s0;\r\n\t\tconst boundingBox = new Box3();\r\n\r\n\t\tboundingBox.min.x = Math.min(-s.x, -1.0);\r\n\t\tboundingBox.min.y = Math.min(-s.y, -1.0);\r\n\t\tboundingBox.min.z = Math.min(-s.z, -1.0);\r\n\r\n\t\tboundingBox.max.x = Math.max(s.x, 1.0);\r\n\t\tboundingBox.max.y = Math.max(s.y, 1.0);\r\n\t\tboundingBox.max.z = Math.max(s.z, 1.0);\r\n\r\n\t\tboundingBox.applyMatrix4(this.getTransformation());\r\n\r\n\t\treturn boundingBox;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Samples the volume's density at the given point in space.\r\n\t *\r\n\t * @param {Vector3} position - A position.\r\n\t * @return {Number} The euclidean distance to the surface.\r\n\t */\r\n\r\n\tsample(position) {\r\n\r\n\t\tposition.applyMatrix4(this.inverseTransformation);\r\n\r\n\t\tconst s = this.s;\r\n\t\tconst r = this.r;\r\n\t\tconst ba = this.ba;\r\n\r\n\t\tconst dx = Math.abs(position.x) - s.x;\r\n\t\tconst dy = Math.abs(position.y) - s.y;\r\n\t\tconst dz = Math.abs(position.z) - s.z;\r\n\r\n\t\tconst mx0 = Math.max(dx, 0.0);\r\n\t\tconst my0 = Math.max(dy, 0.0);\r\n\t\tconst l0 = Math.sqrt(mx0 * mx0 + my0 * my0);\r\n\r\n\t\tconst p = position.z - s.z;\r\n\t\tconst q = Math.abs(l0 + Math.min(0.0, Math.max(dx, dy)) - r.x) - s.w;\r\n\r\n\t\tconst c = Math.min(Math.max(q * ba.x + p * ba.y, 0.0), 1.0);\r\n\t\tconst diagX = q - r.z * c;\r\n\t\tconst diagY = p - this.offset * c;\r\n\r\n\t\tconst hx0 = Math.max(q - r.z, 0.0);\r\n\t\tconst hy0 = position.z + s.z;\r\n\t\tconst hx1 = Math.max(q, 0.0);\r\n\t\t// hy1 = p;\r\n\r\n\t\tconst diagSq = diagX * diagX + diagY * diagY;\r\n\t\tconst h0Sq = hx0 * hx0 + hy0 * hy0;\r\n\t\tconst h1Sq = hx1 * hx1 + p * p;\r\n\t\tconst paBa = q * -ba.y + p * ba.x;\r\n\r\n\t\tconst l1 = Math.sqrt(Math.min(diagSq, Math.min(h0Sq, h1Sq)));\r\n\r\n\t\t// (*) paBa must not be 0: if dz is also 0, the result will be wrong.\r\n\t\treturn l1 * Math.sign(Math.max(paBa, dz)) - r.y;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Serialises this SDF.\r\n\t *\r\n\t * @param {Boolean} [deflate=false] - Whether the data should be compressed if possible.\r\n\t * @return {Object} The serialised data.\r\n\t */\r\n\r\n\tserialize(deflate = false) {\r\n\r\n\t\tconst result = super.serialize();\r\n\r\n\t\tresult.parameters = {\r\n\t\t\ts: this.s0.toArray(),\r\n\t\t\tr: this.r0.toArray()\r\n\t\t};\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new primitive using the specified preset.\r\n\t *\r\n\t * @param {SuperPrimitivePreset} preset - The super primitive preset.\r\n\t */\r\n\r\n\tstatic create(preset) {\r\n\r\n\t\tconst parameters = superPrimitivePresets[preset];\r\n\r\n\t\treturn new SuperPrimitive({\r\n\t\t\ts: parameters[0],\r\n\t\t\tr: parameters[1]\r\n\t\t});\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A list of parameter presets.\r\n *\r\n * @type {Array<Float32Array[]>}\r\n * @private\r\n */\r\n\r\nconst superPrimitivePresets = [\r\n\r\n\t// Cube.\r\n\t[\r\n\t\tnew Float32Array([1.0, 1.0, 1.0, 1.0]),\r\n\t\tnew Float32Array([0.0, 0.0, 0.0])\r\n\t],\r\n\r\n\t// Cylinder.\r\n\t[\r\n\t\tnew Float32Array([1.0, 1.0, 1.0, 1.0]),\r\n\t\tnew Float32Array([1.0, 0.0, 0.0])\r\n\t],\r\n\r\n\t// Cone.\r\n\t[\r\n\t\tnew Float32Array([0.0, 0.0, 1.0, 1.0]),\r\n\t\tnew Float32Array([0.0, 0.0, 1.0])\r\n\t],\r\n\r\n\t// Pill.\r\n\t[\r\n\t\tnew Float32Array([1.0, 1.0, 2.0, 1.0]),\r\n\t\tnew Float32Array([1.0, 1.0, 0.0])\r\n\t],\r\n\r\n\t// Sphere.\r\n\t[\r\n\t\tnew Float32Array([1.0, 1.0, 1.0, 1.0]),\r\n\t\tnew Float32Array([1.0, 1.0, 0.0])\r\n\t],\r\n\r\n\t// Pellet.\r\n\t[\r\n\t\tnew Float32Array([1.0, 1.0, 0.25, 1.0]),\r\n\t\tnew Float32Array([1.0, 0.25, 0.0])\r\n\t],\r\n\r\n\t// Torus.\r\n\t[\r\n\t\tnew Float32Array([1.0, 1.0, 0.25, 0.25]),\r\n\t\tnew Float32Array([1.0, 0.25, 0.0])\r\n\t],\r\n\r\n\t// Pipe.\r\n\t[\r\n\t\tnew Float32Array([1.0, 1.0, 1.0, 0.25]),\r\n\t\tnew Float32Array([1.0, 0.1, 0.0])\r\n\t],\r\n\r\n\t// Corridor.\r\n\t[\r\n\t\tnew Float32Array([1.0, 1.0, 1.0, 0.25]),\r\n\t\tnew Float32Array([0.1, 0.1, 0.0])\r\n\t]\r\n\r\n];\r\n\r\n/**\r\n * An enumeration of super primitive presets.\r\n *\r\n * @type {Object}\r\n * @property {Number} CUBE - A cube.\r\n * @property {Number} CYLINDER - A cylinder.\r\n * @property {Number} CONE - A cone.\r\n * @property {Number} PILL - A pill.\r\n * @property {Number} SPHERE - A sphere.\r\n * @property {Number} PELLET - A pellet.\r\n * @property {Number} TORUS - A torus.\r\n * @property {Number} PIPE - A pipe.\r\n * @property {Number} CORRIDOR - A corridor.\r\n */\r\n\r\nexport const SuperPrimitivePreset = {\r\n\r\n\tCUBE: 0,\r\n\tCYLINDER: 1,\r\n\tCONE: 2,\r\n\tPILL: 3,\r\n\tSPHERE: 4,\r\n\tPELLET: 5,\r\n\tTORUS: 6,\r\n\tPIPE: 7,\r\n\tCORRIDOR: 8\r\n\r\n};\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/sdf/SuperPrimitive.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 705,
    "kind": "class",
    "name": "SuperPrimitive",
    "memberof": "src/volume/sdf/SuperPrimitive.js",
    "static": true,
    "longname": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/volume/sdf/SuperPrimitive.js",
    "importStyle": "{SuperPrimitive}",
    "description": "The super primitive.\n\nA function that is able to represent a wide range of conic/rectangular-radial\nprimitives of genus 0 and 1: (round) box, sphere, cylinder, capped cone,\ntorus, capsule, pellet, pipe, etc.\n\nReference:\n https://www.shadertoy.com/view/MsVGWG",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "src/volume/sdf/SignedDistanceFunction.js~SignedDistanceFunction"
    ]
  },
  {
    "__docId__": 706,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive#constructor",
    "access": "public",
    "description": "Constructs a new super primitive.\n\nSee {@link SuperPrimitivePreset} for a list of default configurations.",
    "examples": [
      "const cube = SuperPrimitive.create(SuperPrimitivePreset.CUBE);"
    ],
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters",
        "description": "The parameters."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters.s",
        "description": "The size and genus weight [x, y, z, w]."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "parameters.r",
        "description": "The corner radii [x, y, z]."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "material",
        "description": "A material index."
      }
    ]
  },
  {
    "__docId__": 707,
    "kind": "member",
    "name": "s0",
    "memberof": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive",
    "static": false,
    "longname": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive#s0",
    "access": "private",
    "description": "The base size. The W-component affects the genus of the primitive.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Vector4"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 708,
    "kind": "member",
    "name": "r0",
    "memberof": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive",
    "static": false,
    "longname": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive#r0",
    "access": "private",
    "description": "The base corner radii.",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 709,
    "kind": "member",
    "name": "s",
    "memberof": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive",
    "static": false,
    "longname": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive#s",
    "access": "private",
    "description": "The size, adjusted for further calculations.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "Vector4"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 710,
    "kind": "member",
    "name": "r",
    "memberof": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive",
    "static": false,
    "longname": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive#r",
    "access": "private",
    "description": "The corner radii, adjusted for further calculations.",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 711,
    "kind": "member",
    "name": "ba",
    "memberof": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive",
    "static": false,
    "longname": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive#ba",
    "access": "private",
    "description": "Precomputed corner rounding constants.",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "Vector2"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 712,
    "kind": "member",
    "name": "offset",
    "memberof": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive",
    "static": false,
    "longname": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive#offset",
    "access": "private",
    "description": "The bottom radius offset.",
    "lineNumber": 86,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 713,
    "kind": "method",
    "name": "setSize",
    "memberof": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive#setSize",
    "access": "public",
    "description": "Sets the size and genus weight.",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "Z."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "w",
        "description": "W."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SuperPrimitive"
      ],
      "spread": false,
      "description": "This instance."
    }
  },
  {
    "__docId__": 714,
    "kind": "method",
    "name": "setRadii",
    "memberof": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive#setRadii",
    "access": "public",
    "description": "Sets the corner radii.",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "Z."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SuperPrimitive"
      ],
      "spread": false,
      "description": "This instance."
    }
  },
  {
    "__docId__": 715,
    "kind": "method",
    "name": "precompute",
    "memberof": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive#precompute",
    "access": "private",
    "description": "Precomputes corner rounding factors.",
    "lineNumber": 135,
    "return": {
      "nullable": null,
      "types": [
        "SuperPrimitive"
      ],
      "spread": false,
      "description": "This instance."
    },
    "params": []
  },
  {
    "__docId__": 717,
    "kind": "method",
    "name": "computeBoundingBox",
    "memberof": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive#computeBoundingBox",
    "access": "public",
    "description": "Calculates the bounding box of this SDF.",
    "lineNumber": 175,
    "return": {
      "nullable": null,
      "types": [
        "Box3"
      ],
      "spread": false,
      "description": "The bounding box."
    },
    "params": []
  },
  {
    "__docId__": 718,
    "kind": "method",
    "name": "sample",
    "memberof": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive#sample",
    "access": "public",
    "description": "Samples the volume's density at the given point in space.",
    "lineNumber": 201,
    "params": [
      {
        "nullable": null,
        "types": [
          "Vector3"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "A position."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The euclidean distance to the surface."
    }
  },
  {
    "__docId__": 719,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive#serialize",
    "access": "public",
    "description": "Serialises this SDF.",
    "lineNumber": 248,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "deflate",
        "description": "Whether the data should be compressed if possible."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The serialised data."
    }
  },
  {
    "__docId__": 720,
    "kind": "method",
    "name": "create",
    "memberof": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/volume/sdf/SuperPrimitive.js~SuperPrimitive.create",
    "access": "public",
    "description": "Creates a new primitive using the specified preset.",
    "lineNumber": 267,
    "params": [
      {
        "nullable": null,
        "types": [
          "SuperPrimitivePreset"
        ],
        "spread": false,
        "optional": false,
        "name": "preset",
        "description": "The super primitive preset."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 721,
    "kind": "variable",
    "name": "superPrimitivePresets",
    "memberof": "src/volume/sdf/SuperPrimitive.js",
    "static": true,
    "longname": "src/volume/sdf/SuperPrimitive.js~superPrimitivePresets",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/volume/sdf/SuperPrimitive.js",
    "importStyle": null,
    "description": "A list of parameter presets.",
    "lineNumber": 287,
    "type": {
      "nullable": null,
      "types": [
        "Array<Float32Array[]>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 722,
    "kind": "variable",
    "name": "SuperPrimitivePreset",
    "memberof": "src/volume/sdf/SuperPrimitive.js",
    "static": true,
    "longname": "src/volume/sdf/SuperPrimitive.js~SuperPrimitivePreset",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/volume/sdf/SuperPrimitive.js",
    "importStyle": "{SuperPrimitivePreset}",
    "description": "An enumeration of super primitive presets.",
    "lineNumber": 360,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "CUBE",
        "description": "A cube."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "CYLINDER",
        "description": "A cylinder."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "CONE",
        "description": "A cone."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "PILL",
        "description": "A pill."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "SPHERE",
        "description": "A sphere."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "PELLET",
        "description": "A pellet."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "TORUS",
        "description": "A torus."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "PIPE",
        "description": "A pipe."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "CORRIDOR",
        "description": "A corridor."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 723,
    "kind": "file",
    "name": "src/volume/Voxel.js",
    "content": "import { Vector3 } from \"math-ds\";\r\n\r\n/**\r\n * A cubic voxel that holds information about the surface of a volume.\r\n */\r\n\r\nexport class Voxel {\r\n\r\n\t/**\r\n\t * Constructs a new voxel.\r\n\t */\r\n\r\n\tconstructor() {\r\n\r\n\t\t/**\r\n\t\t * Holds binary material information about all eight corners of this voxel.\r\n\t\t *\r\n\t\t * A value of 0 means that this voxel is completely outside of the volume,\r\n\t\t * whereas a value of 255 means that it's fully inside of it. Any other\r\n\t\t * value indicates a material change which implies that the voxel contains\r\n\t\t * the surface.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.materials = 0;\r\n\r\n\t\t/**\r\n\t\t * The amount of edges that exhibit a material change in this voxel.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.edgeCount = 0;\r\n\r\n\t\t/**\r\n\t\t * A generated index for this voxel's vertex. Used during the construction\r\n\t\t * of the final polygons.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.index = -1;\r\n\r\n\t\t/**\r\n\t\t * The vertex that lies inside this voxel.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\r\n\t\tthis.position = new Vector3();\r\n\r\n\t\t/**\r\n\t\t * The normal of the vertex that lies inside this voxel.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\r\n\t\tthis.normal = new Vector3();\r\n\r\n\t\t/**\r\n\t\t * A QEF data construct. Used to calculate the vertex position.\r\n\t\t *\r\n\t\t * @type {QEFData}\r\n\t\t */\r\n\r\n\t\tthis.qefData = null;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/volume/Voxel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 724,
    "kind": "class",
    "name": "Voxel",
    "memberof": "src/volume/Voxel.js",
    "static": true,
    "longname": "src/volume/Voxel.js~Voxel",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/volume/Voxel.js",
    "importStyle": "{Voxel}",
    "description": "A cubic voxel that holds information about the surface of a volume.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 725,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/volume/Voxel.js~Voxel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/volume/Voxel.js~Voxel#constructor",
    "access": "public",
    "description": "Constructs a new voxel.",
    "lineNumber": 13
  },
  {
    "__docId__": 726,
    "kind": "member",
    "name": "materials",
    "memberof": "src/volume/Voxel.js~Voxel",
    "static": false,
    "longname": "src/volume/Voxel.js~Voxel#materials",
    "access": "public",
    "description": "Holds binary material information about all eight corners of this voxel.\n\nA value of 0 means that this voxel is completely outside of the volume,\nwhereas a value of 255 means that it's fully inside of it. Any other\nvalue indicates a material change which implies that the voxel contains\nthe surface.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 727,
    "kind": "member",
    "name": "edgeCount",
    "memberof": "src/volume/Voxel.js~Voxel",
    "static": false,
    "longname": "src/volume/Voxel.js~Voxel#edgeCount",
    "access": "public",
    "description": "The amount of edges that exhibit a material change in this voxel.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 728,
    "kind": "member",
    "name": "index",
    "memberof": "src/volume/Voxel.js~Voxel",
    "static": false,
    "longname": "src/volume/Voxel.js~Voxel#index",
    "access": "public",
    "description": "A generated index for this voxel's vertex. Used during the construction\nof the final polygons.",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 729,
    "kind": "member",
    "name": "position",
    "memberof": "src/volume/Voxel.js~Voxel",
    "static": false,
    "longname": "src/volume/Voxel.js~Voxel#position",
    "access": "public",
    "description": "The vertex that lies inside this voxel.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 730,
    "kind": "member",
    "name": "normal",
    "memberof": "src/volume/Voxel.js~Voxel",
    "static": false,
    "longname": "src/volume/Voxel.js~Voxel#normal",
    "access": "public",
    "description": "The normal of the vertex that lies inside this voxel.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "Vector3"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 731,
    "kind": "member",
    "name": "qefData",
    "memberof": "src/volume/Voxel.js~Voxel",
    "static": false,
    "longname": "src/volume/Voxel.js~Voxel#qefData",
    "access": "public",
    "description": "A QEF data construct. Used to calculate the vertex position.",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "QEFData"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 732,
    "kind": "file",
    "name": "src/worker/Action.js",
    "content": "/**\r\n * An enumeration of worker actions.\r\n *\r\n * @type {Object}\r\n * @property {String} EXTRACT - Isosurface extraction signal.\r\n * @property {String} MODIFY - Data modification signal.\r\n * @property {String} CONFIGURE - General configuration signal.\r\n * @property {String} CLOSE - Thread termination signal.\r\n */\r\n\r\nexport const Action = {\r\n\r\n\tEXTRACT: \"worker.extract\",\r\n\tMODIFY: \"worker.modify\",\r\n\tCONFIGURE: \"worker.config\",\r\n\tCLOSE: \"worker.close\"\r\n\r\n};\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/worker/Action.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 733,
    "kind": "variable",
    "name": "Action",
    "memberof": "src/worker/Action.js",
    "static": true,
    "longname": "src/worker/Action.js~Action",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/worker/Action.js",
    "importStyle": "{Action}",
    "description": "An enumeration of worker actions.",
    "lineNumber": 11,
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "EXTRACT",
        "description": "Isosurface extraction signal."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "MODIFY",
        "description": "Data modification signal."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "CONFIGURE",
        "description": "General configuration signal."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "CLOSE",
        "description": "Thread termination signal."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 734,
    "kind": "file",
    "name": "src/worker/DataProcessor.js",
    "content": "import { HermiteData } from \"../volume/HermiteData.js\";\r\n\r\n/**\r\n * An empty set of Hermite data.\r\n *\r\n * @type {HermiteData}\r\n * @private\r\n * @final\r\n */\r\n\r\nconst data = new HermiteData(false);\r\n\r\n/**\r\n * A volume data processor.\r\n *\r\n * @implements {TransferableContainer}\r\n */\r\n\r\nexport class DataProcessor {\r\n\r\n\t/**\r\n\t * Constructs a new data processor.\r\n\t */\r\n\r\n\tconstructor() {\r\n\r\n\t\t/**\r\n\t\t * A set of Hermite data that will be used during processing.\r\n\t\t *\r\n\t\t * @type {HermiteData}\r\n\t\t * @protected\r\n\t\t */\r\n\r\n\t\tthis.data = null;\r\n\r\n\t\t/**\r\n\t\t * A container for the data that will be returned to the main thread.\r\n\t\t *\r\n\t\t * @type {DataMessage}\r\n\t\t * @protected\r\n\t\t */\r\n\r\n\t\tthis.response = null;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the data of this processor.\r\n\t *\r\n\t * @return {HermiteData} The data.\r\n\t */\r\n\r\n\tgetData() {\r\n\r\n\t\treturn this.data;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares a response that can be send back to the main thread.\r\n\t *\r\n\t * Should be used together with {@link DataProcessor#createTransferList}.\r\n\t *\r\n\t * @return {DataMessage} A response.\r\n\t */\r\n\r\n\trespond() {\r\n\r\n\t\tthis.response.data = this.data.serialize();\r\n\r\n\t\treturn this.response;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a list of transferable items.\r\n\t *\r\n\t * @param {Array} [transferList] - An optional target list. The transferable items will be added to this list.\r\n\t * @return {Transferable[]} The transfer list.\r\n\t */\r\n\r\n\tcreateTransferList(transferList = []) {\r\n\r\n\t\tif(this.data !== null) {\r\n\r\n\t\t\tthis.data.createTransferList(transferList);\r\n\r\n\t\t}\r\n\r\n\t\treturn transferList;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the given request.\r\n\t *\r\n\t * @param {DataMessage} request - A request.\r\n\t * @return {DataProcessor} This processor.\r\n\t */\r\n\r\n\tprocess(request) {\r\n\r\n\t\tthis.data = data.deserialize(request.data);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/worker/DataProcessor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 735,
    "kind": "variable",
    "name": "data",
    "memberof": "src/worker/DataProcessor.js",
    "static": true,
    "longname": "src/worker/DataProcessor.js~data",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/worker/DataProcessor.js",
    "importStyle": null,
    "description": "An empty set of Hermite data.",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "HermiteData"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 736,
    "kind": "class",
    "name": "DataProcessor",
    "memberof": "src/worker/DataProcessor.js",
    "static": true,
    "longname": "src/worker/DataProcessor.js~DataProcessor",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/worker/DataProcessor.js",
    "importStyle": "{DataProcessor}",
    "description": "A volume data processor.",
    "lineNumber": 19,
    "interface": false,
    "implements": [
      "TransferableContainer"
    ]
  },
  {
    "__docId__": 737,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/worker/DataProcessor.js~DataProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/DataProcessor.js~DataProcessor#constructor",
    "access": "public",
    "description": "Constructs a new data processor.",
    "lineNumber": 25
  },
  {
    "__docId__": 738,
    "kind": "member",
    "name": "data",
    "memberof": "src/worker/DataProcessor.js~DataProcessor",
    "static": false,
    "longname": "src/worker/DataProcessor.js~DataProcessor#data",
    "access": "protected",
    "description": "A set of Hermite data that will be used during processing.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "HermiteData"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 739,
    "kind": "member",
    "name": "response",
    "memberof": "src/worker/DataProcessor.js~DataProcessor",
    "static": false,
    "longname": "src/worker/DataProcessor.js~DataProcessor#response",
    "access": "protected",
    "description": "A container for the data that will be returned to the main thread.",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "DataMessage"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 740,
    "kind": "method",
    "name": "getData",
    "memberof": "src/worker/DataProcessor.js~DataProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/DataProcessor.js~DataProcessor#getData",
    "access": "public",
    "description": "Returns the data of this processor.",
    "lineNumber": 53,
    "return": {
      "nullable": null,
      "types": [
        "HermiteData"
      ],
      "spread": false,
      "description": "The data."
    },
    "params": []
  },
  {
    "__docId__": 741,
    "kind": "method",
    "name": "respond",
    "memberof": "src/worker/DataProcessor.js~DataProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/DataProcessor.js~DataProcessor#respond",
    "access": "public",
    "description": "Prepares a response that can be send back to the main thread.\n\nShould be used together with {@link DataProcessor#createTransferList}.",
    "lineNumber": 67,
    "return": {
      "nullable": null,
      "types": [
        "DataMessage"
      ],
      "spread": false,
      "description": "A response."
    },
    "params": []
  },
  {
    "__docId__": 742,
    "kind": "method",
    "name": "createTransferList",
    "memberof": "src/worker/DataProcessor.js~DataProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/DataProcessor.js~DataProcessor#createTransferList",
    "access": "public",
    "description": "Creates a list of transferable items.",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "transferList",
        "description": "An optional target list. The transferable items will be added to this list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transferable[]"
      ],
      "spread": false,
      "description": "The transfer list."
    }
  },
  {
    "__docId__": 743,
    "kind": "method",
    "name": "process",
    "memberof": "src/worker/DataProcessor.js~DataProcessor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/DataProcessor.js~DataProcessor#process",
    "access": "public",
    "description": "Processes the given request.",
    "lineNumber": 101,
    "params": [
      {
        "nullable": null,
        "types": [
          "DataMessage"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "A request."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DataProcessor"
      ],
      "spread": false,
      "description": "This processor."
    }
  },
  {
    "__docId__": 745,
    "kind": "file",
    "name": "src/worker/index.js",
    "content": "/**\r\n * Multithreading components.\r\n *\r\n * @module rabbit-hole/worker\r\n */\r\n\r\nexport {\r\n\tConfigurationMessage,\r\n\tDataMessage,\r\n\tMessage,\r\n\tExtractionRequest,\r\n\tExtractionResponse,\r\n\tModificationRequest,\r\n\tModificationResponse\r\n} from \"./messages\";\r\n\r\nexport { Action } from \"./Action.js\";\r\nexport { DataProcessor } from \"./DataProcessor.js\";\r\nexport { SurfaceExtractor } from \"./SurfaceExtractor.js\";\r\nexport { ThreadPool } from \"./ThreadPool.js\";\r\nexport { VolumeModifier } from \"./VolumeModifier.js\";\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/worker/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 746,
    "kind": "file",
    "name": "src/worker/messages/ConfigurationMessage.js",
    "content": "import { HermiteData } from \"../../volume/HermiteData.js\";\r\nimport { Action } from \"../Action.js\";\r\nimport { Message } from \"./Message.js\";\r\n\r\n/**\r\n * A configuration message.\r\n */\r\n\r\nexport class ConfigurationMessage extends Message {\r\n\r\n\t/**\r\n\t * Constructs a new configuration message.\r\n\t */\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper(Action.CONFIGURE);\r\n\r\n\t\t/**\r\n\t\t * The global grid resolution of the Hermite data chunks.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.resolution = HermiteData.resolution;\r\n\r\n\t\t/**\r\n\t\t * An error threshold for QEF-based mesh simplification.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.errorThreshold = 1e-2;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/worker/messages/ConfigurationMessage.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 747,
    "kind": "class",
    "name": "ConfigurationMessage",
    "memberof": "src/worker/messages/ConfigurationMessage.js",
    "static": true,
    "longname": "src/worker/messages/ConfigurationMessage.js~ConfigurationMessage",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/worker/messages/ConfigurationMessage.js",
    "importStyle": "{ConfigurationMessage}",
    "description": "A configuration message.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "src/worker/messages/Message.js~Message"
    ]
  },
  {
    "__docId__": 748,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/worker/messages/ConfigurationMessage.js~ConfigurationMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/messages/ConfigurationMessage.js~ConfigurationMessage#constructor",
    "access": "public",
    "description": "Constructs a new configuration message.",
    "lineNumber": 15
  },
  {
    "__docId__": 749,
    "kind": "member",
    "name": "resolution",
    "memberof": "src/worker/messages/ConfigurationMessage.js~ConfigurationMessage",
    "static": false,
    "longname": "src/worker/messages/ConfigurationMessage.js~ConfigurationMessage#resolution",
    "access": "public",
    "description": "The global grid resolution of the Hermite data chunks.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 750,
    "kind": "member",
    "name": "errorThreshold",
    "memberof": "src/worker/messages/ConfigurationMessage.js~ConfigurationMessage",
    "static": false,
    "longname": "src/worker/messages/ConfigurationMessage.js~ConfigurationMessage#errorThreshold",
    "access": "public",
    "description": "An error threshold for QEF-based mesh simplification.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 751,
    "kind": "file",
    "name": "src/worker/messages/DataMessage.js",
    "content": "import { Message } from \"./Message.js\";\r\n\r\n/**\r\n * A worker message that contains transferable data.\r\n */\r\n\r\nexport class DataMessage extends Message {\r\n\r\n\t/**\r\n\t * Constructs a new data message.\r\n\t *\r\n\t * @param {Action} [action=null] - A worker action.\r\n\t */\r\n\r\n\tconstructor(action = null) {\r\n\r\n\t\tsuper(action);\r\n\r\n\t\t/**\r\n\t\t * A serialised data container.\r\n\t\t *\r\n\t\t * @type {Object}\r\n\t\t */\r\n\r\n\t\tthis.data = null;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/worker/messages/DataMessage.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 752,
    "kind": "class",
    "name": "DataMessage",
    "memberof": "src/worker/messages/DataMessage.js",
    "static": true,
    "longname": "src/worker/messages/DataMessage.js~DataMessage",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/worker/messages/DataMessage.js",
    "importStyle": "{DataMessage}",
    "description": "A worker message that contains transferable data.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/worker/messages/Message.js~Message"
    ]
  },
  {
    "__docId__": 753,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/worker/messages/DataMessage.js~DataMessage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/messages/DataMessage.js~DataMessage#constructor",
    "access": "public",
    "description": "Constructs a new data message.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Action"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "action",
        "description": "A worker action."
      }
    ]
  },
  {
    "__docId__": 754,
    "kind": "member",
    "name": "data",
    "memberof": "src/worker/messages/DataMessage.js~DataMessage",
    "static": false,
    "longname": "src/worker/messages/DataMessage.js~DataMessage#data",
    "access": "public",
    "description": "A serialised data container.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 755,
    "kind": "file",
    "name": "src/worker/messages/ExtractionRequest.js",
    "content": "import { Action } from \"../Action.js\";\r\nimport { DataMessage } from \"./DataMessage.js\";\r\n\r\n/**\r\n * An extraction request.\r\n */\r\n\r\nexport class ExtractionRequest extends DataMessage {\r\n\r\n\t/**\r\n\t * Constructs a new extraction request.\r\n\t */\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper(Action.EXTRACT);\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/worker/messages/ExtractionRequest.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 756,
    "kind": "class",
    "name": "ExtractionRequest",
    "memberof": "src/worker/messages/ExtractionRequest.js",
    "static": true,
    "longname": "src/worker/messages/ExtractionRequest.js~ExtractionRequest",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/worker/messages/ExtractionRequest.js",
    "importStyle": "{ExtractionRequest}",
    "description": "An extraction request.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/worker/messages/DataMessage.js~DataMessage"
    ]
  },
  {
    "__docId__": 757,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/worker/messages/ExtractionRequest.js~ExtractionRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/messages/ExtractionRequest.js~ExtractionRequest#constructor",
    "access": "public",
    "description": "Constructs a new extraction request.",
    "lineNumber": 14
  },
  {
    "__docId__": 758,
    "kind": "file",
    "name": "src/worker/messages/ExtractionResponse.js",
    "content": "import { Action } from \"../Action.js\";\r\nimport { DataMessage } from \"./DataMessage.js\";\r\n\r\n/**\r\n * An extraction response.\r\n */\r\n\r\nexport class ExtractionResponse extends DataMessage {\r\n\r\n\t/**\r\n\t * Constructs a new extraction response.\r\n\t */\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper(Action.EXTRACT);\r\n\r\n\t\t/**\r\n\t\t * A serialised isosurface.\r\n\t\t *\r\n\t\t * @type {Object}\r\n\t\t */\r\n\r\n\t\tthis.isosurface = null;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/worker/messages/ExtractionResponse.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 759,
    "kind": "class",
    "name": "ExtractionResponse",
    "memberof": "src/worker/messages/ExtractionResponse.js",
    "static": true,
    "longname": "src/worker/messages/ExtractionResponse.js~ExtractionResponse",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/worker/messages/ExtractionResponse.js",
    "importStyle": "{ExtractionResponse}",
    "description": "An extraction response.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/worker/messages/DataMessage.js~DataMessage"
    ]
  },
  {
    "__docId__": 760,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/worker/messages/ExtractionResponse.js~ExtractionResponse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/messages/ExtractionResponse.js~ExtractionResponse#constructor",
    "access": "public",
    "description": "Constructs a new extraction response.",
    "lineNumber": 14
  },
  {
    "__docId__": 761,
    "kind": "member",
    "name": "isosurface",
    "memberof": "src/worker/messages/ExtractionResponse.js~ExtractionResponse",
    "static": false,
    "longname": "src/worker/messages/ExtractionResponse.js~ExtractionResponse#isosurface",
    "access": "public",
    "description": "A serialised isosurface.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 762,
    "kind": "file",
    "name": "src/worker/messages/index.js",
    "content": "/**\r\n * A collection of worker messages.\r\n *\r\n * @module rabbit-hole/worker/messages\r\n */\r\n\r\nexport { ConfigurationMessage } from \"./ConfigurationMessage.js\";\r\nexport { DataMessage } from \"./DataMessage.js\";\r\nexport { Message } from \"./Message.js\";\r\n\r\nexport { ExtractionRequest } from \"./ExtractionRequest.js\";\r\nexport { ExtractionResponse } from \"./ExtractionResponse.js\";\r\nexport { ModificationRequest } from \"./ModificationRequest.js\";\r\nexport { ModificationResponse } from \"./ModificationResponse.js\";\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/worker/messages/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 763,
    "kind": "file",
    "name": "src/worker/messages/Message.js",
    "content": "/**\r\n * A message.\r\n *\r\n * Messages are exchanged between different execution contexts such as a worker\r\n * and the main thread.\r\n */\r\n\r\nexport class Message {\r\n\r\n\t/**\r\n\t * Constructs a new message.\r\n\t *\r\n\t * @param {Action} [action=null] - A worker action.\r\n\t */\r\n\r\n\tconstructor(action = null) {\r\n\r\n\t\t/**\r\n\t\t * A worker action.\r\n\t\t *\r\n\t\t * When a message is sent to another execution context, it will be copied\r\n\t\t * using the Structured Clone algorithm. This automatic process turns the\r\n\t\t * message into a plain object. The explicit action flag serves as a\r\n\t\t * reliable identifier.\r\n\t\t *\r\n\t\t * @type {Action}\r\n\t\t */\r\n\r\n\t\tthis.action = action;\r\n\r\n\t\t/**\r\n\t\t * An error.\r\n\t\t *\r\n\t\t * If this is not null, something went wrong.\r\n\t\t *\r\n\t\t * @type {ErrorEvent}\r\n\t\t */\r\n\r\n\t\tthis.error = null;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/worker/messages/Message.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 764,
    "kind": "class",
    "name": "Message",
    "memberof": "src/worker/messages/Message.js",
    "static": true,
    "longname": "src/worker/messages/Message.js~Message",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/worker/messages/Message.js",
    "importStyle": "{Message}",
    "description": "A message.\n\nMessages are exchanged between different execution contexts such as a worker\nand the main thread.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 765,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/worker/messages/Message.js~Message",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/messages/Message.js~Message#constructor",
    "access": "public",
    "description": "Constructs a new message.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Action"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "action",
        "description": "A worker action."
      }
    ]
  },
  {
    "__docId__": 766,
    "kind": "member",
    "name": "action",
    "memberof": "src/worker/messages/Message.js~Message",
    "static": false,
    "longname": "src/worker/messages/Message.js~Message#action",
    "access": "public",
    "description": "A worker action.\n\nWhen a message is sent to another execution context, it will be copied\nusing the Structured Clone algorithm. This automatic process turns the\nmessage into a plain object. The explicit action flag serves as a\nreliable identifier.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "Action"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 767,
    "kind": "member",
    "name": "error",
    "memberof": "src/worker/messages/Message.js~Message",
    "static": false,
    "longname": "src/worker/messages/Message.js~Message#error",
    "access": "public",
    "description": "An error.\n\nIf this is not null, something went wrong.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "ErrorEvent"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 768,
    "kind": "file",
    "name": "src/worker/messages/ModificationRequest.js",
    "content": "import { Action } from \"../Action.js\";\r\nimport { DataMessage } from \"./DataMessage.js\";\r\n\r\n/**\r\n * A modification request.\r\n */\r\n\r\nexport class ModificationRequest extends DataMessage {\r\n\r\n\t/**\r\n\t * Constructs a new modification request.\r\n\t */\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper(Action.MODIFY);\r\n\r\n\t\t/**\r\n\t\t * A serialised SDF.\r\n\t\t *\r\n\t\t * @type {Object}\r\n\t\t */\r\n\r\n\t\tthis.sdf = null;\r\n\r\n\t\t/**\r\n\t\t * The world size of the volume data cell.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.cellSize = 0;\r\n\r\n\t\t/**\r\n\t\t * The world positions of the volume data cell.\r\n\t\t *\r\n\t\t * Together with the world size, this base position describes the region of\r\n\t\t * the volume data cell in world space.\r\n\t\t *\r\n\t\t * @type {Number[]}\r\n\t\t */\r\n\r\n\t\tthis.cellPosition = null;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/worker/messages/ModificationRequest.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 769,
    "kind": "class",
    "name": "ModificationRequest",
    "memberof": "src/worker/messages/ModificationRequest.js",
    "static": true,
    "longname": "src/worker/messages/ModificationRequest.js~ModificationRequest",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/worker/messages/ModificationRequest.js",
    "importStyle": "{ModificationRequest}",
    "description": "A modification request.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/worker/messages/DataMessage.js~DataMessage"
    ]
  },
  {
    "__docId__": 770,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/worker/messages/ModificationRequest.js~ModificationRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/messages/ModificationRequest.js~ModificationRequest#constructor",
    "access": "public",
    "description": "Constructs a new modification request.",
    "lineNumber": 14
  },
  {
    "__docId__": 771,
    "kind": "member",
    "name": "sdf",
    "memberof": "src/worker/messages/ModificationRequest.js~ModificationRequest",
    "static": false,
    "longname": "src/worker/messages/ModificationRequest.js~ModificationRequest#sdf",
    "access": "public",
    "description": "A serialised SDF.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 772,
    "kind": "member",
    "name": "cellSize",
    "memberof": "src/worker/messages/ModificationRequest.js~ModificationRequest",
    "static": false,
    "longname": "src/worker/messages/ModificationRequest.js~ModificationRequest#cellSize",
    "access": "public",
    "description": "The world size of the volume data cell.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 773,
    "kind": "member",
    "name": "cellPosition",
    "memberof": "src/worker/messages/ModificationRequest.js~ModificationRequest",
    "static": false,
    "longname": "src/worker/messages/ModificationRequest.js~ModificationRequest#cellPosition",
    "access": "public",
    "description": "The world positions of the volume data cell.\n\nTogether with the world size, this base position describes the region of\nthe volume data cell in world space.",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Number[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 774,
    "kind": "file",
    "name": "src/worker/messages/ModificationResponse.js",
    "content": "import { Action } from \"../Action.js\";\r\nimport { DataMessage } from \"./DataMessage.js\";\r\n\r\n/**\r\n * A modification response.\r\n */\r\n\r\nexport class ModificationResponse extends DataMessage {\r\n\r\n\t/**\r\n\t * Constructs a new modification response.\r\n\t */\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper(Action.MODIFY);\r\n\r\n\t\t/**\r\n\t\t * A serialised SDF.\r\n\t\t *\r\n\t\t * @type {Object}\r\n\t\t */\r\n\r\n\t\tthis.sdf = null;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/worker/messages/ModificationResponse.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 775,
    "kind": "class",
    "name": "ModificationResponse",
    "memberof": "src/worker/messages/ModificationResponse.js",
    "static": true,
    "longname": "src/worker/messages/ModificationResponse.js~ModificationResponse",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/worker/messages/ModificationResponse.js",
    "importStyle": "{ModificationResponse}",
    "description": "A modification response.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/worker/messages/DataMessage.js~DataMessage"
    ]
  },
  {
    "__docId__": 776,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/worker/messages/ModificationResponse.js~ModificationResponse",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/messages/ModificationResponse.js~ModificationResponse#constructor",
    "access": "public",
    "description": "Constructs a new modification response.",
    "lineNumber": 14
  },
  {
    "__docId__": 777,
    "kind": "member",
    "name": "sdf",
    "memberof": "src/worker/messages/ModificationResponse.js~ModificationResponse",
    "static": false,
    "longname": "src/worker/messages/ModificationResponse.js~ModificationResponse#sdf",
    "access": "public",
    "description": "A serialised SDF.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 778,
    "kind": "file",
    "name": "src/worker/SurfaceExtractor.js",
    "content": "import { DualContouring } from \"../isosurface/dual-contouring/DualContouring.js\";\r\nimport { SparseVoxelOctree } from \"../octree/voxel/SparseVoxelOctree.js\";\r\nimport { HermiteData } from \"../volume/HermiteData.js\";\r\nimport { ExtractionResponse } from \"./messages/ExtractionResponse.js\";\r\nimport { DataProcessor } from \"./DataProcessor.js\";\r\n\r\n/**\r\n * A surface extractor that generates a polygonal mesh from Hermite data.\r\n */\r\n\r\nexport class SurfaceExtractor extends DataProcessor {\r\n\r\n\t/**\r\n\t * Constructs a new surface extractor.\r\n\t */\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * A container for the data that will be returned to the main thread.\r\n\t\t *\r\n\t\t * @type {ExtractionResponse}\r\n\t\t */\r\n\r\n\t\tthis.response = new ExtractionResponse();\r\n\r\n\t\t/**\r\n\t\t * A target container for decompressed data.\r\n\t\t *\r\n\t\t * @type {HermiteData}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.decompressionTarget = new HermiteData(false);\r\n\r\n\t\t/**\r\n\t\t * The result of the isosurface extraction process.\r\n\t\t *\r\n\t\t * @type {Isosurface}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.isosurface = null;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares a response that can be send back to the main thread.\r\n\t *\r\n\t * Should be used together with {@link SurfaceExtractor#createTransferList}.\r\n\t *\r\n\t * @return {ExtractionResponse} A response.\r\n\t */\r\n\r\n\trespond() {\r\n\r\n\t\tconst response = super.respond();\r\n\r\n\t\tresponse.isosurface = (this.isosurface !== null) ? this.isosurface.serialise() : null;\r\n\r\n\t\treturn response;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a list of transferable items.\r\n\t *\r\n\t * @param {Array} [transferList] - An optional target list. The transferable items will be added to this list.\r\n\t * @return {Transferable[]} The transfer list.\r\n\t */\r\n\r\n\tcreateTransferList(transferList = []) {\r\n\r\n\t\tsuper.createTransferList(transferList);\r\n\r\n\t\treturn (this.isosurface !== null) ? this.isosurface.createTransferList(transferList) : transferList;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Extracts a surface from the given Hermite data.\r\n\t *\r\n\t * @param {ExtractionRequest} request - An extraction request.\r\n\t */\r\n\r\n\tprocess(request) {\r\n\r\n\t\t// Adopt the provided data.\r\n\t\tconst data = super.process(request).getData();\r\n\r\n\t\t// Decompress the data and build an SVO.\r\n\t\tconst svo = new SparseVoxelOctree(data.decompress(this.decompressionTarget));\r\n\r\n\t\t// Generate the isosurface.\r\n\t\tthis.isosurface = DualContouring.run(svo);\r\n\r\n\t\t// Release the decompressed data.\r\n\t\tthis.decompressionTarget.clear();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/worker/SurfaceExtractor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 779,
    "kind": "class",
    "name": "SurfaceExtractor",
    "memberof": "src/worker/SurfaceExtractor.js",
    "static": true,
    "longname": "src/worker/SurfaceExtractor.js~SurfaceExtractor",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/worker/SurfaceExtractor.js",
    "importStyle": "{SurfaceExtractor}",
    "description": "A surface extractor that generates a polygonal mesh from Hermite data.",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "src/worker/DataProcessor.js~DataProcessor"
    ]
  },
  {
    "__docId__": 780,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/worker/SurfaceExtractor.js~SurfaceExtractor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/SurfaceExtractor.js~SurfaceExtractor#constructor",
    "access": "public",
    "description": "Constructs a new surface extractor.",
    "lineNumber": 17
  },
  {
    "__docId__": 781,
    "kind": "member",
    "name": "response",
    "memberof": "src/worker/SurfaceExtractor.js~SurfaceExtractor",
    "static": false,
    "longname": "src/worker/SurfaceExtractor.js~SurfaceExtractor#response",
    "access": "public",
    "description": "A container for the data that will be returned to the main thread.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "ExtractionResponse"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 782,
    "kind": "member",
    "name": "decompressionTarget",
    "memberof": "src/worker/SurfaceExtractor.js~SurfaceExtractor",
    "static": false,
    "longname": "src/worker/SurfaceExtractor.js~SurfaceExtractor#decompressionTarget",
    "access": "private",
    "description": "A target container for decompressed data.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "HermiteData"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 783,
    "kind": "member",
    "name": "isosurface",
    "memberof": "src/worker/SurfaceExtractor.js~SurfaceExtractor",
    "static": false,
    "longname": "src/worker/SurfaceExtractor.js~SurfaceExtractor#isosurface",
    "access": "private",
    "description": "The result of the isosurface extraction process.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Isosurface"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 784,
    "kind": "method",
    "name": "respond",
    "memberof": "src/worker/SurfaceExtractor.js~SurfaceExtractor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/SurfaceExtractor.js~SurfaceExtractor#respond",
    "access": "public",
    "description": "Prepares a response that can be send back to the main thread.\n\nShould be used together with {@link SurfaceExtractor#createTransferList}.",
    "lineNumber": 57,
    "return": {
      "nullable": null,
      "types": [
        "ExtractionResponse"
      ],
      "spread": false,
      "description": "A response."
    },
    "params": []
  },
  {
    "__docId__": 785,
    "kind": "method",
    "name": "createTransferList",
    "memberof": "src/worker/SurfaceExtractor.js~SurfaceExtractor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/SurfaceExtractor.js~SurfaceExtractor#createTransferList",
    "access": "public",
    "description": "Creates a list of transferable items.",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "transferList",
        "description": "An optional target list. The transferable items will be added to this list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transferable[]"
      ],
      "spread": false,
      "description": "The transfer list."
    }
  },
  {
    "__docId__": 786,
    "kind": "method",
    "name": "process",
    "memberof": "src/worker/SurfaceExtractor.js~SurfaceExtractor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/SurfaceExtractor.js~SurfaceExtractor#process",
    "access": "public",
    "description": "Extracts a surface from the given Hermite data.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "ExtractionRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "An extraction request."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 788,
    "kind": "file",
    "name": "src/worker/thread-pool-events.js",
    "content": "import { WorkerEvent } from \"../events/WorkerEvent.js\";\r\n\r\n/**\r\n * A worker message event.\r\n *\r\n * This event is dispatched by {@link ThreadPool}.\r\n *\r\n * @type {WorkerEvent}\r\n * @example threadPool.addEventListener(\"message\", myListener);\r\n */\r\n\r\nexport const message = new WorkerEvent(\"message\");\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/worker/thread-pool-events.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 789,
    "kind": "variable",
    "name": "message",
    "memberof": "src/worker/thread-pool-events.js",
    "static": true,
    "longname": "src/worker/thread-pool-events.js~message",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/worker/thread-pool-events.js",
    "importStyle": "{message}",
    "description": "A worker message event.\n\nThis event is dispatched by {@link ThreadPool}.",
    "examples": [
      "threadPool.addEventListener(\"message\", myListener);"
    ],
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "WorkerEvent"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 790,
    "kind": "file",
    "name": "src/worker/ThreadPool.js",
    "content": "import { EventTarget } from \"synthetic-event\";\r\nimport { ConfigurationMessage, Message } from \"./messages\";\r\nimport { Action } from \"./Action.js\";\r\nimport * as events from \"./thread-pool-events.js\";\r\n\r\nimport worker from \"./worker.tmp\";\r\n\r\n/**\r\n * Manages worker threads.\r\n *\r\n * @implements {Disposable}\r\n * @implements {EventListener}\r\n */\r\n\r\nexport class ThreadPool extends EventTarget {\r\n\r\n\t/**\r\n\t * Constructs a new thread pool.\r\n\t *\r\n\t * @param {Number} [maxWorkers=navigator.hardwareConcurrency] - Limits the amount of active workers. The default limit is the amount of logical processors.\r\n\t */\r\n\r\n\tconstructor(maxWorkers = navigator.hardwareConcurrency) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * An object URL that points to the worker program.\r\n\t\t *\r\n\t\t * @type {String}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.workerURL = URL.createObjectURL(new Blob([worker], { type: \"text/javascript\" }));\r\n\r\n\t\t/**\r\n\t\t * The maximum number of active worker threads.\r\n\t\t *\r\n\t\t * @type {Number}\r\n\t\t */\r\n\r\n\t\tthis.maxWorkers = Math.min(navigator.hardwareConcurrency, Math.max(maxWorkers, 1));\r\n\r\n\t\t/**\r\n\t\t * A list of existing workers.\r\n\t\t *\r\n\t\t * @type {Worker[]}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.workers = [];\r\n\r\n\t\t/**\r\n\t\t * Keeps track of workers that are currently busy.\r\n\t\t *\r\n\t\t * @type {WeakSet}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.busyWorkers = new WeakSet();\r\n\r\n\t\t/**\r\n\t\t * A configuration message.\r\n\t\t *\r\n\t\t * This object will be sent to each newly created worker.\r\n\t\t *\r\n\t\t * @type {ConfigurationMessage}\r\n\t\t */\r\n\r\n\t\tthis.configurationMessage = new ConfigurationMessage();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handles events.\r\n\t *\r\n\t * @param {Event} event - An event.\r\n\t */\r\n\r\n\thandleEvent(event) {\r\n\r\n\t\tswitch(event.type) {\r\n\r\n\t\t\tcase \"message\": {\r\n\r\n\t\t\t\tthis.busyWorkers.delete(event.target);\r\n\r\n\t\t\t\tevents.message.worker = event.target;\r\n\t\t\t\tevents.message.response = event.data;\r\n\r\n\t\t\t\tthis.dispatchEvent(events.message);\r\n\r\n\t\t\t\tif(this.workers.length > this.maxWorkers) {\r\n\r\n\t\t\t\t\tthis.closeWorker(event.target);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcase \"error\": {\r\n\r\n\t\t\t\t// Errors are being handled in the worker.\r\n\t\t\t\tconsole.error(\"Encountered an unexpected error\", event);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Closes a worker.\r\n\t *\r\n\t * @param {Worker} worker - The worker to close.\r\n\t */\r\n\r\n\tcloseWorker(worker) {\r\n\r\n\t\tconst index = this.workers.indexOf(worker);\r\n\r\n\t\tif(this.busyWorkers.has(worker)) {\r\n\r\n\t\t\tthis.busyWorkers.delete(worker);\r\n\t\t\tworker.terminate();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tworker.postMessage(new Message(Action.CLOSE));\r\n\r\n\t\t}\r\n\r\n\t\tworker.removeEventListener(\"message\", this);\r\n\t\tworker.removeEventListener(\"error\", this);\r\n\r\n\t\tif(index >= 0) {\r\n\r\n\t\t\tthis.workers.splice(index, 1);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new worker.\r\n\t *\r\n\t * @private\r\n\t * @return {Worker} The worker.\r\n\t */\r\n\r\n\tcreateWorker() {\r\n\r\n\t\tconst worker = new Worker(this.workerURL);\r\n\r\n\t\tthis.workers.push(worker);\r\n\r\n\t\tworker.addEventListener(\"message\", this);\r\n\t\tworker.addEventListener(\"error\", this);\r\n\r\n\t\tworker.postMessage(this.configurationMessage);\r\n\r\n\t\treturn worker;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Polls an available worker and returns it. The worker will be excluded from\r\n\t * subsequent polls until it finishes its task and sends a message back.\r\n\t *\r\n\t * @return {Worker} A worker or null if all resources are currently exhausted.\r\n\t */\r\n\r\n\tgetWorker() {\r\n\r\n\t\tlet worker = null;\r\n\r\n\t\tlet i, l;\r\n\r\n\t\t// Check if an existing worker is available.\r\n\t\tfor(i = 0, l = this.workers.length; i < l; ++i) {\r\n\r\n\t\t\tif(!this.busyWorkers.has(this.workers[i])) {\r\n\r\n\t\t\t\tworker = this.workers[i];\r\n\t\t\t\tthis.busyWorkers.add(worker);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Try to create a new worker if all existing ones are busy.\r\n\t\tif(worker === null && this.workers.length < this.maxWorkers) {\r\n\r\n\t\t\tif(this.workerURL !== null) {\r\n\r\n\t\t\t\tworker = this.createWorker();\r\n\t\t\t\tthis.busyWorkers.add(worker);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn worker;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Resets this thread pool by closing all workers.\r\n\t */\r\n\r\n\tclear() {\r\n\r\n\t\twhile(this.workers.length > 0) {\r\n\r\n\t\t\tthis.closeWorker(this.workers.pop());\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all active workers and releases the worker program blob.\r\n\t */\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.clear();\r\n\r\n\t\tURL.revokeObjectURL(this.workerURL);\r\n\r\n\t\tthis.workerURL = null;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/worker/ThreadPool.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 791,
    "kind": "class",
    "name": "ThreadPool",
    "memberof": "src/worker/ThreadPool.js",
    "static": true,
    "longname": "src/worker/ThreadPool.js~ThreadPool",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/worker/ThreadPool.js",
    "importStyle": "{ThreadPool}",
    "description": "Manages worker threads.",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "synthetic-event~EventTarget"
    ],
    "implements": [
      "Disposable",
      "EventListener"
    ]
  },
  {
    "__docId__": 792,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/worker/ThreadPool.js~ThreadPool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/ThreadPool.js~ThreadPool#constructor",
    "access": "public",
    "description": "Constructs a new thread pool.",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "navigator.hardwareConcurrency",
        "defaultRaw": "navigator.hardwareConcurrency",
        "name": "maxWorkers",
        "description": "Limits the amount of active workers. The default limit is the amount of logical processors."
      }
    ]
  },
  {
    "__docId__": 793,
    "kind": "member",
    "name": "workerURL",
    "memberof": "src/worker/ThreadPool.js~ThreadPool",
    "static": false,
    "longname": "src/worker/ThreadPool.js~ThreadPool#workerURL",
    "access": "private",
    "description": "An object URL that points to the worker program.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 794,
    "kind": "member",
    "name": "maxWorkers",
    "memberof": "src/worker/ThreadPool.js~ThreadPool",
    "static": false,
    "longname": "src/worker/ThreadPool.js~ThreadPool#maxWorkers",
    "access": "public",
    "description": "The maximum number of active worker threads.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 795,
    "kind": "member",
    "name": "workers",
    "memberof": "src/worker/ThreadPool.js~ThreadPool",
    "static": false,
    "longname": "src/worker/ThreadPool.js~ThreadPool#workers",
    "access": "private",
    "description": "A list of existing workers.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "Worker[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 796,
    "kind": "member",
    "name": "busyWorkers",
    "memberof": "src/worker/ThreadPool.js~ThreadPool",
    "static": false,
    "longname": "src/worker/ThreadPool.js~ThreadPool#busyWorkers",
    "access": "private",
    "description": "Keeps track of workers that are currently busy.",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "WeakSet"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 797,
    "kind": "member",
    "name": "configurationMessage",
    "memberof": "src/worker/ThreadPool.js~ThreadPool",
    "static": false,
    "longname": "src/worker/ThreadPool.js~ThreadPool#configurationMessage",
    "access": "public",
    "description": "A configuration message.\n\nThis object will be sent to each newly created worker.",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "ConfigurationMessage"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 798,
    "kind": "method",
    "name": "handleEvent",
    "memberof": "src/worker/ThreadPool.js~ThreadPool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/ThreadPool.js~ThreadPool#handleEvent",
    "access": "public",
    "description": "Handles events.",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "An event."
      }
    ],
    "return": null
  },
  {
    "__docId__": 799,
    "kind": "method",
    "name": "closeWorker",
    "memberof": "src/worker/ThreadPool.js~ThreadPool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/ThreadPool.js~ThreadPool#closeWorker",
    "access": "public",
    "description": "Closes a worker.",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "Worker"
        ],
        "spread": false,
        "optional": false,
        "name": "worker",
        "description": "The worker to close."
      }
    ],
    "return": null
  },
  {
    "__docId__": 800,
    "kind": "method",
    "name": "createWorker",
    "memberof": "src/worker/ThreadPool.js~ThreadPool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/ThreadPool.js~ThreadPool#createWorker",
    "access": "private",
    "description": "Creates a new worker.",
    "lineNumber": 154,
    "return": {
      "nullable": null,
      "types": [
        "Worker"
      ],
      "spread": false,
      "description": "The worker."
    },
    "params": []
  },
  {
    "__docId__": 801,
    "kind": "method",
    "name": "getWorker",
    "memberof": "src/worker/ThreadPool.js~ThreadPool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/ThreadPool.js~ThreadPool#getWorker",
    "access": "public",
    "description": "Polls an available worker and returns it. The worker will be excluded from\nsubsequent polls until it finishes its task and sends a message back.",
    "lineNumber": 176,
    "return": {
      "nullable": null,
      "types": [
        "Worker"
      ],
      "spread": false,
      "description": "A worker or null if all resources are currently exhausted."
    },
    "params": []
  },
  {
    "__docId__": 802,
    "kind": "method",
    "name": "clear",
    "memberof": "src/worker/ThreadPool.js~ThreadPool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/ThreadPool.js~ThreadPool#clear",
    "access": "public",
    "description": "Resets this thread pool by closing all workers.",
    "lineNumber": 216,
    "params": [],
    "return": null
  },
  {
    "__docId__": 803,
    "kind": "method",
    "name": "dispose",
    "memberof": "src/worker/ThreadPool.js~ThreadPool",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/ThreadPool.js~ThreadPool#dispose",
    "access": "public",
    "description": "Removes all active workers and releases the worker program blob.",
    "lineNumber": 230,
    "params": [],
    "return": null
  },
  {
    "__docId__": 805,
    "kind": "file",
    "name": "src/worker/VolumeModifier.js",
    "content": "import { ConstructiveSolidGeometry } from \"../volume/csg/ConstructiveSolidGeometry.js\";\r\nimport { SDFReviver } from \"../volume/sdf/SDFReviver.js\";\r\nimport { ModificationResponse } from \"./messages/ModificationResponse.js\";\r\nimport { DataProcessor } from \"./DataProcessor.js\";\r\n\r\n/**\r\n * A modifier that applies CSG operations to Hermite data.\r\n */\r\n\r\nexport class VolumeModifier extends DataProcessor {\r\n\r\n\t/**\r\n\t * Constructs a new Hermite data modifier.\r\n\t */\r\n\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * A container for the data that will be returned to the main thread.\r\n\t\t *\r\n\t\t * @type {ModificationResponse}\r\n\t\t */\r\n\r\n\t\tthis.response = new ModificationResponse();\r\n\r\n\t\t/**\r\n\t\t * An SDF.\r\n\t\t *\r\n\t\t * @type {SignedDistanceFunction}\r\n\t\t * @private\r\n\t\t */\r\n\r\n\t\tthis.sdf = null;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares a response that can be send back to the main thread.\r\n\t *\r\n\t * Should be used together with {@link VolumeModifier#createTransferList}.\r\n\t *\r\n\t * @return {ModificationResponse} A response.\r\n\t */\r\n\r\n\trespond() {\r\n\r\n\t\t// The container group contains the modified data.\r\n\t\tconst response = super.respond();\r\n\r\n\t\t// Send the SDF back as it may contain transferable data.\r\n\t\tresponse.sdf = (this.sdf !== null) ? this.sdf.serialize() : null;\r\n\r\n\t\treturn response;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a list of transferable items.\r\n\t *\r\n\t * @param {Array} [transferList] - An optional target list. The transferable items will be added to this list.\r\n\t * @return {Transferable[]} The transfer list.\r\n\t */\r\n\r\n\tcreateTransferList(transferList = []) {\r\n\r\n\t\tsuper.createTransferList(transferList);\r\n\r\n\t\treturn (this.sdf !== null) ? this.sdf.createTransferList(transferList) : transferList;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Modifies the given Hermite data using the provided SDF.\r\n\t *\r\n\t * @param {ModificationRequest} request - A modification request.\r\n\t */\r\n\r\n\tprocess(request) {\r\n\r\n\t\t// Adopt the provided data.\r\n\t\tconst data = super.process(request).getData();\r\n\r\n\t\t// Revive the SDF.\r\n\t\tconst sdf = this.sdf = SDFReviver.revive(request.sdf);\r\n\r\n\t\t// The resulting data is uncompressed.\r\n\t\tconst result = ConstructiveSolidGeometry.run(request.cellPosition, request.cellSize, data, sdf);\r\n\r\n\t\t// Overwrite the data and compress it.\r\n\t\tsuper.data = (result !== null) ? result.compress() : null;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/worker/VolumeModifier.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 806,
    "kind": "class",
    "name": "VolumeModifier",
    "memberof": "src/worker/VolumeModifier.js",
    "static": true,
    "longname": "src/worker/VolumeModifier.js~VolumeModifier",
    "access": "public",
    "export": true,
    "importPath": "rabbit-hole/src/worker/VolumeModifier.js",
    "importStyle": "{VolumeModifier}",
    "description": "A modifier that applies CSG operations to Hermite data.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/worker/DataProcessor.js~DataProcessor"
    ]
  },
  {
    "__docId__": 807,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/worker/VolumeModifier.js~VolumeModifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/VolumeModifier.js~VolumeModifier#constructor",
    "access": "public",
    "description": "Constructs a new Hermite data modifier.",
    "lineNumber": 16
  },
  {
    "__docId__": 808,
    "kind": "member",
    "name": "response",
    "memberof": "src/worker/VolumeModifier.js~VolumeModifier",
    "static": false,
    "longname": "src/worker/VolumeModifier.js~VolumeModifier#response",
    "access": "public",
    "description": "A container for the data that will be returned to the main thread.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "ModificationResponse"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 809,
    "kind": "member",
    "name": "sdf",
    "memberof": "src/worker/VolumeModifier.js~VolumeModifier",
    "static": false,
    "longname": "src/worker/VolumeModifier.js~VolumeModifier#sdf",
    "access": "private",
    "description": "An SDF.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "SignedDistanceFunction"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 810,
    "kind": "method",
    "name": "respond",
    "memberof": "src/worker/VolumeModifier.js~VolumeModifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/VolumeModifier.js~VolumeModifier#respond",
    "access": "public",
    "description": "Prepares a response that can be send back to the main thread.\n\nShould be used together with {@link VolumeModifier#createTransferList}.",
    "lineNumber": 47,
    "return": {
      "nullable": null,
      "types": [
        "ModificationResponse"
      ],
      "spread": false,
      "description": "A response."
    },
    "params": []
  },
  {
    "__docId__": 811,
    "kind": "method",
    "name": "createTransferList",
    "memberof": "src/worker/VolumeModifier.js~VolumeModifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/VolumeModifier.js~VolumeModifier#createTransferList",
    "access": "public",
    "description": "Creates a list of transferable items.",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "transferList",
        "description": "An optional target list. The transferable items will be added to this list."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Transferable[]"
      ],
      "spread": false,
      "description": "The transfer list."
    }
  },
  {
    "__docId__": 812,
    "kind": "method",
    "name": "process",
    "memberof": "src/worker/VolumeModifier.js~VolumeModifier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/worker/VolumeModifier.js~VolumeModifier#process",
    "access": "public",
    "description": "Modifies the given Hermite data using the provided SDF.",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "ModificationRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "A modification request."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 813,
    "kind": "file",
    "name": "src/worker/worker.js",
    "content": "import { HermiteData } from \"../volume/HermiteData.js\";\r\nimport { VoxelCell } from \"../octree/voxel/VoxelCell.js\";\r\nimport { Message } from \"./messages/Message.js\";\r\nimport { SurfaceExtractor } from \"./SurfaceExtractor.js\";\r\nimport { VolumeModifier } from \"./VolumeModifier.js\";\r\nimport { Action } from \"./Action.js\";\r\n\r\n/**\r\n * A volume modifier.\r\n *\r\n * @type {VolumeModifier}\r\n * @private\r\n */\r\n\r\nconst volumeModifier = new VolumeModifier();\r\n\r\n/**\r\n * A surface extractor.\r\n *\r\n * @type {SurfaceExtractor}\r\n * @private\r\n */\r\n\r\nconst surfaceExtractor = new SurfaceExtractor();\r\n\r\n/**\r\n * The current action.\r\n *\r\n * @type {Action}\r\n * @private\r\n */\r\n\r\nlet action = null;\r\n\r\n/**\r\n * Receives and handles messages from the main thread.\r\n *\r\n * @private\r\n * @param {Event} event - A message event containing data from the main thread.\r\n */\r\n\r\nself.addEventListener(\"message\", function onMessage(event) {\r\n\r\n\t// Unpack the request.\r\n\tconst request = event.data;\r\n\taction = request.action;\r\n\r\n\tswitch(action) {\r\n\r\n\t\tcase Action.MODIFY:\r\n\t\t\tpostMessage(\r\n\t\t\t\tvolumeModifier.process(request).respond(),\r\n\t\t\t\tvolumeModifier.createTransferList()\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\r\n\t\tcase Action.EXTRACT:\r\n\t\t\tpostMessage(\r\n\t\t\t\tsurfaceExtractor.process(request).respond(),\r\n\t\t\t\tsurfaceExtractor.createTransferList()\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\r\n\t\tcase Action.CONFIGURE:\r\n\t\t\tHermiteData.resolution = request.resolution;\r\n\t\t\tVoxelCell.errorThreshold = request.errorThreshold;\r\n\t\t\tbreak;\r\n\r\n\t\tcase Action.CLOSE:\r\n\t\tdefault:\r\n\t\t\tclose();\r\n\r\n\t}\r\n\r\n});\r\n\r\n/**\r\n * Returns all data to the main thread and closes the worker.\r\n *\r\n * @private\r\n * @param {ErrorEvent} event - An error event.\r\n */\r\n\r\nself.addEventListener(\"error\", function onError(event) {\r\n\r\n\tconst processor = (action === Action.MODIFY) ?\r\n\t\tvolumeModifier : (action === Action.EXTRACT) ?\r\n\t\t\tsurfaceExtractor : null;\r\n\r\n\tlet response;\r\n\r\n\tif(processor !== null) {\r\n\r\n\t\t// Evacuate the data.\r\n\t\tresponse = processor.respond();\r\n\r\n\t\t// Adjust the action and attach the error event.\r\n\t\tresponse.action = Action.CLOSE;\r\n\t\tresponse.error = event;\r\n\r\n\t\tpostMessage(response, processor.createTransferList());\r\n\r\n\t} else {\r\n\r\n\t\t// An unexpected error occured during configuration or closure.\r\n\t\tresponse = new Message(Action.CLOSE);\r\n\t\tresponse.error = event;\r\n\r\n\t\tpostMessage(response);\r\n\r\n\t}\r\n\r\n\tclose();\r\n\r\n});\r\n",
    "static": true,
    "longname": "D:/Sourcecode/JavaScript/rabbit-hole/src/worker/worker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 814,
    "kind": "variable",
    "name": "volumeModifier",
    "memberof": "src/worker/worker.js",
    "static": true,
    "longname": "src/worker/worker.js~volumeModifier",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/worker/worker.js",
    "importStyle": null,
    "description": "A volume modifier.",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "VolumeModifier"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 815,
    "kind": "variable",
    "name": "surfaceExtractor",
    "memberof": "src/worker/worker.js",
    "static": true,
    "longname": "src/worker/worker.js~surfaceExtractor",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/worker/worker.js",
    "importStyle": null,
    "description": "A surface extractor.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "SurfaceExtractor"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 816,
    "kind": "variable",
    "name": "action",
    "memberof": "src/worker/worker.js",
    "static": true,
    "longname": "src/worker/worker.js~action",
    "access": "private",
    "export": false,
    "importPath": "rabbit-hole/src/worker/worker.js",
    "importStyle": null,
    "description": "The current action.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "Action"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "kind": "index",
    "content": "# Rabbit Hole\r\n\r\n[![Build status](https://travis-ci.org/vanruesc/rabbit-hole.svg?branch=master)](https://travis-ci.org/vanruesc/rabbit-hole)\r\n[![NPM version](https://badge.fury.io/js/rabbit-hole.svg)](http://badge.fury.io/js/rabbit-hole)\r\n[![Peer dependencies](https://david-dm.org/vanruesc/rabbit-hole/peer-status.svg)](https://david-dm.org/vanruesc/rabbit-hole?type=peer)\r\n\r\nA volumetric terrain engine for WebGL. This engine has been created in the context of a Master's degree project at\r\nthe [University of Applied Sciences Brandenburg](https://www.th-brandenburg.de) in cooperation with the\r\n[Norwegian University of Technology and Science](https://www.ntnu.no).\r\n\r\n_While many core features are already implemented, this project is still under development._\r\n\r\n*[Demo](https://vanruesc.github.io/rabbit-hole/public/demo) &there4;\r\n[Performance](https://vanruesc.github.io/rabbit-hole/public/performance) &there4;\r\n[Volume Editor](https://vanruesc.github.io/rabbit-hole/public/editor) &there4;\r\n[API Reference](https://vanruesc.github.io/rabbit-hole/public/docs) &there4;\r\n[Master's Thesis (2016)](https://vanruesc.github.io/rabbit-hole//public/thesis-volumetric-terrain-rendering-with-webgl.pdf) &there4;\r\n[Electronic Imaging Paper (2018)](https://ist.publisher.ingentaconnect.com/contentone/ist/ei/2018/00002018/00000006/art00007)*\r\n\r\n\r\n## Installation\r\n\r\nThis library requires the peer dependencies\r\n[iterator-result](https://github.com/vanruesc/iterator-result),\r\n[math-ds](https://github.com/vanruesc/math-ds),\r\n[sparse-octree](https://github.com/vanruesc/sparse-octree) and\r\n[synthetic-event](https://github.com/vanruesc/synthetic-event).\r\n\r\n```sh\r\nnpm install iterator-result math-ds sparse-octree synthetic-event\r\n``` \r\n\r\n```sh\r\nnpm install rabbit-hole\r\n``` \r\n\r\n\r\n## Usage\r\n\r\nThe following example uses [rabbit-hole-three]() and the rendering framework [three](https://github.com/mrdoob/three.js/).\r\nPlease refer to the [usage example](https://github.com/mrdoob/three.js/blob/master/README.md) of `three` for information\r\non how to setup the renderer, scene and camera.\r\n\r\n##### Basics\r\n\r\n```javascript\r\nimport { Terrain } from \"rabbit-hole\";\r\nimport {  } from \"rabbit-hole-three\";\r\n\r\nconst terrain = new Terrain();\r\nscene.add(terrain.object);\r\n\r\n(function render() {\r\n\r\n\trequestAnimationFrame(render);\r\n\tterrain.update(camera);\r\n\trenderer.render(scene, camera);\r\n\r\n}());\r\n```\r\n\r\n##### Constructive Solid Geometry\r\n\r\n```javascript\r\nimport { SuperPrimitive, SuperPrimitivePreset } from \"rabbit-hole\";\r\n\r\nconst a = SuperPrimitive.create(SuperPrimitivePreset.SPHERE);\r\nconst b = SuperPrimitive.create(SuperPrimitivePreset.TORUS);\r\nconst c = SuperPrimitive.create(SuperPrimitivePreset.CUBE);\r\n\r\nterrain.union(a);\r\nterrain.subtract(b.intersect(c).subtract(a));\r\nterrain.intersect(c.subtract(a.union(b)));\r\n```\r\n\r\n\r\n## Features\r\n\r\n- [Multithreading](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API)\r\n- Level of Detail\r\n- Real-time volume construction and destruction\r\n\r\n\r\n## Contributing\r\n\r\nPlease refer to the [contribution guidelines](https://github.com/vanruesc/rabbit-hole/blob/master/.github/CONTRIBUTING.md) for details.\r\n",
    "longname": "D:\\Sourcecode\\JavaScript\\rabbit-hole\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n\t\"name\": \"rabbit-hole\",\r\n\t\"version\": \"0.0.0\",\r\n\t\"description\": \"A volumetric terrain engine.\",\r\n\t\"homepage\": \"https://github.com/vanruesc/rabbit-hole\",\r\n\t\"main\": \"build/rabbit-hole.js\",\r\n\t\"module\": \"src/index.js\",\r\n\t\"sideEffects\": false,\r\n\t\"license\": \"Zlib\",\r\n\r\n\t\"keywords\": [\r\n\t\t\"volumetric\",\r\n\t\t\"voxel\",\r\n\t\t\"engine\",\r\n\t\t\"isosurface\",\r\n\t\t\"contouring\",\r\n\t\t\"terrain\"\r\n\t],\r\n\r\n\t\"author\": {\r\n\t\t\"name\": \"Raoul van Rüschen\",\r\n\t\t\"email\": \"vanruesc@outlook.de\"\r\n\t},\r\n\r\n\t\"repository\": {\r\n\t\t\"type\": \"git\",\r\n\t\t\"url\": \"https://github.com/vanruesc/rabbit-hole.git\"\r\n\t},\r\n\r\n\t\"bugs\": {\r\n\t\t\"url\": \"https://github.com/vanruesc/rabbit-hole/issues\"\r\n\t},\r\n\r\n\t\"files\": [\r\n\t\t\"src\",\r\n\t\t\"build\"\r\n\t],\r\n\r\n\t\"scripts\": {\r\n\t\t\"ava\": \"ava\",\r\n\t\t\"lint\": \"npm run lint:lib && npm run lint:demo && npm run lint:editor && npm run lint:performance && npm run lint:test\",\r\n\t\t\"lint:config\": \"eslint *.js\",\r\n\t\t\"lint:experiment\": \"eslint experiment\",\r\n\t\t\"lint:lib\": \"eslint src\",\r\n\t\t\"lint:demo\": \"eslint demo/src\",\r\n\t\t\"lint:editor\": \"eslint editor/src\",\r\n\t\t\"lint:performance\": \"eslint performance/src\",\r\n\t\t\"lint:test\": \"eslint test\",\r\n\t\t\"build\": \"rollup -c\",\r\n\t\t\"build:production\": \"cross-env NODE_ENV=production rollup -c\",\r\n\t\t\"doc\": \"esdoc\",\r\n\t\t\"deploy\": \"npm run deploy:demo && npm run deploy:editor && npm run deploy:performance\",\r\n\t\t\"deploy:demo\": \"cpx demo/assets/** public/demo\",\r\n\t\t\"deploy:editor\": \"cpx editor/assets/** public/editor\",\r\n\t\t\"deploy:performance\": \"cpx performance/assets/** public/performance\",\r\n\t\t\"pretest\": \"npm run lint && npm run build:production\",\r\n\t\t\"test\": \"npm run ava\",\r\n\t\t\"prepack\": \"npm test && inline-import\",\r\n\t\t\"postpublish\": \"inline-import -r\"\r\n\t},\r\n\r\n\t\"ava\": {\r\n\t\t\"failFast\": true,\r\n\t\t\"files\": [\"test/**/*.js\"]\r\n\t},\r\n\r\n\t\"eslintConfig\": {\r\n\t\t\"extends\": \"delta\"\r\n\t},\r\n\r\n\t\"peerDependencies\": {\r\n\t\t\"iterator-result\": \">= 0.0.0 < 1.0.0\",\r\n\t\t\"math-ds\": \">= 1.0.0 < 2.0.0\",\r\n\t\t\"sparse-octree\": \">= 5.0.0 < 6.0.0\",\r\n\t\t\"synthetic-event\": \">= 0.0.0 < 1.0.0\"\r\n\t},\r\n\r\n\t\"devDependencies\": {\r\n\t\t\"@babel/core\": \"7.x.x\",\r\n\t\t\"@babel/preset-env\": \"7.x.x\",\r\n\t\t\"ava\": \"0.x.x\",\r\n\t\t\"cpx\": \"1.x.x\",\r\n\t\t\"cross-env\": \"5.x.x\",\r\n\t\t\"dat.gui\": \"0.x.x\",\r\n\t\t\"delta-controls\": \"2.x.x\",\r\n\t\t\"esdoc\": \"1.x.x\",\r\n\t\t\"esdoc-standard-plugin\": \"1.x.x\",\r\n\t\t\"eslint\": \"5.x.x\",\r\n\t\t\"eslint-config-delta\": \"0.x.x\",\r\n\t\t\"feature-detector\": \"0.x.x\",\r\n\t\t\"hermite-data-helper\": \"0.x.x\",\r\n\t\t\"inline-import\": \"1.x.x\",\r\n\t\t\"iterator-result\": \"0.x\",\r\n\t\t\"math-ds\": \"1.x.x\",\r\n\t\t\"octree-helper\": \"0.x.x\",\r\n\t\t\"rollup\": \"0.x.x\",\r\n\t\t\"rollup-plugin-babel\": \"4.x.x\",\r\n\t\t\"rollup-plugin-babel-minify\": \"6.x.x\",\r\n\t\t\"rollup-plugin-node-resolve\": \"3.x.x\",\r\n\t\t\"rollup-plugin-string\": \"2.x.x\",\r\n\t\t\"sparse-octree\": \"5.x.x\",\r\n\t\t\"synthetic-event\": \"0.x.x\",\r\n\t\t\"three\": \"0.97.x\",\r\n\t\t\"three-demo\": \"3.x.x\"\r\n\t}\r\n}\r\n",
    "longname": "D:\\Sourcecode\\JavaScript\\rabbit-hole\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]